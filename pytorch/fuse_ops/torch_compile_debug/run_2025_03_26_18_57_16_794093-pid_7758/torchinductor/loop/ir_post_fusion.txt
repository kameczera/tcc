op4_op11_op18_op25_op32_op39_op46_op53_op60: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op4_op11_op18_op25_op32_op39_op46_op53_op60.writes = 
    [   MemoryDep('buf11', c0, {c0: 100}, None),
        MemoryDep('buf18', c0, {c0: 100}, None),
        MemoryDep('buf25', c0, {c0: 100}, None),
        MemoryDep('buf32', c0, {c0: 100}, None),
        MemoryDep('buf39', c0, {c0: 100}, None),
        MemoryDep('buf4', c0, {c0: 100}, None),
        MemoryDep('buf46', c0, {c0: 100}, None),
        MemoryDep('buf53', c0, {c0: 100}, None),
        MemoryDep('buf60', c0, {c0: 100}, None)]
op4_op11_op18_op25_op32_op39_op46_op53_op60.unmet_dependencies = []
op4_op11_op18_op25_op32_op39_op46_op53_op60.met_dependencies = [MemoryDep('tangents_1', c0, {c0: 100}, None)]
op4_op11_op18_op25_op32_op39_op46_op53_op60.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf4.users = [
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
    ]
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf11.users = [
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
    ]
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf18.users = [
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
    ]
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf25.users = [
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
    ]
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf32.users = [
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
    ]
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf39.users = [
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False),
    ]
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf46.users = [
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
    ]
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf53.users = [
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
    ]
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf60.users = [
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False),
    ]
]
op4_op11_op18_op25_op32_op39_op46_op53_op60.snodes[0] =
op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 100}, None)]
op4.unmet_dependencies = []
op4.met_dependencies = [MemoryDep('tangents_1', c0, {c0: 100}, None)]
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf4.users = [
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
    ]
]
op4.group.device = cuda:0
op4.group.iteration = (100, 1)
op4.sizes = ([100], [])
tangents_1_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op4_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(90, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(91, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(92, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int32)
        constant_3 = ops.constant(93, torch.int32)
        eq_3 = ops.eq(index_expr_3, constant_3)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(94, torch.int32)
        eq_4 = ops.eq(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int32)
        constant_5 = ops.constant(95, torch.int32)
        eq_5 = ops.eq(index_expr_5, constant_5)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int32)
        constant_6 = ops.constant(96, torch.int32)
        eq_6 = ops.eq(index_expr_6, constant_6)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int32)
        constant_7 = ops.constant(97, torch.int32)
        eq_7 = ops.eq(index_expr_7, constant_7)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int32)
        constant_8 = ops.constant(98, torch.int32)
        eq_8 = ops.eq(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int32)
        constant_9 = ops.constant(99, torch.int32)
        eq_9 = ops.eq(index_expr_9, constant_9)
        get_index_10 = self.get_index('index0')
        load = ops.load('tangents_1', get_index_10)
        constant_10 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_9, constant_10, load)
        constant_11 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_8, constant_11, where)
        constant_12 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_7, constant_12, where_1)
        constant_13 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_6, constant_13, where_2)
        constant_14 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_5, constant_14, where_3)
        constant_15 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_4, constant_15, where_4)
        constant_16 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_3, constant_16, where_5)
        constant_17 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_2, constant_17, where_6)
        constant_18 = ops.constant(0.0, torch.float32)
        where_8 = ops.where(eq_1, constant_18, where_7)
        constant_19 = ops.constant(0.0, torch.float32)
        where_9 = ops.where(eq, constant_19, where_8)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf4', get_index_11, where_9, None)
        return store
op4 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp21 = tl.load(in_ptr0 + (x0), xmask)
        tmp0 = x0
        tmp1 = tl.full([1], 90, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = tl.full([1], 91, tl.int32)
        tmp4 = tmp0 == tmp3
        tmp5 = tl.full([1], 92, tl.int32)
        tmp6 = tmp0 == tmp5
        tmp7 = tl.full([1], 93, tl.int32)
        tmp8 = tmp0 == tmp7
        tmp9 = tl.full([1], 94, tl.int32)
        tmp10 = tmp0 == tmp9
        tmp11 = tl.full([1], 95, tl.int32)
        tmp12 = tmp0 == tmp11
        tmp13 = tl.full([1], 96, tl.int32)
        tmp14 = tmp0 == tmp13
        tmp15 = tl.full([1], 97, tl.int32)
        tmp16 = tmp0 == tmp15
        tmp17 = tl.full([1], 98, tl.int32)
        tmp18 = tmp0 == tmp17
        tmp19 = tl.full([1], 99, tl.int32)
        tmp20 = tmp0 == tmp19
        tmp22 = 0.0
        tmp23 = tl.where(tmp20, tmp22, tmp21)
        tmp24 = tl.where(tmp18, tmp22, tmp23)
        tmp25 = tl.where(tmp16, tmp22, tmp24)
        tmp26 = tl.where(tmp14, tmp22, tmp25)
        tmp27 = tl.where(tmp12, tmp22, tmp26)
        tmp28 = tl.where(tmp10, tmp22, tmp27)
        tmp29 = tl.where(tmp8, tmp22, tmp28)
        tmp30 = tl.where(tmp6, tmp22, tmp29)
        tmp31 = tl.where(tmp4, tmp22, tmp30)
        tmp32 = tl.where(tmp2, tmp22, tmp31)
        tl.store(out_ptr0 + (x0), tmp32, xmask)
op4_op11_op18_op25_op32_op39_op46_op53_op60.snodes[1] =
op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', c0, {c0: 100}, None)]
op11.unmet_dependencies = [MemoryDep('buf4', c0, {c0: 100}, None)]
op11.met_dependencies = []
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf11.users = [
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
    ]
]
op11.group.device = cuda:0
op11.group.iteration = (100, 1)
op11.sizes = ([100], [])
buf4_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf11_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op11_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(80, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(81, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(82, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int32)
        constant_3 = ops.constant(83, torch.int32)
        eq_3 = ops.eq(index_expr_3, constant_3)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(84, torch.int32)
        eq_4 = ops.eq(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int32)
        constant_5 = ops.constant(85, torch.int32)
        eq_5 = ops.eq(index_expr_5, constant_5)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int32)
        constant_6 = ops.constant(86, torch.int32)
        eq_6 = ops.eq(index_expr_6, constant_6)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int32)
        constant_7 = ops.constant(87, torch.int32)
        eq_7 = ops.eq(index_expr_7, constant_7)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int32)
        constant_8 = ops.constant(88, torch.int32)
        eq_8 = ops.eq(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int32)
        constant_9 = ops.constant(89, torch.int32)
        eq_9 = ops.eq(index_expr_9, constant_9)
        get_index_10 = self.get_index('index0')
        load = ops.load('buf4', get_index_10)
        constant_10 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_9, constant_10, load)
        constant_11 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_8, constant_11, where)
        constant_12 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_7, constant_12, where_1)
        constant_13 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_6, constant_13, where_2)
        constant_14 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_5, constant_14, where_3)
        constant_15 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_4, constant_15, where_4)
        constant_16 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_3, constant_16, where_5)
        constant_17 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_2, constant_17, where_6)
        constant_18 = ops.constant(0.0, torch.float32)
        where_8 = ops.where(eq_1, constant_18, where_7)
        constant_19 = ops.constant(0.0, torch.float32)
        where_9 = ops.where(eq, constant_19, where_8)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf11', get_index_11, where_9, None)
        return store
op11 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp21 = tl.load(in_ptr0 + (x0), xmask)
        tmp0 = x0
        tmp1 = tl.full([1], 80, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = tl.full([1], 81, tl.int32)
        tmp4 = tmp0 == tmp3
        tmp5 = tl.full([1], 82, tl.int32)
        tmp6 = tmp0 == tmp5
        tmp7 = tl.full([1], 83, tl.int32)
        tmp8 = tmp0 == tmp7
        tmp9 = tl.full([1], 84, tl.int32)
        tmp10 = tmp0 == tmp9
        tmp11 = tl.full([1], 85, tl.int32)
        tmp12 = tmp0 == tmp11
        tmp13 = tl.full([1], 86, tl.int32)
        tmp14 = tmp0 == tmp13
        tmp15 = tl.full([1], 87, tl.int32)
        tmp16 = tmp0 == tmp15
        tmp17 = tl.full([1], 88, tl.int32)
        tmp18 = tmp0 == tmp17
        tmp19 = tl.full([1], 89, tl.int32)
        tmp20 = tmp0 == tmp19
        tmp22 = 0.0
        tmp23 = tl.where(tmp20, tmp22, tmp21)
        tmp24 = tl.where(tmp18, tmp22, tmp23)
        tmp25 = tl.where(tmp16, tmp22, tmp24)
        tmp26 = tl.where(tmp14, tmp22, tmp25)
        tmp27 = tl.where(tmp12, tmp22, tmp26)
        tmp28 = tl.where(tmp10, tmp22, tmp27)
        tmp29 = tl.where(tmp8, tmp22, tmp28)
        tmp30 = tl.where(tmp6, tmp22, tmp29)
        tmp31 = tl.where(tmp4, tmp22, tmp30)
        tmp32 = tl.where(tmp2, tmp22, tmp31)
        tl.store(out_ptr0 + (x0), tmp32, xmask)
op4_op11_op18_op25_op32_op39_op46_op53_op60.snodes[2] =
op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 100}, None)]
op18.unmet_dependencies = [MemoryDep('buf11', c0, {c0: 100}, None)]
op18.met_dependencies = []
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf18.users = [
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
    ]
]
op18.group.device = cuda:0
op18.group.iteration = (100, 1)
op18.sizes = ([100], [])
buf11_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op18_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(70, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(71, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(72, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int32)
        constant_3 = ops.constant(73, torch.int32)
        eq_3 = ops.eq(index_expr_3, constant_3)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(74, torch.int32)
        eq_4 = ops.eq(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int32)
        constant_5 = ops.constant(75, torch.int32)
        eq_5 = ops.eq(index_expr_5, constant_5)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int32)
        constant_6 = ops.constant(76, torch.int32)
        eq_6 = ops.eq(index_expr_6, constant_6)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int32)
        constant_7 = ops.constant(77, torch.int32)
        eq_7 = ops.eq(index_expr_7, constant_7)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int32)
        constant_8 = ops.constant(78, torch.int32)
        eq_8 = ops.eq(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int32)
        constant_9 = ops.constant(79, torch.int32)
        eq_9 = ops.eq(index_expr_9, constant_9)
        get_index_10 = self.get_index('index0')
        load = ops.load('buf11', get_index_10)
        constant_10 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_9, constant_10, load)
        constant_11 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_8, constant_11, where)
        constant_12 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_7, constant_12, where_1)
        constant_13 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_6, constant_13, where_2)
        constant_14 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_5, constant_14, where_3)
        constant_15 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_4, constant_15, where_4)
        constant_16 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_3, constant_16, where_5)
        constant_17 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_2, constant_17, where_6)
        constant_18 = ops.constant(0.0, torch.float32)
        where_8 = ops.where(eq_1, constant_18, where_7)
        constant_19 = ops.constant(0.0, torch.float32)
        where_9 = ops.where(eq, constant_19, where_8)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf18', get_index_11, where_9, None)
        return store
op18 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp21 = tl.load(in_ptr0 + (x0), xmask)
        tmp0 = x0
        tmp1 = tl.full([1], 70, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = tl.full([1], 71, tl.int32)
        tmp4 = tmp0 == tmp3
        tmp5 = tl.full([1], 72, tl.int32)
        tmp6 = tmp0 == tmp5
        tmp7 = tl.full([1], 73, tl.int32)
        tmp8 = tmp0 == tmp7
        tmp9 = tl.full([1], 74, tl.int32)
        tmp10 = tmp0 == tmp9
        tmp11 = tl.full([1], 75, tl.int32)
        tmp12 = tmp0 == tmp11
        tmp13 = tl.full([1], 76, tl.int32)
        tmp14 = tmp0 == tmp13
        tmp15 = tl.full([1], 77, tl.int32)
        tmp16 = tmp0 == tmp15
        tmp17 = tl.full([1], 78, tl.int32)
        tmp18 = tmp0 == tmp17
        tmp19 = tl.full([1], 79, tl.int32)
        tmp20 = tmp0 == tmp19
        tmp22 = 0.0
        tmp23 = tl.where(tmp20, tmp22, tmp21)
        tmp24 = tl.where(tmp18, tmp22, tmp23)
        tmp25 = tl.where(tmp16, tmp22, tmp24)
        tmp26 = tl.where(tmp14, tmp22, tmp25)
        tmp27 = tl.where(tmp12, tmp22, tmp26)
        tmp28 = tl.where(tmp10, tmp22, tmp27)
        tmp29 = tl.where(tmp8, tmp22, tmp28)
        tmp30 = tl.where(tmp6, tmp22, tmp29)
        tmp31 = tl.where(tmp4, tmp22, tmp30)
        tmp32 = tl.where(tmp2, tmp22, tmp31)
        tl.store(out_ptr0 + (x0), tmp32, xmask)
op4_op11_op18_op25_op32_op39_op46_op53_op60.snodes[3] =
op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 100}, None)]
op25.unmet_dependencies = [MemoryDep('buf18', c0, {c0: 100}, None)]
op25.met_dependencies = []
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf25.users = [
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
    ]
]
op25.group.device = cuda:0
op25.group.iteration = (100, 1)
op25.sizes = ([100], [])
buf18_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op25_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(60, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(61, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(62, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int32)
        constant_3 = ops.constant(63, torch.int32)
        eq_3 = ops.eq(index_expr_3, constant_3)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(64, torch.int32)
        eq_4 = ops.eq(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int32)
        constant_5 = ops.constant(65, torch.int32)
        eq_5 = ops.eq(index_expr_5, constant_5)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int32)
        constant_6 = ops.constant(66, torch.int32)
        eq_6 = ops.eq(index_expr_6, constant_6)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int32)
        constant_7 = ops.constant(67, torch.int32)
        eq_7 = ops.eq(index_expr_7, constant_7)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int32)
        constant_8 = ops.constant(68, torch.int32)
        eq_8 = ops.eq(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int32)
        constant_9 = ops.constant(69, torch.int32)
        eq_9 = ops.eq(index_expr_9, constant_9)
        get_index_10 = self.get_index('index0')
        load = ops.load('buf18', get_index_10)
        constant_10 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_9, constant_10, load)
        constant_11 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_8, constant_11, where)
        constant_12 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_7, constant_12, where_1)
        constant_13 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_6, constant_13, where_2)
        constant_14 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_5, constant_14, where_3)
        constant_15 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_4, constant_15, where_4)
        constant_16 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_3, constant_16, where_5)
        constant_17 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_2, constant_17, where_6)
        constant_18 = ops.constant(0.0, torch.float32)
        where_8 = ops.where(eq_1, constant_18, where_7)
        constant_19 = ops.constant(0.0, torch.float32)
        where_9 = ops.where(eq, constant_19, where_8)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf25', get_index_11, where_9, None)
        return store
op25 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp21 = tl.load(in_ptr0 + (x0), xmask)
        tmp0 = x0
        tmp1 = tl.full([1], 60, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = tl.full([1], 61, tl.int32)
        tmp4 = tmp0 == tmp3
        tmp5 = tl.full([1], 62, tl.int32)
        tmp6 = tmp0 == tmp5
        tmp7 = tl.full([1], 63, tl.int32)
        tmp8 = tmp0 == tmp7
        tmp9 = tl.full([1], 64, tl.int32)
        tmp10 = tmp0 == tmp9
        tmp11 = tl.full([1], 65, tl.int32)
        tmp12 = tmp0 == tmp11
        tmp13 = tl.full([1], 66, tl.int32)
        tmp14 = tmp0 == tmp13
        tmp15 = tl.full([1], 67, tl.int32)
        tmp16 = tmp0 == tmp15
        tmp17 = tl.full([1], 68, tl.int32)
        tmp18 = tmp0 == tmp17
        tmp19 = tl.full([1], 69, tl.int32)
        tmp20 = tmp0 == tmp19
        tmp22 = 0.0
        tmp23 = tl.where(tmp20, tmp22, tmp21)
        tmp24 = tl.where(tmp18, tmp22, tmp23)
        tmp25 = tl.where(tmp16, tmp22, tmp24)
        tmp26 = tl.where(tmp14, tmp22, tmp25)
        tmp27 = tl.where(tmp12, tmp22, tmp26)
        tmp28 = tl.where(tmp10, tmp22, tmp27)
        tmp29 = tl.where(tmp8, tmp22, tmp28)
        tmp30 = tl.where(tmp6, tmp22, tmp29)
        tmp31 = tl.where(tmp4, tmp22, tmp30)
        tmp32 = tl.where(tmp2, tmp22, tmp31)
        tl.store(out_ptr0 + (x0), tmp32, xmask)
op4_op11_op18_op25_op32_op39_op46_op53_op60.snodes[4] =
op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 100}, None)]
op32.unmet_dependencies = [MemoryDep('buf25', c0, {c0: 100}, None)]
op32.met_dependencies = []
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf32.users = [
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
    ]
]
op32.group.device = cuda:0
op32.group.iteration = (100, 1)
op32.sizes = ([100], [])
buf25_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op32_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(50, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(51, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(52, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int32)
        constant_3 = ops.constant(53, torch.int32)
        eq_3 = ops.eq(index_expr_3, constant_3)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(54, torch.int32)
        eq_4 = ops.eq(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int32)
        constant_5 = ops.constant(55, torch.int32)
        eq_5 = ops.eq(index_expr_5, constant_5)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int32)
        constant_6 = ops.constant(56, torch.int32)
        eq_6 = ops.eq(index_expr_6, constant_6)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int32)
        constant_7 = ops.constant(57, torch.int32)
        eq_7 = ops.eq(index_expr_7, constant_7)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int32)
        constant_8 = ops.constant(58, torch.int32)
        eq_8 = ops.eq(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int32)
        constant_9 = ops.constant(59, torch.int32)
        eq_9 = ops.eq(index_expr_9, constant_9)
        get_index_10 = self.get_index('index0')
        load = ops.load('buf25', get_index_10)
        constant_10 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_9, constant_10, load)
        constant_11 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_8, constant_11, where)
        constant_12 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_7, constant_12, where_1)
        constant_13 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_6, constant_13, where_2)
        constant_14 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_5, constant_14, where_3)
        constant_15 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_4, constant_15, where_4)
        constant_16 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_3, constant_16, where_5)
        constant_17 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_2, constant_17, where_6)
        constant_18 = ops.constant(0.0, torch.float32)
        where_8 = ops.where(eq_1, constant_18, where_7)
        constant_19 = ops.constant(0.0, torch.float32)
        where_9 = ops.where(eq, constant_19, where_8)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf32', get_index_11, where_9, None)
        return store
op32 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp21 = tl.load(in_ptr0 + (x0), xmask)
        tmp0 = x0
        tmp1 = tl.full([1], 50, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = tl.full([1], 51, tl.int32)
        tmp4 = tmp0 == tmp3
        tmp5 = tl.full([1], 52, tl.int32)
        tmp6 = tmp0 == tmp5
        tmp7 = tl.full([1], 53, tl.int32)
        tmp8 = tmp0 == tmp7
        tmp9 = tl.full([1], 54, tl.int32)
        tmp10 = tmp0 == tmp9
        tmp11 = tl.full([1], 55, tl.int32)
        tmp12 = tmp0 == tmp11
        tmp13 = tl.full([1], 56, tl.int32)
        tmp14 = tmp0 == tmp13
        tmp15 = tl.full([1], 57, tl.int32)
        tmp16 = tmp0 == tmp15
        tmp17 = tl.full([1], 58, tl.int32)
        tmp18 = tmp0 == tmp17
        tmp19 = tl.full([1], 59, tl.int32)
        tmp20 = tmp0 == tmp19
        tmp22 = 0.0
        tmp23 = tl.where(tmp20, tmp22, tmp21)
        tmp24 = tl.where(tmp18, tmp22, tmp23)
        tmp25 = tl.where(tmp16, tmp22, tmp24)
        tmp26 = tl.where(tmp14, tmp22, tmp25)
        tmp27 = tl.where(tmp12, tmp22, tmp26)
        tmp28 = tl.where(tmp10, tmp22, tmp27)
        tmp29 = tl.where(tmp8, tmp22, tmp28)
        tmp30 = tl.where(tmp6, tmp22, tmp29)
        tmp31 = tl.where(tmp4, tmp22, tmp30)
        tmp32 = tl.where(tmp2, tmp22, tmp31)
        tl.store(out_ptr0 + (x0), tmp32, xmask)
op4_op11_op18_op25_op32_op39_op46_op53_op60.snodes[5] =
op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 100}, None)]
op39.unmet_dependencies = [MemoryDep('buf32', c0, {c0: 100}, None)]
op39.met_dependencies = []
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf39.users = [
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False),
    ]
]
op39.group.device = cuda:0
op39.group.iteration = (100, 1)
op39.sizes = ([100], [])
buf32_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op39_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(40, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(41, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(42, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int32)
        constant_3 = ops.constant(43, torch.int32)
        eq_3 = ops.eq(index_expr_3, constant_3)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(44, torch.int32)
        eq_4 = ops.eq(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int32)
        constant_5 = ops.constant(45, torch.int32)
        eq_5 = ops.eq(index_expr_5, constant_5)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int32)
        constant_6 = ops.constant(46, torch.int32)
        eq_6 = ops.eq(index_expr_6, constant_6)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int32)
        constant_7 = ops.constant(47, torch.int32)
        eq_7 = ops.eq(index_expr_7, constant_7)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int32)
        constant_8 = ops.constant(48, torch.int32)
        eq_8 = ops.eq(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int32)
        constant_9 = ops.constant(49, torch.int32)
        eq_9 = ops.eq(index_expr_9, constant_9)
        get_index_10 = self.get_index('index0')
        load = ops.load('buf32', get_index_10)
        constant_10 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_9, constant_10, load)
        constant_11 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_8, constant_11, where)
        constant_12 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_7, constant_12, where_1)
        constant_13 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_6, constant_13, where_2)
        constant_14 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_5, constant_14, where_3)
        constant_15 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_4, constant_15, where_4)
        constant_16 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_3, constant_16, where_5)
        constant_17 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_2, constant_17, where_6)
        constant_18 = ops.constant(0.0, torch.float32)
        where_8 = ops.where(eq_1, constant_18, where_7)
        constant_19 = ops.constant(0.0, torch.float32)
        where_9 = ops.where(eq, constant_19, where_8)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf39', get_index_11, where_9, None)
        return store
op39 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp21 = tl.load(in_ptr0 + (x0), xmask)
        tmp0 = x0
        tmp1 = tl.full([1], 40, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = tl.full([1], 41, tl.int32)
        tmp4 = tmp0 == tmp3
        tmp5 = tl.full([1], 42, tl.int32)
        tmp6 = tmp0 == tmp5
        tmp7 = tl.full([1], 43, tl.int32)
        tmp8 = tmp0 == tmp7
        tmp9 = tl.full([1], 44, tl.int32)
        tmp10 = tmp0 == tmp9
        tmp11 = tl.full([1], 45, tl.int32)
        tmp12 = tmp0 == tmp11
        tmp13 = tl.full([1], 46, tl.int32)
        tmp14 = tmp0 == tmp13
        tmp15 = tl.full([1], 47, tl.int32)
        tmp16 = tmp0 == tmp15
        tmp17 = tl.full([1], 48, tl.int32)
        tmp18 = tmp0 == tmp17
        tmp19 = tl.full([1], 49, tl.int32)
        tmp20 = tmp0 == tmp19
        tmp22 = 0.0
        tmp23 = tl.where(tmp20, tmp22, tmp21)
        tmp24 = tl.where(tmp18, tmp22, tmp23)
        tmp25 = tl.where(tmp16, tmp22, tmp24)
        tmp26 = tl.where(tmp14, tmp22, tmp25)
        tmp27 = tl.where(tmp12, tmp22, tmp26)
        tmp28 = tl.where(tmp10, tmp22, tmp27)
        tmp29 = tl.where(tmp8, tmp22, tmp28)
        tmp30 = tl.where(tmp6, tmp22, tmp29)
        tmp31 = tl.where(tmp4, tmp22, tmp30)
        tmp32 = tl.where(tmp2, tmp22, tmp31)
        tl.store(out_ptr0 + (x0), tmp32, xmask)
op4_op11_op18_op25_op32_op39_op46_op53_op60.snodes[6] =
op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', c0, {c0: 100}, None)]
op46.unmet_dependencies = [MemoryDep('buf39', c0, {c0: 100}, None)]
op46.met_dependencies = []
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf46.users = [
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
    ]
]
op46.group.device = cuda:0
op46.group.iteration = (100, 1)
op46.sizes = ([100], [])
buf39_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op46_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(30, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(31, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(32, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int32)
        constant_3 = ops.constant(33, torch.int32)
        eq_3 = ops.eq(index_expr_3, constant_3)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(34, torch.int32)
        eq_4 = ops.eq(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int32)
        constant_5 = ops.constant(35, torch.int32)
        eq_5 = ops.eq(index_expr_5, constant_5)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int32)
        constant_6 = ops.constant(36, torch.int32)
        eq_6 = ops.eq(index_expr_6, constant_6)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int32)
        constant_7 = ops.constant(37, torch.int32)
        eq_7 = ops.eq(index_expr_7, constant_7)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int32)
        constant_8 = ops.constant(38, torch.int32)
        eq_8 = ops.eq(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int32)
        constant_9 = ops.constant(39, torch.int32)
        eq_9 = ops.eq(index_expr_9, constant_9)
        get_index_10 = self.get_index('index0')
        load = ops.load('buf39', get_index_10)
        constant_10 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_9, constant_10, load)
        constant_11 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_8, constant_11, where)
        constant_12 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_7, constant_12, where_1)
        constant_13 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_6, constant_13, where_2)
        constant_14 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_5, constant_14, where_3)
        constant_15 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_4, constant_15, where_4)
        constant_16 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_3, constant_16, where_5)
        constant_17 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_2, constant_17, where_6)
        constant_18 = ops.constant(0.0, torch.float32)
        where_8 = ops.where(eq_1, constant_18, where_7)
        constant_19 = ops.constant(0.0, torch.float32)
        where_9 = ops.where(eq, constant_19, where_8)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf46', get_index_11, where_9, None)
        return store
op46 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp21 = tl.load(in_ptr0 + (x0), xmask)
        tmp0 = x0
        tmp1 = tl.full([1], 30, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = tl.full([1], 31, tl.int32)
        tmp4 = tmp0 == tmp3
        tmp5 = tl.full([1], 32, tl.int32)
        tmp6 = tmp0 == tmp5
        tmp7 = tl.full([1], 33, tl.int32)
        tmp8 = tmp0 == tmp7
        tmp9 = tl.full([1], 34, tl.int32)
        tmp10 = tmp0 == tmp9
        tmp11 = tl.full([1], 35, tl.int32)
        tmp12 = tmp0 == tmp11
        tmp13 = tl.full([1], 36, tl.int32)
        tmp14 = tmp0 == tmp13
        tmp15 = tl.full([1], 37, tl.int32)
        tmp16 = tmp0 == tmp15
        tmp17 = tl.full([1], 38, tl.int32)
        tmp18 = tmp0 == tmp17
        tmp19 = tl.full([1], 39, tl.int32)
        tmp20 = tmp0 == tmp19
        tmp22 = 0.0
        tmp23 = tl.where(tmp20, tmp22, tmp21)
        tmp24 = tl.where(tmp18, tmp22, tmp23)
        tmp25 = tl.where(tmp16, tmp22, tmp24)
        tmp26 = tl.where(tmp14, tmp22, tmp25)
        tmp27 = tl.where(tmp12, tmp22, tmp26)
        tmp28 = tl.where(tmp10, tmp22, tmp27)
        tmp29 = tl.where(tmp8, tmp22, tmp28)
        tmp30 = tl.where(tmp6, tmp22, tmp29)
        tmp31 = tl.where(tmp4, tmp22, tmp30)
        tmp32 = tl.where(tmp2, tmp22, tmp31)
        tl.store(out_ptr0 + (x0), tmp32, xmask)
op4_op11_op18_op25_op32_op39_op46_op53_op60.snodes[7] =
op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 100}, None)]
op53.unmet_dependencies = [MemoryDep('buf46', c0, {c0: 100}, None)]
op53.met_dependencies = []
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf53.users = [
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
    ]
]
op53.group.device = cuda:0
op53.group.iteration = (100, 1)
op53.sizes = ([100], [])
buf46_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op53_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(20, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(21, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(22, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int32)
        constant_3 = ops.constant(23, torch.int32)
        eq_3 = ops.eq(index_expr_3, constant_3)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(24, torch.int32)
        eq_4 = ops.eq(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int32)
        constant_5 = ops.constant(25, torch.int32)
        eq_5 = ops.eq(index_expr_5, constant_5)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int32)
        constant_6 = ops.constant(26, torch.int32)
        eq_6 = ops.eq(index_expr_6, constant_6)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int32)
        constant_7 = ops.constant(27, torch.int32)
        eq_7 = ops.eq(index_expr_7, constant_7)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int32)
        constant_8 = ops.constant(28, torch.int32)
        eq_8 = ops.eq(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int32)
        constant_9 = ops.constant(29, torch.int32)
        eq_9 = ops.eq(index_expr_9, constant_9)
        get_index_10 = self.get_index('index0')
        load = ops.load('buf46', get_index_10)
        constant_10 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_9, constant_10, load)
        constant_11 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_8, constant_11, where)
        constant_12 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_7, constant_12, where_1)
        constant_13 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_6, constant_13, where_2)
        constant_14 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_5, constant_14, where_3)
        constant_15 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_4, constant_15, where_4)
        constant_16 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_3, constant_16, where_5)
        constant_17 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_2, constant_17, where_6)
        constant_18 = ops.constant(0.0, torch.float32)
        where_8 = ops.where(eq_1, constant_18, where_7)
        constant_19 = ops.constant(0.0, torch.float32)
        where_9 = ops.where(eq, constant_19, where_8)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf53', get_index_11, where_9, None)
        return store
op53 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp21 = tl.load(in_ptr0 + (x0), xmask)
        tmp0 = x0
        tmp1 = tl.full([1], 20, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = tl.full([1], 21, tl.int32)
        tmp4 = tmp0 == tmp3
        tmp5 = tl.full([1], 22, tl.int32)
        tmp6 = tmp0 == tmp5
        tmp7 = tl.full([1], 23, tl.int32)
        tmp8 = tmp0 == tmp7
        tmp9 = tl.full([1], 24, tl.int32)
        tmp10 = tmp0 == tmp9
        tmp11 = tl.full([1], 25, tl.int32)
        tmp12 = tmp0 == tmp11
        tmp13 = tl.full([1], 26, tl.int32)
        tmp14 = tmp0 == tmp13
        tmp15 = tl.full([1], 27, tl.int32)
        tmp16 = tmp0 == tmp15
        tmp17 = tl.full([1], 28, tl.int32)
        tmp18 = tmp0 == tmp17
        tmp19 = tl.full([1], 29, tl.int32)
        tmp20 = tmp0 == tmp19
        tmp22 = 0.0
        tmp23 = tl.where(tmp20, tmp22, tmp21)
        tmp24 = tl.where(tmp18, tmp22, tmp23)
        tmp25 = tl.where(tmp16, tmp22, tmp24)
        tmp26 = tl.where(tmp14, tmp22, tmp25)
        tmp27 = tl.where(tmp12, tmp22, tmp26)
        tmp28 = tl.where(tmp10, tmp22, tmp27)
        tmp29 = tl.where(tmp8, tmp22, tmp28)
        tmp30 = tl.where(tmp6, tmp22, tmp29)
        tmp31 = tl.where(tmp4, tmp22, tmp30)
        tmp32 = tl.where(tmp2, tmp22, tmp31)
        tl.store(out_ptr0 + (x0), tmp32, xmask)
op4_op11_op18_op25_op32_op39_op46_op53_op60.snodes[8] =
op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 100}, None)]
op60.unmet_dependencies = [MemoryDep('buf53', c0, {c0: 100}, None)]
op60.met_dependencies = []
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf60.users = [
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False),
    ]
]
op60.group.device = cuda:0
op60.group.iteration = (100, 1)
op60.sizes = ([100], [])
buf53_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op60_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(10, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(11, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(12, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int32)
        constant_3 = ops.constant(13, torch.int32)
        eq_3 = ops.eq(index_expr_3, constant_3)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(14, torch.int32)
        eq_4 = ops.eq(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int32)
        constant_5 = ops.constant(15, torch.int32)
        eq_5 = ops.eq(index_expr_5, constant_5)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int32)
        constant_6 = ops.constant(16, torch.int32)
        eq_6 = ops.eq(index_expr_6, constant_6)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int32)
        constant_7 = ops.constant(17, torch.int32)
        eq_7 = ops.eq(index_expr_7, constant_7)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int32)
        constant_8 = ops.constant(18, torch.int32)
        eq_8 = ops.eq(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int32)
        constant_9 = ops.constant(19, torch.int32)
        eq_9 = ops.eq(index_expr_9, constant_9)
        get_index_10 = self.get_index('index0')
        load = ops.load('buf53', get_index_10)
        constant_10 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_9, constant_10, load)
        constant_11 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_8, constant_11, where)
        constant_12 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_7, constant_12, where_1)
        constant_13 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_6, constant_13, where_2)
        constant_14 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_5, constant_14, where_3)
        constant_15 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_4, constant_15, where_4)
        constant_16 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_3, constant_16, where_5)
        constant_17 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_2, constant_17, where_6)
        constant_18 = ops.constant(0.0, torch.float32)
        where_8 = ops.where(eq_1, constant_18, where_7)
        constant_19 = ops.constant(0.0, torch.float32)
        where_9 = ops.where(eq, constant_19, where_8)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf60', get_index_11, where_9, None)
        return store
op60 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp21 = tl.load(in_ptr0 + (x0), xmask)
        tmp0 = x0
        tmp1 = tl.full([1], 10, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = tl.full([1], 11, tl.int32)
        tmp4 = tmp0 == tmp3
        tmp5 = tl.full([1], 12, tl.int32)
        tmp6 = tmp0 == tmp5
        tmp7 = tl.full([1], 13, tl.int32)
        tmp8 = tmp0 == tmp7
        tmp9 = tl.full([1], 14, tl.int32)
        tmp10 = tmp0 == tmp9
        tmp11 = tl.full([1], 15, tl.int32)
        tmp12 = tmp0 == tmp11
        tmp13 = tl.full([1], 16, tl.int32)
        tmp14 = tmp0 == tmp13
        tmp15 = tl.full([1], 17, tl.int32)
        tmp16 = tmp0 == tmp15
        tmp17 = tl.full([1], 18, tl.int32)
        tmp18 = tmp0 == tmp17
        tmp19 = tl.full([1], 19, tl.int32)
        tmp20 = tmp0 == tmp19
        tmp22 = 0.0
        tmp23 = tl.where(tmp20, tmp22, tmp21)
        tmp24 = tl.where(tmp18, tmp22, tmp23)
        tmp25 = tl.where(tmp16, tmp22, tmp24)
        tmp26 = tl.where(tmp14, tmp22, tmp25)
        tmp27 = tl.where(tmp12, tmp22, tmp26)
        tmp28 = tl.where(tmp10, tmp22, tmp27)
        tmp29 = tl.where(tmp8, tmp22, tmp28)
        tmp30 = tl.where(tmp6, tmp22, tmp29)
        tmp31 = tl.where(tmp4, tmp22, tmp30)
        tmp32 = tl.where(tmp2, tmp22, tmp31)
        tl.store(out_ptr0 + (x0), tmp32, xmask)
op4_op11_op18_op25_op32_op39_op46_op53_op60 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, out_ptr1, out_ptr2, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp21 = tl.load(in_ptr0 + (x0), xmask)
        tmp0 = x0
        tmp1 = tl.full([1], 90, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = tl.full([1], 91, tl.int32)
        tmp4 = tmp0 == tmp3
        tmp5 = tl.full([1], 92, tl.int32)
        tmp6 = tmp0 == tmp5
        tmp7 = tl.full([1], 93, tl.int32)
        tmp8 = tmp0 == tmp7
        tmp9 = tl.full([1], 94, tl.int32)
        tmp10 = tmp0 == tmp9
        tmp11 = tl.full([1], 95, tl.int32)
        tmp12 = tmp0 == tmp11
        tmp13 = tl.full([1], 96, tl.int32)
        tmp14 = tmp0 == tmp13
        tmp15 = tl.full([1], 97, tl.int32)
        tmp16 = tmp0 == tmp15
        tmp17 = tl.full([1], 98, tl.int32)
        tmp18 = tmp0 == tmp17
        tmp19 = tl.full([1], 99, tl.int32)
        tmp20 = tmp0 == tmp19
        tmp22 = 0.0
        tmp23 = tl.where(tmp20, tmp22, tmp21)
        tmp24 = tl.where(tmp18, tmp22, tmp23)
        tmp25 = tl.where(tmp16, tmp22, tmp24)
        tmp26 = tl.where(tmp14, tmp22, tmp25)
        tmp27 = tl.where(tmp12, tmp22, tmp26)
        tmp28 = tl.where(tmp10, tmp22, tmp27)
        tmp29 = tl.where(tmp8, tmp22, tmp28)
        tmp30 = tl.where(tmp6, tmp22, tmp29)
        tmp31 = tl.where(tmp4, tmp22, tmp30)
        tmp32 = tl.where(tmp2, tmp22, tmp31)
        tmp33 = tl.full([1], 80, tl.int32)
        tmp34 = tmp0 == tmp33
        tmp35 = tl.full([1], 81, tl.int32)
        tmp36 = tmp0 == tmp35
        tmp37 = tl.full([1], 82, tl.int32)
        tmp38 = tmp0 == tmp37
        tmp39 = tl.full([1], 83, tl.int32)
        tmp40 = tmp0 == tmp39
        tmp41 = tl.full([1], 84, tl.int32)
        tmp42 = tmp0 == tmp41
        tmp43 = tl.full([1], 85, tl.int32)
        tmp44 = tmp0 == tmp43
        tmp45 = tl.full([1], 86, tl.int32)
        tmp46 = tmp0 == tmp45
        tmp47 = tl.full([1], 87, tl.int32)
        tmp48 = tmp0 == tmp47
        tmp49 = tl.full([1], 88, tl.int32)
        tmp50 = tmp0 == tmp49
        tmp51 = tl.full([1], 89, tl.int32)
        tmp52 = tmp0 == tmp51
        tmp53 = tl.where(tmp52, tmp22, tmp32)
        tmp54 = tl.where(tmp50, tmp22, tmp53)
        tmp55 = tl.where(tmp48, tmp22, tmp54)
        tmp56 = tl.where(tmp46, tmp22, tmp55)
        tmp57 = tl.where(tmp44, tmp22, tmp56)
        tmp58 = tl.where(tmp42, tmp22, tmp57)
        tmp59 = tl.where(tmp40, tmp22, tmp58)
        tmp60 = tl.where(tmp38, tmp22, tmp59)
        tmp61 = tl.where(tmp36, tmp22, tmp60)
        tmp62 = tl.where(tmp34, tmp22, tmp61)
        tmp63 = tl.full([1], 70, tl.int32)
        tmp64 = tmp0 == tmp63
        tmp65 = tl.full([1], 71, tl.int32)
        tmp66 = tmp0 == tmp65
        tmp67 = tl.full([1], 72, tl.int32)
        tmp68 = tmp0 == tmp67
        tmp69 = tl.full([1], 73, tl.int32)
        tmp70 = tmp0 == tmp69
        tmp71 = tl.full([1], 74, tl.int32)
        tmp72 = tmp0 == tmp71
        tmp73 = tl.full([1], 75, tl.int32)
        tmp74 = tmp0 == tmp73
        tmp75 = tl.full([1], 76, tl.int32)
        tmp76 = tmp0 == tmp75
        tmp77 = tl.full([1], 77, tl.int32)
        tmp78 = tmp0 == tmp77
        tmp79 = tl.full([1], 78, tl.int32)
        tmp80 = tmp0 == tmp79
        tmp81 = tl.full([1], 79, tl.int32)
        tmp82 = tmp0 == tmp81
        tmp83 = tl.where(tmp82, tmp22, tmp62)
        tmp84 = tl.where(tmp80, tmp22, tmp83)
        tmp85 = tl.where(tmp78, tmp22, tmp84)
        tmp86 = tl.where(tmp76, tmp22, tmp85)
        tmp87 = tl.where(tmp74, tmp22, tmp86)
        tmp88 = tl.where(tmp72, tmp22, tmp87)
        tmp89 = tl.where(tmp70, tmp22, tmp88)
        tmp90 = tl.where(tmp68, tmp22, tmp89)
        tmp91 = tl.where(tmp66, tmp22, tmp90)
        tmp92 = tl.where(tmp64, tmp22, tmp91)
        tmp93 = tl.full([1], 60, tl.int32)
        tmp94 = tmp0 == tmp93
        tmp95 = tl.full([1], 61, tl.int32)
        tmp96 = tmp0 == tmp95
        tmp97 = tl.full([1], 62, tl.int32)
        tmp98 = tmp0 == tmp97
        tmp99 = tl.full([1], 63, tl.int32)
        tmp100 = tmp0 == tmp99
        tmp101 = tl.full([1], 64, tl.int32)
        tmp102 = tmp0 == tmp101
        tmp103 = tl.full([1], 65, tl.int32)
        tmp104 = tmp0 == tmp103
        tmp105 = tl.full([1], 66, tl.int32)
        tmp106 = tmp0 == tmp105
        tmp107 = tl.full([1], 67, tl.int32)
        tmp108 = tmp0 == tmp107
        tmp109 = tl.full([1], 68, tl.int32)
        tmp110 = tmp0 == tmp109
        tmp111 = tl.full([1], 69, tl.int32)
        tmp112 = tmp0 == tmp111
        tmp113 = tl.where(tmp112, tmp22, tmp92)
        tmp114 = tl.where(tmp110, tmp22, tmp113)
        tmp115 = tl.where(tmp108, tmp22, tmp114)
        tmp116 = tl.where(tmp106, tmp22, tmp115)
        tmp117 = tl.where(tmp104, tmp22, tmp116)
        tmp118 = tl.where(tmp102, tmp22, tmp117)
        tmp119 = tl.where(tmp100, tmp22, tmp118)
        tmp120 = tl.where(tmp98, tmp22, tmp119)
        tmp121 = tl.where(tmp96, tmp22, tmp120)
        tmp122 = tl.where(tmp94, tmp22, tmp121)
        tmp123 = tl.full([1], 50, tl.int32)
        tmp124 = tmp0 == tmp123
        tmp125 = tl.full([1], 51, tl.int32)
        tmp126 = tmp0 == tmp125
        tmp127 = tl.full([1], 52, tl.int32)
        tmp128 = tmp0 == tmp127
        tmp129 = tl.full([1], 53, tl.int32)
        tmp130 = tmp0 == tmp129
        tmp131 = tl.full([1], 54, tl.int32)
        tmp132 = tmp0 == tmp131
        tmp133 = tl.full([1], 55, tl.int32)
        tmp134 = tmp0 == tmp133
        tmp135 = tl.full([1], 56, tl.int32)
        tmp136 = tmp0 == tmp135
        tmp137 = tl.full([1], 57, tl.int32)
        tmp138 = tmp0 == tmp137
        tmp139 = tl.full([1], 58, tl.int32)
        tmp140 = tmp0 == tmp139
        tmp141 = tl.full([1], 59, tl.int32)
        tmp142 = tmp0 == tmp141
        tmp143 = tl.where(tmp142, tmp22, tmp122)
        tmp144 = tl.where(tmp140, tmp22, tmp143)
        tmp145 = tl.where(tmp138, tmp22, tmp144)
        tmp146 = tl.where(tmp136, tmp22, tmp145)
        tmp147 = tl.where(tmp134, tmp22, tmp146)
        tmp148 = tl.where(tmp132, tmp22, tmp147)
        tmp149 = tl.where(tmp130, tmp22, tmp148)
        tmp150 = tl.where(tmp128, tmp22, tmp149)
        tmp151 = tl.where(tmp126, tmp22, tmp150)
        tmp152 = tl.where(tmp124, tmp22, tmp151)
        tmp153 = tl.full([1], 40, tl.int32)
        tmp154 = tmp0 == tmp153
        tmp155 = tl.full([1], 41, tl.int32)
        tmp156 = tmp0 == tmp155
        tmp157 = tl.full([1], 42, tl.int32)
        tmp158 = tmp0 == tmp157
        tmp159 = tl.full([1], 43, tl.int32)
        tmp160 = tmp0 == tmp159
        tmp161 = tl.full([1], 44, tl.int32)
        tmp162 = tmp0 == tmp161
        tmp163 = tl.full([1], 45, tl.int32)
        tmp164 = tmp0 == tmp163
        tmp165 = tl.full([1], 46, tl.int32)
        tmp166 = tmp0 == tmp165
        tmp167 = tl.full([1], 47, tl.int32)
        tmp168 = tmp0 == tmp167
        tmp169 = tl.full([1], 48, tl.int32)
        tmp170 = tmp0 == tmp169
        tmp171 = tl.full([1], 49, tl.int32)
        tmp172 = tmp0 == tmp171
        tmp173 = tl.where(tmp172, tmp22, tmp152)
        tmp174 = tl.where(tmp170, tmp22, tmp173)
        tmp175 = tl.where(tmp168, tmp22, tmp174)
        tmp176 = tl.where(tmp166, tmp22, tmp175)
        tmp177 = tl.where(tmp164, tmp22, tmp176)
        tmp178 = tl.where(tmp162, tmp22, tmp177)
        tmp179 = tl.where(tmp160, tmp22, tmp178)
        tmp180 = tl.where(tmp158, tmp22, tmp179)
        tmp181 = tl.where(tmp156, tmp22, tmp180)
        tmp182 = tl.where(tmp154, tmp22, tmp181)
        tmp183 = tl.full([1], 30, tl.int32)
        tmp184 = tmp0 == tmp183
        tmp185 = tl.full([1], 31, tl.int32)
        tmp186 = tmp0 == tmp185
        tmp187 = tl.full([1], 32, tl.int32)
        tmp188 = tmp0 == tmp187
        tmp189 = tl.full([1], 33, tl.int32)
        tmp190 = tmp0 == tmp189
        tmp191 = tl.full([1], 34, tl.int32)
        tmp192 = tmp0 == tmp191
        tmp193 = tl.full([1], 35, tl.int32)
        tmp194 = tmp0 == tmp193
        tmp195 = tl.full([1], 36, tl.int32)
        tmp196 = tmp0 == tmp195
        tmp197 = tl.full([1], 37, tl.int32)
        tmp198 = tmp0 == tmp197
        tmp199 = tl.full([1], 38, tl.int32)
        tmp200 = tmp0 == tmp199
        tmp201 = tl.full([1], 39, tl.int32)
        tmp202 = tmp0 == tmp201
        tmp203 = tl.where(tmp202, tmp22, tmp182)
        tmp204 = tl.where(tmp200, tmp22, tmp203)
        tmp205 = tl.where(tmp198, tmp22, tmp204)
        tmp206 = tl.where(tmp196, tmp22, tmp205)
        tmp207 = tl.where(tmp194, tmp22, tmp206)
        tmp208 = tl.where(tmp192, tmp22, tmp207)
        tmp209 = tl.where(tmp190, tmp22, tmp208)
        tmp210 = tl.where(tmp188, tmp22, tmp209)
        tmp211 = tl.where(tmp186, tmp22, tmp210)
        tmp212 = tl.where(tmp184, tmp22, tmp211)
        tmp213 = tl.full([1], 20, tl.int32)
        tmp214 = tmp0 == tmp213
        tmp215 = tl.full([1], 21, tl.int32)
        tmp216 = tmp0 == tmp215
        tmp217 = tl.full([1], 22, tl.int32)
        tmp218 = tmp0 == tmp217
        tmp219 = tl.full([1], 23, tl.int32)
        tmp220 = tmp0 == tmp219
        tmp221 = tl.full([1], 24, tl.int32)
        tmp222 = tmp0 == tmp221
        tmp223 = tl.full([1], 25, tl.int32)
        tmp224 = tmp0 == tmp223
        tmp225 = tl.full([1], 26, tl.int32)
        tmp226 = tmp0 == tmp225
        tmp227 = tl.full([1], 27, tl.int32)
        tmp228 = tmp0 == tmp227
        tmp229 = tl.full([1], 28, tl.int32)
        tmp230 = tmp0 == tmp229
        tmp231 = tl.full([1], 29, tl.int32)
        tmp232 = tmp0 == tmp231
        tmp233 = tl.where(tmp232, tmp22, tmp212)
        tmp234 = tl.where(tmp230, tmp22, tmp233)
        tmp235 = tl.where(tmp228, tmp22, tmp234)
        tmp236 = tl.where(tmp226, tmp22, tmp235)
        tmp237 = tl.where(tmp224, tmp22, tmp236)
        tmp238 = tl.where(tmp222, tmp22, tmp237)
        tmp239 = tl.where(tmp220, tmp22, tmp238)
        tmp240 = tl.where(tmp218, tmp22, tmp239)
        tmp241 = tl.where(tmp216, tmp22, tmp240)
        tmp242 = tl.where(tmp214, tmp22, tmp241)
        tmp243 = tl.full([1], 10, tl.int32)
        tmp244 = tmp0 == tmp243
        tmp245 = tl.full([1], 11, tl.int32)
        tmp246 = tmp0 == tmp245
        tmp247 = tl.full([1], 12, tl.int32)
        tmp248 = tmp0 == tmp247
        tmp249 = tl.full([1], 13, tl.int32)
        tmp250 = tmp0 == tmp249
        tmp251 = tl.full([1], 14, tl.int32)
        tmp252 = tmp0 == tmp251
        tmp253 = tl.full([1], 15, tl.int32)
        tmp254 = tmp0 == tmp253
        tmp255 = tl.full([1], 16, tl.int32)
        tmp256 = tmp0 == tmp255
        tmp257 = tl.full([1], 17, tl.int32)
        tmp258 = tmp0 == tmp257
        tmp259 = tl.full([1], 18, tl.int32)
        tmp260 = tmp0 == tmp259
        tmp261 = tl.full([1], 19, tl.int32)
        tmp262 = tmp0 == tmp261
        tmp263 = tl.where(tmp262, tmp22, tmp242)
        tmp264 = tl.where(tmp260, tmp22, tmp263)
        tmp265 = tl.where(tmp258, tmp22, tmp264)
        tmp266 = tl.where(tmp256, tmp22, tmp265)
        tmp267 = tl.where(tmp254, tmp22, tmp266)
        tmp268 = tl.where(tmp252, tmp22, tmp267)
        tmp269 = tl.where(tmp250, tmp22, tmp268)
        tmp270 = tl.where(tmp248, tmp22, tmp269)
        tmp271 = tl.where(tmp246, tmp22, tmp270)
        tmp272 = tl.where(tmp244, tmp22, tmp271)
        tl.store(out_ptr0 + (x0), tmp32, xmask)
        tl.store(out_ptr1 + (x0), tmp62, xmask)
        tl.store(out_ptr2 + (x0), tmp92, xmask)
        tl.store(out_ptr3 + (x0), tmp122, xmask)
        tl.store(out_ptr4 + (x0), tmp152, xmask)
        tl.store(out_ptr5 + (x0), tmp182, xmask)
        tl.store(out_ptr6 + (x0), tmp212, xmask)
        tl.store(out_ptr7 + (x0), tmp242, xmask)
        tl.store(out_ptr8 + (x0), tmp272, xmask)


op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', 0, {}, None)]
op12.unmet_dependencies = [MemoryDep('buf4', 80, {}, None)]
op12.met_dependencies = []
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf12.users = [NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op12.group.device = cuda:0
op12.group.iteration = (1, 1)
op12.sizes = ([], [])
buf4_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op12_loop_body:
    var_ranges = {}
    index0 = 80
    index1 = 0
    def body(self, ops):
        constant = ops.constant(80, torch.int32)
        constant_1 = ops.constant(81, torch.int32)
        eq = ops.eq(constant, constant_1)
        constant_2 = ops.constant(80, torch.int32)
        constant_3 = ops.constant(82, torch.int32)
        eq_1 = ops.eq(constant_2, constant_3)
        constant_4 = ops.constant(80, torch.int32)
        constant_5 = ops.constant(83, torch.int32)
        eq_2 = ops.eq(constant_4, constant_5)
        constant_6 = ops.constant(80, torch.int32)
        constant_7 = ops.constant(84, torch.int32)
        eq_3 = ops.eq(constant_6, constant_7)
        constant_8 = ops.constant(80, torch.int32)
        constant_9 = ops.constant(85, torch.int32)
        eq_4 = ops.eq(constant_8, constant_9)
        constant_10 = ops.constant(80, torch.int32)
        constant_11 = ops.constant(86, torch.int32)
        eq_5 = ops.eq(constant_10, constant_11)
        constant_12 = ops.constant(80, torch.int32)
        constant_13 = ops.constant(87, torch.int32)
        eq_6 = ops.eq(constant_12, constant_13)
        constant_14 = ops.constant(80, torch.int32)
        constant_15 = ops.constant(88, torch.int32)
        eq_7 = ops.eq(constant_14, constant_15)
        constant_16 = ops.constant(80, torch.int32)
        constant_17 = ops.constant(89, torch.int32)
        eq_8 = ops.eq(constant_16, constant_17)
        get_index = self.get_index('index0')
        load = ops.load('buf4', get_index)
        constant_18 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_8, constant_18, load)
        constant_19 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_7, constant_19, where)
        constant_20 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_6, constant_20, where_1)
        constant_21 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_5, constant_21, where_2)
        constant_22 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_4, constant_22, where_3)
        constant_23 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_3, constant_23, where_4)
        constant_24 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_2, constant_24, where_5)
        constant_25 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_1, constant_25, where_6)
        constant_26 = ops.constant(0.0, torch.float32)
        where_8 = ops.where(eq, constant_26, where_7)
        constant_27 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_8, constant_27)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf12', get_index_1, mul, None)
        return store
op12 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        tmp19 = tl.load(in_ptr0 + (80))
        tmp20 = tl.broadcast_to(tmp19, [XBLOCK])
        tmp0 = tl.full([1], 80, tl.int32)
        tmp1 = tl.full([1], 81, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = tl.full([1], 82, tl.int32)
        tmp4 = tmp0 == tmp3
        tmp5 = tl.full([1], 83, tl.int32)
        tmp6 = tmp0 == tmp5
        tmp7 = tl.full([1], 84, tl.int32)
        tmp8 = tmp0 == tmp7
        tmp9 = tl.full([1], 85, tl.int32)
        tmp10 = tmp0 == tmp9
        tmp11 = tl.full([1], 86, tl.int32)
        tmp12 = tmp0 == tmp11
        tmp13 = tl.full([1], 87, tl.int32)
        tmp14 = tmp0 == tmp13
        tmp15 = tl.full([1], 88, tl.int32)
        tmp16 = tmp0 == tmp15
        tmp17 = tl.full([1], 89, tl.int32)
        tmp18 = tmp0 == tmp17
        tmp21 = 0.0
        tmp22 = tl.where(tmp18, tmp21, tmp20)
        tmp23 = tl.where(tmp16, tmp21, tmp22)
        tmp24 = tl.where(tmp14, tmp21, tmp23)
        tmp25 = tl.where(tmp12, tmp21, tmp24)
        tmp26 = tl.where(tmp10, tmp21, tmp25)
        tmp27 = tl.where(tmp8, tmp21, tmp26)
        tmp28 = tl.where(tmp6, tmp21, tmp27)
        tmp29 = tl.where(tmp4, tmp21, tmp28)
        tmp30 = tl.where(tmp2, tmp21, tmp29)
        tmp31 = 2.0
        tmp32 = tmp30 * tmp31
        tl.store(out_ptr0 + (tl.full([XBLOCK], 0, tl.int32)), tmp32, None)


op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', 0, {}, None)]
op19.unmet_dependencies = [MemoryDep('buf11', 70, {}, None)]
op19.met_dependencies = []
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf19.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False)]
]
op19.group.device = cuda:0
op19.group.iteration = (1, 1)
op19.sizes = ([], [])
buf11_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op19_loop_body:
    var_ranges = {}
    index0 = 70
    index1 = 0
    def body(self, ops):
        constant = ops.constant(70, torch.int32)
        constant_1 = ops.constant(71, torch.int32)
        eq = ops.eq(constant, constant_1)
        constant_2 = ops.constant(70, torch.int32)
        constant_3 = ops.constant(72, torch.int32)
        eq_1 = ops.eq(constant_2, constant_3)
        constant_4 = ops.constant(70, torch.int32)
        constant_5 = ops.constant(73, torch.int32)
        eq_2 = ops.eq(constant_4, constant_5)
        constant_6 = ops.constant(70, torch.int32)
        constant_7 = ops.constant(74, torch.int32)
        eq_3 = ops.eq(constant_6, constant_7)
        constant_8 = ops.constant(70, torch.int32)
        constant_9 = ops.constant(75, torch.int32)
        eq_4 = ops.eq(constant_8, constant_9)
        constant_10 = ops.constant(70, torch.int32)
        constant_11 = ops.constant(76, torch.int32)
        eq_5 = ops.eq(constant_10, constant_11)
        constant_12 = ops.constant(70, torch.int32)
        constant_13 = ops.constant(77, torch.int32)
        eq_6 = ops.eq(constant_12, constant_13)
        constant_14 = ops.constant(70, torch.int32)
        constant_15 = ops.constant(78, torch.int32)
        eq_7 = ops.eq(constant_14, constant_15)
        constant_16 = ops.constant(70, torch.int32)
        constant_17 = ops.constant(79, torch.int32)
        eq_8 = ops.eq(constant_16, constant_17)
        get_index = self.get_index('index0')
        load = ops.load('buf11', get_index)
        constant_18 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_8, constant_18, load)
        constant_19 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_7, constant_19, where)
        constant_20 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_6, constant_20, where_1)
        constant_21 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_5, constant_21, where_2)
        constant_22 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_4, constant_22, where_3)
        constant_23 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_3, constant_23, where_4)
        constant_24 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_2, constant_24, where_5)
        constant_25 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_1, constant_25, where_6)
        constant_26 = ops.constant(0.0, torch.float32)
        where_8 = ops.where(eq, constant_26, where_7)
        constant_27 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_8, constant_27)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf19', get_index_1, mul, None)
        return store
op19 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        tmp19 = tl.load(in_ptr0 + (70))
        tmp20 = tl.broadcast_to(tmp19, [XBLOCK])
        tmp0 = tl.full([1], 70, tl.int32)
        tmp1 = tl.full([1], 71, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = tl.full([1], 72, tl.int32)
        tmp4 = tmp0 == tmp3
        tmp5 = tl.full([1], 73, tl.int32)
        tmp6 = tmp0 == tmp5
        tmp7 = tl.full([1], 74, tl.int32)
        tmp8 = tmp0 == tmp7
        tmp9 = tl.full([1], 75, tl.int32)
        tmp10 = tmp0 == tmp9
        tmp11 = tl.full([1], 76, tl.int32)
        tmp12 = tmp0 == tmp11
        tmp13 = tl.full([1], 77, tl.int32)
        tmp14 = tmp0 == tmp13
        tmp15 = tl.full([1], 78, tl.int32)
        tmp16 = tmp0 == tmp15
        tmp17 = tl.full([1], 79, tl.int32)
        tmp18 = tmp0 == tmp17
        tmp21 = 0.0
        tmp22 = tl.where(tmp18, tmp21, tmp20)
        tmp23 = tl.where(tmp16, tmp21, tmp22)
        tmp24 = tl.where(tmp14, tmp21, tmp23)
        tmp25 = tl.where(tmp12, tmp21, tmp24)
        tmp26 = tl.where(tmp10, tmp21, tmp25)
        tmp27 = tl.where(tmp8, tmp21, tmp26)
        tmp28 = tl.where(tmp6, tmp21, tmp27)
        tmp29 = tl.where(tmp4, tmp21, tmp28)
        tmp30 = tl.where(tmp2, tmp21, tmp29)
        tmp31 = 2.0
        tmp32 = tmp30 * tmp31
        tl.store(out_ptr0 + (tl.full([XBLOCK], 0, tl.int32)), tmp32, None)


op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', 0, {}, None)]
op26.unmet_dependencies = [MemoryDep('buf18', 60, {}, None)]
op26.met_dependencies = []
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf26.users = [NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False)]
]
op26.group.device = cuda:0
op26.group.iteration = (1, 1)
op26.sizes = ([], [])
buf18_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf26_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op26_loop_body:
    var_ranges = {}
    index0 = 60
    index1 = 0
    def body(self, ops):
        constant = ops.constant(60, torch.int32)
        constant_1 = ops.constant(61, torch.int32)
        eq = ops.eq(constant, constant_1)
        constant_2 = ops.constant(60, torch.int32)
        constant_3 = ops.constant(62, torch.int32)
        eq_1 = ops.eq(constant_2, constant_3)
        constant_4 = ops.constant(60, torch.int32)
        constant_5 = ops.constant(63, torch.int32)
        eq_2 = ops.eq(constant_4, constant_5)
        constant_6 = ops.constant(60, torch.int32)
        constant_7 = ops.constant(64, torch.int32)
        eq_3 = ops.eq(constant_6, constant_7)
        constant_8 = ops.constant(60, torch.int32)
        constant_9 = ops.constant(65, torch.int32)
        eq_4 = ops.eq(constant_8, constant_9)
        constant_10 = ops.constant(60, torch.int32)
        constant_11 = ops.constant(66, torch.int32)
        eq_5 = ops.eq(constant_10, constant_11)
        constant_12 = ops.constant(60, torch.int32)
        constant_13 = ops.constant(67, torch.int32)
        eq_6 = ops.eq(constant_12, constant_13)
        constant_14 = ops.constant(60, torch.int32)
        constant_15 = ops.constant(68, torch.int32)
        eq_7 = ops.eq(constant_14, constant_15)
        constant_16 = ops.constant(60, torch.int32)
        constant_17 = ops.constant(69, torch.int32)
        eq_8 = ops.eq(constant_16, constant_17)
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        constant_18 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_8, constant_18, load)
        constant_19 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_7, constant_19, where)
        constant_20 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_6, constant_20, where_1)
        constant_21 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_5, constant_21, where_2)
        constant_22 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_4, constant_22, where_3)
        constant_23 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_3, constant_23, where_4)
        constant_24 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_2, constant_24, where_5)
        constant_25 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_1, constant_25, where_6)
        constant_26 = ops.constant(0.0, torch.float32)
        where_8 = ops.where(eq, constant_26, where_7)
        constant_27 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_8, constant_27)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf26', get_index_1, mul, None)
        return store
op26 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        tmp19 = tl.load(in_ptr0 + (60))
        tmp20 = tl.broadcast_to(tmp19, [XBLOCK])
        tmp0 = tl.full([1], 60, tl.int32)
        tmp1 = tl.full([1], 61, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = tl.full([1], 62, tl.int32)
        tmp4 = tmp0 == tmp3
        tmp5 = tl.full([1], 63, tl.int32)
        tmp6 = tmp0 == tmp5
        tmp7 = tl.full([1], 64, tl.int32)
        tmp8 = tmp0 == tmp7
        tmp9 = tl.full([1], 65, tl.int32)
        tmp10 = tmp0 == tmp9
        tmp11 = tl.full([1], 66, tl.int32)
        tmp12 = tmp0 == tmp11
        tmp13 = tl.full([1], 67, tl.int32)
        tmp14 = tmp0 == tmp13
        tmp15 = tl.full([1], 68, tl.int32)
        tmp16 = tmp0 == tmp15
        tmp17 = tl.full([1], 69, tl.int32)
        tmp18 = tmp0 == tmp17
        tmp21 = 0.0
        tmp22 = tl.where(tmp18, tmp21, tmp20)
        tmp23 = tl.where(tmp16, tmp21, tmp22)
        tmp24 = tl.where(tmp14, tmp21, tmp23)
        tmp25 = tl.where(tmp12, tmp21, tmp24)
        tmp26 = tl.where(tmp10, tmp21, tmp25)
        tmp27 = tl.where(tmp8, tmp21, tmp26)
        tmp28 = tl.where(tmp6, tmp21, tmp27)
        tmp29 = tl.where(tmp4, tmp21, tmp28)
        tmp30 = tl.where(tmp2, tmp21, tmp29)
        tmp31 = 2.0
        tmp32 = tmp30 * tmp31
        tl.store(out_ptr0 + (tl.full([XBLOCK], 0, tl.int32)), tmp32, None)


op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', 0, {}, None)]
op33.unmet_dependencies = [MemoryDep('buf25', 50, {}, None)]
op33.met_dependencies = []
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf33.users = [NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False)]
]
op33.group.device = cuda:0
op33.group.iteration = (1, 1)
op33.sizes = ([], [])
buf25_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op33_loop_body:
    var_ranges = {}
    index0 = 50
    index1 = 0
    def body(self, ops):
        constant = ops.constant(50, torch.int32)
        constant_1 = ops.constant(51, torch.int32)
        eq = ops.eq(constant, constant_1)
        constant_2 = ops.constant(50, torch.int32)
        constant_3 = ops.constant(52, torch.int32)
        eq_1 = ops.eq(constant_2, constant_3)
        constant_4 = ops.constant(50, torch.int32)
        constant_5 = ops.constant(53, torch.int32)
        eq_2 = ops.eq(constant_4, constant_5)
        constant_6 = ops.constant(50, torch.int32)
        constant_7 = ops.constant(54, torch.int32)
        eq_3 = ops.eq(constant_6, constant_7)
        constant_8 = ops.constant(50, torch.int32)
        constant_9 = ops.constant(55, torch.int32)
        eq_4 = ops.eq(constant_8, constant_9)
        constant_10 = ops.constant(50, torch.int32)
        constant_11 = ops.constant(56, torch.int32)
        eq_5 = ops.eq(constant_10, constant_11)
        constant_12 = ops.constant(50, torch.int32)
        constant_13 = ops.constant(57, torch.int32)
        eq_6 = ops.eq(constant_12, constant_13)
        constant_14 = ops.constant(50, torch.int32)
        constant_15 = ops.constant(58, torch.int32)
        eq_7 = ops.eq(constant_14, constant_15)
        constant_16 = ops.constant(50, torch.int32)
        constant_17 = ops.constant(59, torch.int32)
        eq_8 = ops.eq(constant_16, constant_17)
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        constant_18 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_8, constant_18, load)
        constant_19 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_7, constant_19, where)
        constant_20 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_6, constant_20, where_1)
        constant_21 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_5, constant_21, where_2)
        constant_22 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_4, constant_22, where_3)
        constant_23 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_3, constant_23, where_4)
        constant_24 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_2, constant_24, where_5)
        constant_25 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_1, constant_25, where_6)
        constant_26 = ops.constant(0.0, torch.float32)
        where_8 = ops.where(eq, constant_26, where_7)
        constant_27 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_8, constant_27)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf33', get_index_1, mul, None)
        return store
op33 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        tmp19 = tl.load(in_ptr0 + (50))
        tmp20 = tl.broadcast_to(tmp19, [XBLOCK])
        tmp0 = tl.full([1], 50, tl.int32)
        tmp1 = tl.full([1], 51, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = tl.full([1], 52, tl.int32)
        tmp4 = tmp0 == tmp3
        tmp5 = tl.full([1], 53, tl.int32)
        tmp6 = tmp0 == tmp5
        tmp7 = tl.full([1], 54, tl.int32)
        tmp8 = tmp0 == tmp7
        tmp9 = tl.full([1], 55, tl.int32)
        tmp10 = tmp0 == tmp9
        tmp11 = tl.full([1], 56, tl.int32)
        tmp12 = tmp0 == tmp11
        tmp13 = tl.full([1], 57, tl.int32)
        tmp14 = tmp0 == tmp13
        tmp15 = tl.full([1], 58, tl.int32)
        tmp16 = tmp0 == tmp15
        tmp17 = tl.full([1], 59, tl.int32)
        tmp18 = tmp0 == tmp17
        tmp21 = 0.0
        tmp22 = tl.where(tmp18, tmp21, tmp20)
        tmp23 = tl.where(tmp16, tmp21, tmp22)
        tmp24 = tl.where(tmp14, tmp21, tmp23)
        tmp25 = tl.where(tmp12, tmp21, tmp24)
        tmp26 = tl.where(tmp10, tmp21, tmp25)
        tmp27 = tl.where(tmp8, tmp21, tmp26)
        tmp28 = tl.where(tmp6, tmp21, tmp27)
        tmp29 = tl.where(tmp4, tmp21, tmp28)
        tmp30 = tl.where(tmp2, tmp21, tmp29)
        tmp31 = 2.0
        tmp32 = tmp30 * tmp31
        tl.store(out_ptr0 + (tl.full([XBLOCK], 0, tl.int32)), tmp32, None)


op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', 0, {}, None)]
op40.unmet_dependencies = [MemoryDep('buf32', 40, {}, None)]
op40.met_dependencies = []
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf40.users = [NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False)]
]
op40.group.device = cuda:0
op40.group.iteration = (1, 1)
op40.sizes = ([], [])
buf32_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op40_loop_body:
    var_ranges = {}
    index0 = 40
    index1 = 0
    def body(self, ops):
        constant = ops.constant(40, torch.int32)
        constant_1 = ops.constant(41, torch.int32)
        eq = ops.eq(constant, constant_1)
        constant_2 = ops.constant(40, torch.int32)
        constant_3 = ops.constant(42, torch.int32)
        eq_1 = ops.eq(constant_2, constant_3)
        constant_4 = ops.constant(40, torch.int32)
        constant_5 = ops.constant(43, torch.int32)
        eq_2 = ops.eq(constant_4, constant_5)
        constant_6 = ops.constant(40, torch.int32)
        constant_7 = ops.constant(44, torch.int32)
        eq_3 = ops.eq(constant_6, constant_7)
        constant_8 = ops.constant(40, torch.int32)
        constant_9 = ops.constant(45, torch.int32)
        eq_4 = ops.eq(constant_8, constant_9)
        constant_10 = ops.constant(40, torch.int32)
        constant_11 = ops.constant(46, torch.int32)
        eq_5 = ops.eq(constant_10, constant_11)
        constant_12 = ops.constant(40, torch.int32)
        constant_13 = ops.constant(47, torch.int32)
        eq_6 = ops.eq(constant_12, constant_13)
        constant_14 = ops.constant(40, torch.int32)
        constant_15 = ops.constant(48, torch.int32)
        eq_7 = ops.eq(constant_14, constant_15)
        constant_16 = ops.constant(40, torch.int32)
        constant_17 = ops.constant(49, torch.int32)
        eq_8 = ops.eq(constant_16, constant_17)
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        constant_18 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_8, constant_18, load)
        constant_19 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_7, constant_19, where)
        constant_20 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_6, constant_20, where_1)
        constant_21 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_5, constant_21, where_2)
        constant_22 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_4, constant_22, where_3)
        constant_23 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_3, constant_23, where_4)
        constant_24 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_2, constant_24, where_5)
        constant_25 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_1, constant_25, where_6)
        constant_26 = ops.constant(0.0, torch.float32)
        where_8 = ops.where(eq, constant_26, where_7)
        constant_27 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_8, constant_27)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf40', get_index_1, mul, None)
        return store
op40 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        tmp19 = tl.load(in_ptr0 + (40))
        tmp20 = tl.broadcast_to(tmp19, [XBLOCK])
        tmp0 = tl.full([1], 40, tl.int32)
        tmp1 = tl.full([1], 41, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = tl.full([1], 42, tl.int32)
        tmp4 = tmp0 == tmp3
        tmp5 = tl.full([1], 43, tl.int32)
        tmp6 = tmp0 == tmp5
        tmp7 = tl.full([1], 44, tl.int32)
        tmp8 = tmp0 == tmp7
        tmp9 = tl.full([1], 45, tl.int32)
        tmp10 = tmp0 == tmp9
        tmp11 = tl.full([1], 46, tl.int32)
        tmp12 = tmp0 == tmp11
        tmp13 = tl.full([1], 47, tl.int32)
        tmp14 = tmp0 == tmp13
        tmp15 = tl.full([1], 48, tl.int32)
        tmp16 = tmp0 == tmp15
        tmp17 = tl.full([1], 49, tl.int32)
        tmp18 = tmp0 == tmp17
        tmp21 = 0.0
        tmp22 = tl.where(tmp18, tmp21, tmp20)
        tmp23 = tl.where(tmp16, tmp21, tmp22)
        tmp24 = tl.where(tmp14, tmp21, tmp23)
        tmp25 = tl.where(tmp12, tmp21, tmp24)
        tmp26 = tl.where(tmp10, tmp21, tmp25)
        tmp27 = tl.where(tmp8, tmp21, tmp26)
        tmp28 = tl.where(tmp6, tmp21, tmp27)
        tmp29 = tl.where(tmp4, tmp21, tmp28)
        tmp30 = tl.where(tmp2, tmp21, tmp29)
        tmp31 = 2.0
        tmp32 = tmp30 * tmp31
        tl.store(out_ptr0 + (tl.full([XBLOCK], 0, tl.int32)), tmp32, None)


op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', 0, {}, None)]
op47.unmet_dependencies = [MemoryDep('buf39', 30, {}, None)]
op47.met_dependencies = []
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf47.users = [NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False)]
]
op47.group.device = cuda:0
op47.group.iteration = (1, 1)
op47.sizes = ([], [])
buf39_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf47_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op47_loop_body:
    var_ranges = {}
    index0 = 30
    index1 = 0
    def body(self, ops):
        constant = ops.constant(30, torch.int32)
        constant_1 = ops.constant(31, torch.int32)
        eq = ops.eq(constant, constant_1)
        constant_2 = ops.constant(30, torch.int32)
        constant_3 = ops.constant(32, torch.int32)
        eq_1 = ops.eq(constant_2, constant_3)
        constant_4 = ops.constant(30, torch.int32)
        constant_5 = ops.constant(33, torch.int32)
        eq_2 = ops.eq(constant_4, constant_5)
        constant_6 = ops.constant(30, torch.int32)
        constant_7 = ops.constant(34, torch.int32)
        eq_3 = ops.eq(constant_6, constant_7)
        constant_8 = ops.constant(30, torch.int32)
        constant_9 = ops.constant(35, torch.int32)
        eq_4 = ops.eq(constant_8, constant_9)
        constant_10 = ops.constant(30, torch.int32)
        constant_11 = ops.constant(36, torch.int32)
        eq_5 = ops.eq(constant_10, constant_11)
        constant_12 = ops.constant(30, torch.int32)
        constant_13 = ops.constant(37, torch.int32)
        eq_6 = ops.eq(constant_12, constant_13)
        constant_14 = ops.constant(30, torch.int32)
        constant_15 = ops.constant(38, torch.int32)
        eq_7 = ops.eq(constant_14, constant_15)
        constant_16 = ops.constant(30, torch.int32)
        constant_17 = ops.constant(39, torch.int32)
        eq_8 = ops.eq(constant_16, constant_17)
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        constant_18 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_8, constant_18, load)
        constant_19 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_7, constant_19, where)
        constant_20 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_6, constant_20, where_1)
        constant_21 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_5, constant_21, where_2)
        constant_22 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_4, constant_22, where_3)
        constant_23 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_3, constant_23, where_4)
        constant_24 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_2, constant_24, where_5)
        constant_25 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_1, constant_25, where_6)
        constant_26 = ops.constant(0.0, torch.float32)
        where_8 = ops.where(eq, constant_26, where_7)
        constant_27 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_8, constant_27)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf47', get_index_1, mul, None)
        return store
op47 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        tmp19 = tl.load(in_ptr0 + (30))
        tmp20 = tl.broadcast_to(tmp19, [XBLOCK])
        tmp0 = tl.full([1], 30, tl.int32)
        tmp1 = tl.full([1], 31, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = tl.full([1], 32, tl.int32)
        tmp4 = tmp0 == tmp3
        tmp5 = tl.full([1], 33, tl.int32)
        tmp6 = tmp0 == tmp5
        tmp7 = tl.full([1], 34, tl.int32)
        tmp8 = tmp0 == tmp7
        tmp9 = tl.full([1], 35, tl.int32)
        tmp10 = tmp0 == tmp9
        tmp11 = tl.full([1], 36, tl.int32)
        tmp12 = tmp0 == tmp11
        tmp13 = tl.full([1], 37, tl.int32)
        tmp14 = tmp0 == tmp13
        tmp15 = tl.full([1], 38, tl.int32)
        tmp16 = tmp0 == tmp15
        tmp17 = tl.full([1], 39, tl.int32)
        tmp18 = tmp0 == tmp17
        tmp21 = 0.0
        tmp22 = tl.where(tmp18, tmp21, tmp20)
        tmp23 = tl.where(tmp16, tmp21, tmp22)
        tmp24 = tl.where(tmp14, tmp21, tmp23)
        tmp25 = tl.where(tmp12, tmp21, tmp24)
        tmp26 = tl.where(tmp10, tmp21, tmp25)
        tmp27 = tl.where(tmp8, tmp21, tmp26)
        tmp28 = tl.where(tmp6, tmp21, tmp27)
        tmp29 = tl.where(tmp4, tmp21, tmp28)
        tmp30 = tl.where(tmp2, tmp21, tmp29)
        tmp31 = 2.0
        tmp32 = tmp30 * tmp31
        tl.store(out_ptr0 + (tl.full([XBLOCK], 0, tl.int32)), tmp32, None)


op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', 0, {}, None)]
op5.unmet_dependencies = []
op5.met_dependencies = [MemoryDep('tangents_1', 90, {}, None)]
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf5.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op5.group.device = cuda:0
op5.group.iteration = (1, 1)
op5.sizes = ([], [])
tangents_1_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf5_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op5_loop_body:
    var_ranges = {}
    index0 = 90
    index1 = 0
    def body(self, ops):
        constant = ops.constant(90, torch.int32)
        constant_1 = ops.constant(91, torch.int32)
        eq = ops.eq(constant, constant_1)
        constant_2 = ops.constant(90, torch.int32)
        constant_3 = ops.constant(92, torch.int32)
        eq_1 = ops.eq(constant_2, constant_3)
        constant_4 = ops.constant(90, torch.int32)
        constant_5 = ops.constant(93, torch.int32)
        eq_2 = ops.eq(constant_4, constant_5)
        constant_6 = ops.constant(90, torch.int32)
        constant_7 = ops.constant(94, torch.int32)
        eq_3 = ops.eq(constant_6, constant_7)
        constant_8 = ops.constant(90, torch.int32)
        constant_9 = ops.constant(95, torch.int32)
        eq_4 = ops.eq(constant_8, constant_9)
        constant_10 = ops.constant(90, torch.int32)
        constant_11 = ops.constant(96, torch.int32)
        eq_5 = ops.eq(constant_10, constant_11)
        constant_12 = ops.constant(90, torch.int32)
        constant_13 = ops.constant(97, torch.int32)
        eq_6 = ops.eq(constant_12, constant_13)
        constant_14 = ops.constant(90, torch.int32)
        constant_15 = ops.constant(98, torch.int32)
        eq_7 = ops.eq(constant_14, constant_15)
        constant_16 = ops.constant(90, torch.int32)
        constant_17 = ops.constant(99, torch.int32)
        eq_8 = ops.eq(constant_16, constant_17)
        get_index = self.get_index('index0')
        load = ops.load('tangents_1', get_index)
        constant_18 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_8, constant_18, load)
        constant_19 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_7, constant_19, where)
        constant_20 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_6, constant_20, where_1)
        constant_21 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_5, constant_21, where_2)
        constant_22 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_4, constant_22, where_3)
        constant_23 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_3, constant_23, where_4)
        constant_24 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_2, constant_24, where_5)
        constant_25 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_1, constant_25, where_6)
        constant_26 = ops.constant(0.0, torch.float32)
        where_8 = ops.where(eq, constant_26, where_7)
        constant_27 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_8, constant_27)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf5', get_index_1, mul, None)
        return store
op5 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        tmp19 = tl.load(in_ptr0 + (90))
        tmp20 = tl.broadcast_to(tmp19, [XBLOCK])
        tmp0 = tl.full([1], 90, tl.int32)
        tmp1 = tl.full([1], 91, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = tl.full([1], 92, tl.int32)
        tmp4 = tmp0 == tmp3
        tmp5 = tl.full([1], 93, tl.int32)
        tmp6 = tmp0 == tmp5
        tmp7 = tl.full([1], 94, tl.int32)
        tmp8 = tmp0 == tmp7
        tmp9 = tl.full([1], 95, tl.int32)
        tmp10 = tmp0 == tmp9
        tmp11 = tl.full([1], 96, tl.int32)
        tmp12 = tmp0 == tmp11
        tmp13 = tl.full([1], 97, tl.int32)
        tmp14 = tmp0 == tmp13
        tmp15 = tl.full([1], 98, tl.int32)
        tmp16 = tmp0 == tmp15
        tmp17 = tl.full([1], 99, tl.int32)
        tmp18 = tmp0 == tmp17
        tmp21 = 0.0
        tmp22 = tl.where(tmp18, tmp21, tmp20)
        tmp23 = tl.where(tmp16, tmp21, tmp22)
        tmp24 = tl.where(tmp14, tmp21, tmp23)
        tmp25 = tl.where(tmp12, tmp21, tmp24)
        tmp26 = tl.where(tmp10, tmp21, tmp25)
        tmp27 = tl.where(tmp8, tmp21, tmp26)
        tmp28 = tl.where(tmp6, tmp21, tmp27)
        tmp29 = tl.where(tmp4, tmp21, tmp28)
        tmp30 = tl.where(tmp2, tmp21, tmp29)
        tmp31 = 2.0
        tmp32 = tmp30 * tmp31
        tl.store(out_ptr0 + (tl.full([XBLOCK], 0, tl.int32)), tmp32, None)


op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', 0, {}, None)]
op54.unmet_dependencies = [MemoryDep('buf46', 20, {}, None)]
op54.met_dependencies = []
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf54.users = [NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
]
op54.group.device = cuda:0
op54.group.iteration = (1, 1)
op54.sizes = ([], [])
buf46_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op54_loop_body:
    var_ranges = {}
    index0 = 20
    index1 = 0
    def body(self, ops):
        constant = ops.constant(20, torch.int32)
        constant_1 = ops.constant(21, torch.int32)
        eq = ops.eq(constant, constant_1)
        constant_2 = ops.constant(20, torch.int32)
        constant_3 = ops.constant(22, torch.int32)
        eq_1 = ops.eq(constant_2, constant_3)
        constant_4 = ops.constant(20, torch.int32)
        constant_5 = ops.constant(23, torch.int32)
        eq_2 = ops.eq(constant_4, constant_5)
        constant_6 = ops.constant(20, torch.int32)
        constant_7 = ops.constant(24, torch.int32)
        eq_3 = ops.eq(constant_6, constant_7)
        constant_8 = ops.constant(20, torch.int32)
        constant_9 = ops.constant(25, torch.int32)
        eq_4 = ops.eq(constant_8, constant_9)
        constant_10 = ops.constant(20, torch.int32)
        constant_11 = ops.constant(26, torch.int32)
        eq_5 = ops.eq(constant_10, constant_11)
        constant_12 = ops.constant(20, torch.int32)
        constant_13 = ops.constant(27, torch.int32)
        eq_6 = ops.eq(constant_12, constant_13)
        constant_14 = ops.constant(20, torch.int32)
        constant_15 = ops.constant(28, torch.int32)
        eq_7 = ops.eq(constant_14, constant_15)
        constant_16 = ops.constant(20, torch.int32)
        constant_17 = ops.constant(29, torch.int32)
        eq_8 = ops.eq(constant_16, constant_17)
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        constant_18 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_8, constant_18, load)
        constant_19 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_7, constant_19, where)
        constant_20 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_6, constant_20, where_1)
        constant_21 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_5, constant_21, where_2)
        constant_22 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_4, constant_22, where_3)
        constant_23 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_3, constant_23, where_4)
        constant_24 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_2, constant_24, where_5)
        constant_25 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_1, constant_25, where_6)
        constant_26 = ops.constant(0.0, torch.float32)
        where_8 = ops.where(eq, constant_26, where_7)
        constant_27 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_8, constant_27)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf54', get_index_1, mul, None)
        return store
op54 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        tmp19 = tl.load(in_ptr0 + (20))
        tmp20 = tl.broadcast_to(tmp19, [XBLOCK])
        tmp0 = tl.full([1], 20, tl.int32)
        tmp1 = tl.full([1], 21, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = tl.full([1], 22, tl.int32)
        tmp4 = tmp0 == tmp3
        tmp5 = tl.full([1], 23, tl.int32)
        tmp6 = tmp0 == tmp5
        tmp7 = tl.full([1], 24, tl.int32)
        tmp8 = tmp0 == tmp7
        tmp9 = tl.full([1], 25, tl.int32)
        tmp10 = tmp0 == tmp9
        tmp11 = tl.full([1], 26, tl.int32)
        tmp12 = tmp0 == tmp11
        tmp13 = tl.full([1], 27, tl.int32)
        tmp14 = tmp0 == tmp13
        tmp15 = tl.full([1], 28, tl.int32)
        tmp16 = tmp0 == tmp15
        tmp17 = tl.full([1], 29, tl.int32)
        tmp18 = tmp0 == tmp17
        tmp21 = 0.0
        tmp22 = tl.where(tmp18, tmp21, tmp20)
        tmp23 = tl.where(tmp16, tmp21, tmp22)
        tmp24 = tl.where(tmp14, tmp21, tmp23)
        tmp25 = tl.where(tmp12, tmp21, tmp24)
        tmp26 = tl.where(tmp10, tmp21, tmp25)
        tmp27 = tl.where(tmp8, tmp21, tmp26)
        tmp28 = tl.where(tmp6, tmp21, tmp27)
        tmp29 = tl.where(tmp4, tmp21, tmp28)
        tmp30 = tl.where(tmp2, tmp21, tmp29)
        tmp31 = 2.0
        tmp32 = tmp30 * tmp31
        tl.store(out_ptr0 + (tl.full([XBLOCK], 0, tl.int32)), tmp32, None)


op61: SchedulerNode(ComputedBuffer)
op61.writes = [MemoryDep('buf61', 0, {}, None)]
op61.unmet_dependencies = [MemoryDep('buf53', 10, {}, None)]
op61.met_dependencies = []
op61.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf61.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
]
op61.group.device = cuda:0
op61.group.iteration = (1, 1)
op61.sizes = ([], [])
buf53_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op61_loop_body:
    var_ranges = {}
    index0 = 10
    index1 = 0
    def body(self, ops):
        constant = ops.constant(10, torch.int32)
        constant_1 = ops.constant(11, torch.int32)
        eq = ops.eq(constant, constant_1)
        constant_2 = ops.constant(10, torch.int32)
        constant_3 = ops.constant(12, torch.int32)
        eq_1 = ops.eq(constant_2, constant_3)
        constant_4 = ops.constant(10, torch.int32)
        constant_5 = ops.constant(13, torch.int32)
        eq_2 = ops.eq(constant_4, constant_5)
        constant_6 = ops.constant(10, torch.int32)
        constant_7 = ops.constant(14, torch.int32)
        eq_3 = ops.eq(constant_6, constant_7)
        constant_8 = ops.constant(10, torch.int32)
        constant_9 = ops.constant(15, torch.int32)
        eq_4 = ops.eq(constant_8, constant_9)
        constant_10 = ops.constant(10, torch.int32)
        constant_11 = ops.constant(16, torch.int32)
        eq_5 = ops.eq(constant_10, constant_11)
        constant_12 = ops.constant(10, torch.int32)
        constant_13 = ops.constant(17, torch.int32)
        eq_6 = ops.eq(constant_12, constant_13)
        constant_14 = ops.constant(10, torch.int32)
        constant_15 = ops.constant(18, torch.int32)
        eq_7 = ops.eq(constant_14, constant_15)
        constant_16 = ops.constant(10, torch.int32)
        constant_17 = ops.constant(19, torch.int32)
        eq_8 = ops.eq(constant_16, constant_17)
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        constant_18 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_8, constant_18, load)
        constant_19 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_7, constant_19, where)
        constant_20 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_6, constant_20, where_1)
        constant_21 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_5, constant_21, where_2)
        constant_22 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_4, constant_22, where_3)
        constant_23 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_3, constant_23, where_4)
        constant_24 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_2, constant_24, where_5)
        constant_25 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_1, constant_25, where_6)
        constant_26 = ops.constant(0.0, torch.float32)
        where_8 = ops.where(eq, constant_26, where_7)
        constant_27 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_8, constant_27)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf61', get_index_1, mul, None)
        return store
op61 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        tmp19 = tl.load(in_ptr0 + (10))
        tmp20 = tl.broadcast_to(tmp19, [XBLOCK])
        tmp0 = tl.full([1], 10, tl.int32)
        tmp1 = tl.full([1], 11, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = tl.full([1], 12, tl.int32)
        tmp4 = tmp0 == tmp3
        tmp5 = tl.full([1], 13, tl.int32)
        tmp6 = tmp0 == tmp5
        tmp7 = tl.full([1], 14, tl.int32)
        tmp8 = tmp0 == tmp7
        tmp9 = tl.full([1], 15, tl.int32)
        tmp10 = tmp0 == tmp9
        tmp11 = tl.full([1], 16, tl.int32)
        tmp12 = tmp0 == tmp11
        tmp13 = tl.full([1], 17, tl.int32)
        tmp14 = tmp0 == tmp13
        tmp15 = tl.full([1], 18, tl.int32)
        tmp16 = tmp0 == tmp15
        tmp17 = tl.full([1], 19, tl.int32)
        tmp18 = tmp0 == tmp17
        tmp21 = 0.0
        tmp22 = tl.where(tmp18, tmp21, tmp20)
        tmp23 = tl.where(tmp16, tmp21, tmp22)
        tmp24 = tl.where(tmp14, tmp21, tmp23)
        tmp25 = tl.where(tmp12, tmp21, tmp24)
        tmp26 = tl.where(tmp10, tmp21, tmp25)
        tmp27 = tl.where(tmp8, tmp21, tmp26)
        tmp28 = tl.where(tmp6, tmp21, tmp27)
        tmp29 = tl.where(tmp4, tmp21, tmp28)
        tmp30 = tl.where(tmp2, tmp21, tmp29)
        tmp31 = 2.0
        tmp32 = tmp30 * tmp31
        tl.store(out_ptr0 + (tl.full([XBLOCK], 0, tl.int32)), tmp32, None)


op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', 0, {}, None)]
op67.unmet_dependencies = [MemoryDep('buf60', 0, {}, None)]
op67.met_dependencies = []
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf67.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
]
op67.group.device = cuda:0
op67.group.iteration = (1, 1)
op67.sizes = ([], [])
buf60_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf67_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op67_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        constant = ops.constant(0, torch.int32)
        constant_1 = ops.constant(1, torch.int32)
        eq = ops.eq(constant, constant_1)
        constant_2 = ops.constant(0, torch.int32)
        constant_3 = ops.constant(2, torch.int32)
        eq_1 = ops.eq(constant_2, constant_3)
        constant_4 = ops.constant(0, torch.int32)
        constant_5 = ops.constant(3, torch.int32)
        eq_2 = ops.eq(constant_4, constant_5)
        constant_6 = ops.constant(0, torch.int32)
        constant_7 = ops.constant(4, torch.int32)
        eq_3 = ops.eq(constant_6, constant_7)
        constant_8 = ops.constant(0, torch.int32)
        constant_9 = ops.constant(5, torch.int32)
        eq_4 = ops.eq(constant_8, constant_9)
        constant_10 = ops.constant(0, torch.int32)
        constant_11 = ops.constant(6, torch.int32)
        eq_5 = ops.eq(constant_10, constant_11)
        constant_12 = ops.constant(0, torch.int32)
        constant_13 = ops.constant(7, torch.int32)
        eq_6 = ops.eq(constant_12, constant_13)
        constant_14 = ops.constant(0, torch.int32)
        constant_15 = ops.constant(8, torch.int32)
        eq_7 = ops.eq(constant_14, constant_15)
        constant_16 = ops.constant(0, torch.int32)
        constant_17 = ops.constant(9, torch.int32)
        eq_8 = ops.eq(constant_16, constant_17)
        get_index = self.get_index('index0')
        load = ops.load('buf60', get_index)
        constant_18 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_8, constant_18, load)
        constant_19 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_7, constant_19, where)
        constant_20 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_6, constant_20, where_1)
        constant_21 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_5, constant_21, where_2)
        constant_22 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_4, constant_22, where_3)
        constant_23 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_3, constant_23, where_4)
        constant_24 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_2, constant_24, where_5)
        constant_25 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_1, constant_25, where_6)
        constant_26 = ops.constant(0.0, torch.float32)
        where_8 = ops.where(eq, constant_26, where_7)
        constant_27 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_8, constant_27)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf67', get_index_1, mul, None)
        return store
op67 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        tmp19 = tl.load(in_ptr0 + (0))
        tmp20 = tl.broadcast_to(tmp19, [XBLOCK])
        tmp0 = tl.full([1], 0, tl.int32)
        tmp1 = tl.full([1], 1, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = tl.full([1], 2, tl.int32)
        tmp4 = tmp0 == tmp3
        tmp5 = tl.full([1], 3, tl.int32)
        tmp6 = tmp0 == tmp5
        tmp7 = tl.full([1], 4, tl.int32)
        tmp8 = tmp0 == tmp7
        tmp9 = tl.full([1], 5, tl.int32)
        tmp10 = tmp0 == tmp9
        tmp11 = tl.full([1], 6, tl.int32)
        tmp12 = tmp0 == tmp11
        tmp13 = tl.full([1], 7, tl.int32)
        tmp14 = tmp0 == tmp13
        tmp15 = tl.full([1], 8, tl.int32)
        tmp16 = tmp0 == tmp15
        tmp17 = tl.full([1], 9, tl.int32)
        tmp18 = tmp0 == tmp17
        tmp21 = 0.0
        tmp22 = tl.where(tmp18, tmp21, tmp20)
        tmp23 = tl.where(tmp16, tmp21, tmp22)
        tmp24 = tl.where(tmp14, tmp21, tmp23)
        tmp25 = tl.where(tmp12, tmp21, tmp24)
        tmp26 = tl.where(tmp10, tmp21, tmp25)
        tmp27 = tl.where(tmp8, tmp21, tmp26)
        tmp28 = tl.where(tmp6, tmp21, tmp27)
        tmp29 = tl.where(tmp4, tmp21, tmp28)
        tmp30 = tl.where(tmp2, tmp21, tmp29)
        tmp31 = 2.0
        tmp32 = tmp30 * tmp31
        tl.store(out_ptr0 + (tl.full([XBLOCK], 0, tl.int32)), tmp32, None)


op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.writes = 
    [   MemoryDep('buf0', c0, {c0: 100}, None),
        MemoryDep('buf1', c0, {c0: 100}, None),
        MemoryDep('buf10', c0, {c0: 100}, None),
        MemoryDep('buf13', c0, {c0: 100}, None),
        MemoryDep('buf14', c0, {c0: 100}, None),
        MemoryDep('buf15', c0, {c0: 100}, None),
        MemoryDep('buf16', c0, {c0: 100}, None),
        MemoryDep('buf17', c0, {c0: 100}, None),
        MemoryDep('buf2', c0, {c0: 100}, None),
        MemoryDep('buf20', c0, {c0: 100}, None),
        MemoryDep('buf21', c0, {c0: 100}, None),
        MemoryDep('buf22', c0, {c0: 100}, None),
        MemoryDep('buf23', c0, {c0: 100}, None),
        MemoryDep('buf24', c0, {c0: 100}, None),
        MemoryDep('buf27', c0, {c0: 100}, None),
        MemoryDep('buf28', c0, {c0: 100}, None),
        MemoryDep('buf29', c0, {c0: 100}, None),
        MemoryDep('buf3', c0, {c0: 100}, None),
        MemoryDep('buf30', c0, {c0: 100}, None),
        MemoryDep('buf31', c0, {c0: 100}, None),
        MemoryDep('buf34', c0, {c0: 100}, None),
        MemoryDep('buf35', c0, {c0: 100}, None),
        MemoryDep('buf36', c0, {c0: 100}, None),
        MemoryDep('buf37', c0, {c0: 100}, None),
        MemoryDep('buf38', c0, {c0: 100}, None),
        MemoryDep('buf41', c0, {c0: 100}, None),
        MemoryDep('buf42', c0, {c0: 100}, None),
        MemoryDep('buf43', c0, {c0: 100}, None),
        MemoryDep('buf44', c0, {c0: 100}, None),
        MemoryDep('buf45', c0, {c0: 100}, None),
        MemoryDep('buf48', c0, {c0: 100}, None),
        MemoryDep('buf49', c0, {c0: 100}, None),
        MemoryDep('buf50', c0, {c0: 100}, None),
        MemoryDep('buf51', c0, {c0: 100}, None),
        MemoryDep('buf52', c0, {c0: 100}, None),
        MemoryDep('buf55', c0, {c0: 100}, None),
        MemoryDep('buf56', c0, {c0: 100}, None),
        MemoryDep('buf57', c0, {c0: 100}, None),
        MemoryDep('buf58', c0, {c0: 100}, None),
        MemoryDep('buf59', c0, {c0: 100}, None),
        MemoryDep('buf6', c0, {c0: 100}, None),
        MemoryDep('buf62', c0, {c0: 100}, None),
        MemoryDep('buf63', c0, {c0: 100}, None),
        MemoryDep('buf64', c0, {c0: 100}, None),
        MemoryDep('buf65', c0, {c0: 100}, None),
        MemoryDep('buf66', c0, {c0: 100}, None),
        MemoryDep('buf68', c0, {c0: 100}, None),
        MemoryDep('buf7', c0, {c0: 100}, None),
        MemoryDep('buf8', c0, {c0: 100}, None),
        MemoryDep('buf9', c0, {c0: 100}, None)]
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.unmet_dependencies = 
    [   MemoryDep('buf11', 71, {}, None),
        MemoryDep('buf11', 72, {}, None),
        MemoryDep('buf11', 73, {}, None),
        MemoryDep('buf11', 74, {}, None),
        MemoryDep('buf11', 75, {}, None),
        MemoryDep('buf11', 76, {}, None),
        MemoryDep('buf11', 77, {}, None),
        MemoryDep('buf11', 78, {}, None),
        MemoryDep('buf11', 79, {}, None),
        MemoryDep('buf12', 0, {}, None),
        MemoryDep('buf18', 61, {}, None),
        MemoryDep('buf18', 62, {}, None),
        MemoryDep('buf18', 63, {}, None),
        MemoryDep('buf18', 64, {}, None),
        MemoryDep('buf18', 65, {}, None),
        MemoryDep('buf18', 66, {}, None),
        MemoryDep('buf18', 67, {}, None),
        MemoryDep('buf18', 68, {}, None),
        MemoryDep('buf18', 69, {}, None),
        MemoryDep('buf19', 0, {}, None),
        MemoryDep('buf25', 51, {}, None),
        MemoryDep('buf25', 52, {}, None),
        MemoryDep('buf25', 53, {}, None),
        MemoryDep('buf25', 54, {}, None),
        MemoryDep('buf25', 55, {}, None),
        MemoryDep('buf25', 56, {}, None),
        MemoryDep('buf25', 57, {}, None),
        MemoryDep('buf25', 58, {}, None),
        MemoryDep('buf25', 59, {}, None),
        MemoryDep('buf26', 0, {}, None),
        MemoryDep('buf32', 41, {}, None),
        MemoryDep('buf32', 42, {}, None),
        MemoryDep('buf32', 43, {}, None),
        MemoryDep('buf32', 44, {}, None),
        MemoryDep('buf32', 45, {}, None),
        MemoryDep('buf32', 46, {}, None),
        MemoryDep('buf32', 47, {}, None),
        MemoryDep('buf32', 48, {}, None),
        MemoryDep('buf32', 49, {}, None),
        MemoryDep('buf33', 0, {}, None),
        MemoryDep('buf39', 31, {}, None),
        MemoryDep('buf39', 32, {}, None),
        MemoryDep('buf39', 33, {}, None),
        MemoryDep('buf39', 34, {}, None),
        MemoryDep('buf39', 35, {}, None),
        MemoryDep('buf39', 36, {}, None),
        MemoryDep('buf39', 37, {}, None),
        MemoryDep('buf39', 38, {}, None),
        MemoryDep('buf39', 39, {}, None),
        MemoryDep('buf4', 81, {}, None),
        MemoryDep('buf4', 82, {}, None),
        MemoryDep('buf4', 83, {}, None),
        MemoryDep('buf4', 84, {}, None),
        MemoryDep('buf4', 85, {}, None),
        MemoryDep('buf4', 86, {}, None),
        MemoryDep('buf4', 87, {}, None),
        MemoryDep('buf4', 88, {}, None),
        MemoryDep('buf4', 89, {}, None),
        MemoryDep('buf40', 0, {}, None),
        MemoryDep('buf46', 21, {}, None),
        MemoryDep('buf46', 22, {}, None),
        MemoryDep('buf46', 23, {}, None),
        MemoryDep('buf46', 24, {}, None),
        MemoryDep('buf46', 25, {}, None),
        MemoryDep('buf46', 26, {}, None),
        MemoryDep('buf46', 27, {}, None),
        MemoryDep('buf46', 28, {}, None),
        MemoryDep('buf46', 29, {}, None),
        MemoryDep('buf47', 0, {}, None),
        MemoryDep('buf5', 0, {}, None),
        MemoryDep('buf53', 11, {}, None),
        MemoryDep('buf53', 12, {}, None),
        MemoryDep('buf53', 13, {}, None),
        MemoryDep('buf53', 14, {}, None),
        MemoryDep('buf53', 15, {}, None),
        MemoryDep('buf53', 16, {}, None),
        MemoryDep('buf53', 17, {}, None),
        MemoryDep('buf53', 18, {}, None),
        MemoryDep('buf53', 19, {}, None),
        MemoryDep('buf54', 0, {}, None),
        MemoryDep('buf60', 1, {}, None),
        MemoryDep('buf60', 2, {}, None),
        MemoryDep('buf60', 3, {}, None),
        MemoryDep('buf60', 4, {}, None),
        MemoryDep('buf60', 5, {}, None),
        MemoryDep('buf60', 6, {}, None),
        MemoryDep('buf60', 7, {}, None),
        MemoryDep('buf60', 8, {}, None),
        MemoryDep('buf60', 9, {}, None),
        MemoryDep('buf61', 0, {}, None),
        MemoryDep('buf67', 0, {}, None)]
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.met_dependencies = 
    [   MemoryDep('full_default', c0, {c0: 100}, None),
        MemoryDep('tangents_1', 91, {}, None),
        MemoryDep('tangents_1', 92, {}, None),
        MemoryDep('tangents_1', 93, {}, None),
        MemoryDep('tangents_1', 94, {}, None),
        MemoryDep('tangents_1', 95, {}, None),
        MemoryDep('tangents_1', 96, {}, None),
        MemoryDep('tangents_1', 97, {}, None),
        MemoryDep('tangents_1', 98, {}, None),
        MemoryDep('tangents_1', 99, {}, None)]
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf0.users = [NodeUser(node=SchedulerNode(name='op1'), can_inplace=True, is_weak=False)]
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf1.users = [NodeUser(node=SchedulerNode(name='op2'), can_inplace=True, is_weak=False)]
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf2.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=True, is_weak=False)]
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf3.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=True, is_weak=False)]
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf6.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=True, is_weak=False)]
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf7.users = [NodeUser(node=SchedulerNode(name='op8'), can_inplace=True, is_weak=False)]
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf8.users = [NodeUser(node=SchedulerNode(name='op9'), can_inplace=True, is_weak=False)]
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf9.users = [NodeUser(node=SchedulerNode(name='op13'), can_inplace=True, is_weak=False)]
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf10.users = [NodeUser(node=SchedulerNode(name='op13'), can_inplace=True, is_weak=False)]
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf13.users = [NodeUser(node=SchedulerNode(name='op14'), can_inplace=True, is_weak=False)]
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf14.users = [NodeUser(node=SchedulerNode(name='op15'), can_inplace=True, is_weak=False)]
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf15.users = [NodeUser(node=SchedulerNode(name='op16'), can_inplace=True, is_weak=False)]
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf16.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=True, is_weak=False)]
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf17.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=True, is_weak=False)]
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf20.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False)]
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf21.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=True, is_weak=False)]
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf22.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False)]
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf23.users = [NodeUser(node=SchedulerNode(name='op27'), can_inplace=True, is_weak=False)]
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf24.users = [NodeUser(node=SchedulerNode(name='op27'), can_inplace=True, is_weak=False)]
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf27.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False)]
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf28.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=True, is_weak=False)]
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf29.users = [NodeUser(node=SchedulerNode(name='op30'), can_inplace=True, is_weak=False)]
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf30.users = [NodeUser(node=SchedulerNode(name='op34'), can_inplace=True, is_weak=False)]
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf31.users = [NodeUser(node=SchedulerNode(name='op34'), can_inplace=True, is_weak=False)]
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf34.users = [NodeUser(node=SchedulerNode(name='op35'), can_inplace=True, is_weak=False)]
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf35.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False)]
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf36.users = [NodeUser(node=SchedulerNode(name='op37'), can_inplace=True, is_weak=False)]
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf37.users = [NodeUser(node=SchedulerNode(name='op41'), can_inplace=True, is_weak=False)]
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf38.users = [NodeUser(node=SchedulerNode(name='op41'), can_inplace=True, is_weak=False)]
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf41.users = [NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False)]
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf42.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=True, is_weak=False)]
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf43.users = [NodeUser(node=SchedulerNode(name='op44'), can_inplace=True, is_weak=False)]
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf44.users = [NodeUser(node=SchedulerNode(name='op48'), can_inplace=True, is_weak=False)]
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf45.users = [NodeUser(node=SchedulerNode(name='op48'), can_inplace=True, is_weak=False)]
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf48.users = [NodeUser(node=SchedulerNode(name='op49'), can_inplace=True, is_weak=False)]
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf49.users = [NodeUser(node=SchedulerNode(name='op50'), can_inplace=True, is_weak=False)]
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf50.users = [NodeUser(node=SchedulerNode(name='op51'), can_inplace=True, is_weak=False)]
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf51.users = [NodeUser(node=SchedulerNode(name='op55'), can_inplace=True, is_weak=False)]
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf52.users = [NodeUser(node=SchedulerNode(name='op55'), can_inplace=True, is_weak=False)]
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf55.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=True, is_weak=False)]
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf56.users = [NodeUser(node=SchedulerNode(name='op57'), can_inplace=True, is_weak=False)]
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf57.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False)]
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf58.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=True, is_weak=False)]
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf59.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=True, is_weak=False)]
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf62.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=True, is_weak=False)]
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf63.users = [NodeUser(node=SchedulerNode(name='op64'), can_inplace=True, is_weak=False)]
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf64.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=True, is_weak=False)]
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf65.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False)]
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf66.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False)]
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf68.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[0] =
op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 100}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = 
    [   MemoryDep('full_default', c0, {c0: 100}, None),
        MemoryDep('tangents_1', 96, {}, None),
        MemoryDep('tangents_1', 97, {}, None),
        MemoryDep('tangents_1', 98, {}, None),
        MemoryDep('tangents_1', 99, {}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf0.users = [NodeUser(node=SchedulerNode(name='op1'), can_inplace=True, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (100, 1)
op0.sizes = ([100], [])
tangents_1_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
tangents_1_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
tangents_1_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
tangents_1_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op0_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 99
    index2 = 98
    index3 = 97
    index4 = 96
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(99, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('tangents_1', get_index_1)
        constant_1 = ops.constant(2.0, torch.float32)
        mul = ops.mul(load, constant_1)
        get_index_2 = self.get_index('index0')
        load_1 = ops.load('full_default', get_index_2)
        where = ops.where(eq, mul, load_1)
        get_index_3 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_3, torch.int32)
        constant_2 = ops.constant(98, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_2)
        constant_3 = ops.constant(98, torch.int32)
        constant_4 = ops.constant(99, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        get_index_4 = self.get_index('index2')
        load_2 = ops.load('tangents_1', get_index_4)
        constant_5 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_2, constant_5, load_2)
        constant_6 = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(where_1, constant_6)
        get_index_5 = self.get_index('index0')
        load_3 = ops.load('full_default', get_index_5)
        where_2 = ops.where(eq_1, mul_1, load_3)
        add = ops.add(where, where_2)
        get_index_6 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_6, torch.int32)
        constant_7 = ops.constant(97, torch.int32)
        eq_3 = ops.eq(index_expr_2, constant_7)
        constant_8 = ops.constant(97, torch.int32)
        constant_9 = ops.constant(98, torch.int32)
        eq_4 = ops.eq(constant_8, constant_9)
        constant_10 = ops.constant(97, torch.int32)
        constant_11 = ops.constant(99, torch.int32)
        eq_5 = ops.eq(constant_10, constant_11)
        get_index_7 = self.get_index('index3')
        load_4 = ops.load('tangents_1', get_index_7)
        constant_12 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_5, constant_12, load_4)
        constant_13 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_4, constant_13, where_3)
        constant_14 = ops.constant(2.0, torch.float32)
        mul_2 = ops.mul(where_4, constant_14)
        get_index_8 = self.get_index('index0')
        load_5 = ops.load('full_default', get_index_8)
        where_5 = ops.where(eq_3, mul_2, load_5)
        add_1 = ops.add(add, where_5)
        get_index_9 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_9, torch.int32)
        constant_15 = ops.constant(96, torch.int32)
        eq_6 = ops.eq(index_expr_3, constant_15)
        constant_16 = ops.constant(96, torch.int32)
        constant_17 = ops.constant(97, torch.int32)
        eq_7 = ops.eq(constant_16, constant_17)
        constant_18 = ops.constant(96, torch.int32)
        constant_19 = ops.constant(98, torch.int32)
        eq_8 = ops.eq(constant_18, constant_19)
        constant_20 = ops.constant(96, torch.int32)
        constant_21 = ops.constant(99, torch.int32)
        eq_9 = ops.eq(constant_20, constant_21)
        get_index_10 = self.get_index('index4')
        load_6 = ops.load('tangents_1', get_index_10)
        constant_22 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_9, constant_22, load_6)
        constant_23 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_8, constant_23, where_6)
        constant_24 = ops.constant(0.0, torch.float32)
        where_8 = ops.where(eq_7, constant_24, where_7)
        constant_25 = ops.constant(2.0, torch.float32)
        mul_3 = ops.mul(where_8, constant_25)
        get_index_11 = self.get_index('index0')
        load_7 = ops.load('full_default', get_index_11)
        where_9 = ops.where(eq_6, mul_3, load_7)
        add_2 = ops.add(add_1, where_9)
        get_index_12 = self.get_index('index0')
        store = ops.store('buf0', get_index_12, add_2, None)
        return store
op0 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp3 = tl.load(in_ptr0 + (99))
        tmp4 = tl.broadcast_to(tmp3, [XBLOCK])
        tmp7 = tl.load(in_ptr1 + (x0), xmask)
        tmp12 = tl.load(in_ptr0 + (98))
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK])
        tmp23 = tl.load(in_ptr0 + (97))
        tmp24 = tl.broadcast_to(tmp23, [XBLOCK])
        tmp35 = tl.load(in_ptr0 + (96))
        tmp36 = tl.broadcast_to(tmp35, [XBLOCK])
        tmp0 = x0
        tmp1 = tl.full([1], 99, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp5 = 2.0
        tmp6 = tmp4 * tmp5
        tmp8 = tl.where(tmp2, tmp6, tmp7)
        tmp9 = tl.full([1], 98, tl.int32)
        tmp10 = tmp0 == tmp9
        tmp11 = tmp9 == tmp1
        tmp14 = 0.0
        tmp15 = tl.where(tmp11, tmp14, tmp13)
        tmp16 = tmp15 * tmp5
        tmp17 = tl.where(tmp10, tmp16, tmp7)
        tmp18 = tmp8 + tmp17
        tmp19 = tl.full([1], 97, tl.int32)
        tmp20 = tmp0 == tmp19
        tmp21 = tmp19 == tmp9
        tmp22 = tmp19 == tmp1
        tmp25 = tl.where(tmp22, tmp14, tmp24)
        tmp26 = tl.where(tmp21, tmp14, tmp25)
        tmp27 = tmp26 * tmp5
        tmp28 = tl.where(tmp20, tmp27, tmp7)
        tmp29 = tmp18 + tmp28
        tmp30 = tl.full([1], 96, tl.int32)
        tmp31 = tmp0 == tmp30
        tmp32 = tmp30 == tmp19
        tmp33 = tmp30 == tmp9
        tmp34 = tmp30 == tmp1
        tmp37 = tl.where(tmp34, tmp14, tmp36)
        tmp38 = tl.where(tmp33, tmp14, tmp37)
        tmp39 = tl.where(tmp32, tmp14, tmp38)
        tmp40 = tmp39 * tmp5
        tmp41 = tl.where(tmp31, tmp40, tmp7)
        tmp42 = tmp29 + tmp41
        tl.store(out_ptr0 + (x0), tmp42, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[1] =
op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 100}, None)]
op1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 100}, None)]
op1.met_dependencies = 
    [   MemoryDep('full_default', c0, {c0: 100}, None),
        MemoryDep('tangents_1', 94, {}, None),
        MemoryDep('tangents_1', 95, {}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf1.users = [NodeUser(node=SchedulerNode(name='op2'), can_inplace=True, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (100, 1)
op1.sizes = ([100], [])
buf0_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
tangents_1_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
tangents_1_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op1_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 95
    index2 = 94
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_1, torch.int32)
        constant = ops.constant(95, torch.int32)
        eq = ops.eq(index_expr, constant)
        constant_1 = ops.constant(95, torch.int32)
        constant_2 = ops.constant(96, torch.int32)
        eq_1 = ops.eq(constant_1, constant_2)
        constant_3 = ops.constant(95, torch.int32)
        constant_4 = ops.constant(97, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        constant_5 = ops.constant(95, torch.int32)
        constant_6 = ops.constant(98, torch.int32)
        eq_3 = ops.eq(constant_5, constant_6)
        constant_7 = ops.constant(95, torch.int32)
        constant_8 = ops.constant(99, torch.int32)
        eq_4 = ops.eq(constant_7, constant_8)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('tangents_1', get_index_2)
        constant_9 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_4, constant_9, load_1)
        constant_10 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_3, constant_10, where)
        constant_11 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_2, constant_11, where_1)
        constant_12 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_1, constant_12, where_2)
        constant_13 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_3, constant_13)
        get_index_3 = self.get_index('index0')
        load_2 = ops.load('full_default', get_index_3)
        where_4 = ops.where(eq, mul, load_2)
        add = ops.add(load, where_4)
        get_index_4 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_4, torch.int32)
        constant_14 = ops.constant(94, torch.int32)
        eq_5 = ops.eq(index_expr_1, constant_14)
        constant_15 = ops.constant(94, torch.int32)
        constant_16 = ops.constant(95, torch.int32)
        eq_6 = ops.eq(constant_15, constant_16)
        constant_17 = ops.constant(94, torch.int32)
        constant_18 = ops.constant(96, torch.int32)
        eq_7 = ops.eq(constant_17, constant_18)
        constant_19 = ops.constant(94, torch.int32)
        constant_20 = ops.constant(97, torch.int32)
        eq_8 = ops.eq(constant_19, constant_20)
        constant_21 = ops.constant(94, torch.int32)
        constant_22 = ops.constant(98, torch.int32)
        eq_9 = ops.eq(constant_21, constant_22)
        constant_23 = ops.constant(94, torch.int32)
        constant_24 = ops.constant(99, torch.int32)
        eq_10 = ops.eq(constant_23, constant_24)
        get_index_5 = self.get_index('index2')
        load_3 = ops.load('tangents_1', get_index_5)
        constant_25 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_10, constant_25, load_3)
        constant_26 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_9, constant_26, where_5)
        constant_27 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_8, constant_27, where_6)
        constant_28 = ops.constant(0.0, torch.float32)
        where_8 = ops.where(eq_7, constant_28, where_7)
        constant_29 = ops.constant(0.0, torch.float32)
        where_9 = ops.where(eq_6, constant_29, where_8)
        constant_30 = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(where_9, constant_30)
        get_index_6 = self.get_index('index0')
        load_4 = ops.load('full_default', get_index_6)
        where_10 = ops.where(eq_5, mul_1, load_4)
        add_1 = ops.add(add, where_10)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf1', get_index_7, add_1, None)
        return store
op1 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp12 = tl.load(in_ptr0 + (95))
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK])
        tmp21 = tl.load(in_ptr1 + (x0), xmask)
        tmp31 = tl.load(in_ptr0 + (94))
        tmp32 = tl.broadcast_to(tmp31, [XBLOCK])
        tmp1 = x0
        tmp2 = tl.full([1], 95, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = tl.full([1], 96, tl.int32)
        tmp5 = tmp2 == tmp4
        tmp6 = tl.full([1], 97, tl.int32)
        tmp7 = tmp2 == tmp6
        tmp8 = tl.full([1], 98, tl.int32)
        tmp9 = tmp2 == tmp8
        tmp10 = tl.full([1], 99, tl.int32)
        tmp11 = tmp2 == tmp10
        tmp14 = 0.0
        tmp15 = tl.where(tmp11, tmp14, tmp13)
        tmp16 = tl.where(tmp9, tmp14, tmp15)
        tmp17 = tl.where(tmp7, tmp14, tmp16)
        tmp18 = tl.where(tmp5, tmp14, tmp17)
        tmp19 = 2.0
        tmp20 = tmp18 * tmp19
        tmp22 = tl.where(tmp3, tmp20, tmp21)
        tmp23 = tmp0 + tmp22
        tmp24 = tl.full([1], 94, tl.int32)
        tmp25 = tmp1 == tmp24
        tmp26 = tmp24 == tmp2
        tmp27 = tmp24 == tmp4
        tmp28 = tmp24 == tmp6
        tmp29 = tmp24 == tmp8
        tmp30 = tmp24 == tmp10
        tmp33 = tl.where(tmp30, tmp14, tmp32)
        tmp34 = tl.where(tmp29, tmp14, tmp33)
        tmp35 = tl.where(tmp28, tmp14, tmp34)
        tmp36 = tl.where(tmp27, tmp14, tmp35)
        tmp37 = tl.where(tmp26, tmp14, tmp36)
        tmp38 = tmp37 * tmp19
        tmp39 = tl.where(tmp25, tmp38, tmp21)
        tmp40 = tmp23 + tmp39
        tl.store(in_out_ptr0 + (x0), tmp40, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[2] =
op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', c0, {c0: 100}, None)]
op2.unmet_dependencies = [MemoryDep('buf1', c0, {c0: 100}, None)]
op2.met_dependencies = 
    [   MemoryDep('full_default', c0, {c0: 100}, None),
        MemoryDep('tangents_1', 92, {}, None),
        MemoryDep('tangents_1', 93, {}, None)]
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf2.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=True, is_weak=False)]
]
op2.group.device = cuda:0
op2.group.iteration = (100, 1)
op2.sizes = ([100], [])
buf1_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
tangents_1_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
tangents_1_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf2_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op2_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 93
    index2 = 92
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_1, torch.int32)
        constant = ops.constant(93, torch.int32)
        eq = ops.eq(index_expr, constant)
        constant_1 = ops.constant(93, torch.int32)
        constant_2 = ops.constant(94, torch.int32)
        eq_1 = ops.eq(constant_1, constant_2)
        constant_3 = ops.constant(93, torch.int32)
        constant_4 = ops.constant(95, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        constant_5 = ops.constant(93, torch.int32)
        constant_6 = ops.constant(96, torch.int32)
        eq_3 = ops.eq(constant_5, constant_6)
        constant_7 = ops.constant(93, torch.int32)
        constant_8 = ops.constant(97, torch.int32)
        eq_4 = ops.eq(constant_7, constant_8)
        constant_9 = ops.constant(93, torch.int32)
        constant_10 = ops.constant(98, torch.int32)
        eq_5 = ops.eq(constant_9, constant_10)
        constant_11 = ops.constant(93, torch.int32)
        constant_12 = ops.constant(99, torch.int32)
        eq_6 = ops.eq(constant_11, constant_12)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('tangents_1', get_index_2)
        constant_13 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_6, constant_13, load_1)
        constant_14 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_5, constant_14, where)
        constant_15 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_4, constant_15, where_1)
        constant_16 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_3, constant_16, where_2)
        constant_17 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_2, constant_17, where_3)
        constant_18 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_1, constant_18, where_4)
        constant_19 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_5, constant_19)
        get_index_3 = self.get_index('index0')
        load_2 = ops.load('full_default', get_index_3)
        where_6 = ops.where(eq, mul, load_2)
        add = ops.add(load, where_6)
        get_index_4 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_4, torch.int32)
        constant_20 = ops.constant(92, torch.int32)
        eq_7 = ops.eq(index_expr_1, constant_20)
        constant_21 = ops.constant(92, torch.int32)
        constant_22 = ops.constant(93, torch.int32)
        eq_8 = ops.eq(constant_21, constant_22)
        constant_23 = ops.constant(92, torch.int32)
        constant_24 = ops.constant(94, torch.int32)
        eq_9 = ops.eq(constant_23, constant_24)
        constant_25 = ops.constant(92, torch.int32)
        constant_26 = ops.constant(95, torch.int32)
        eq_10 = ops.eq(constant_25, constant_26)
        constant_27 = ops.constant(92, torch.int32)
        constant_28 = ops.constant(96, torch.int32)
        eq_11 = ops.eq(constant_27, constant_28)
        constant_29 = ops.constant(92, torch.int32)
        constant_30 = ops.constant(97, torch.int32)
        eq_12 = ops.eq(constant_29, constant_30)
        constant_31 = ops.constant(92, torch.int32)
        constant_32 = ops.constant(98, torch.int32)
        eq_13 = ops.eq(constant_31, constant_32)
        constant_33 = ops.constant(92, torch.int32)
        constant_34 = ops.constant(99, torch.int32)
        eq_14 = ops.eq(constant_33, constant_34)
        get_index_5 = self.get_index('index2')
        load_3 = ops.load('tangents_1', get_index_5)
        constant_35 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_14, constant_35, load_3)
        constant_36 = ops.constant(0.0, torch.float32)
        where_8 = ops.where(eq_13, constant_36, where_7)
        constant_37 = ops.constant(0.0, torch.float32)
        where_9 = ops.where(eq_12, constant_37, where_8)
        constant_38 = ops.constant(0.0, torch.float32)
        where_10 = ops.where(eq_11, constant_38, where_9)
        constant_39 = ops.constant(0.0, torch.float32)
        where_11 = ops.where(eq_10, constant_39, where_10)
        constant_40 = ops.constant(0.0, torch.float32)
        where_12 = ops.where(eq_9, constant_40, where_11)
        constant_41 = ops.constant(0.0, torch.float32)
        where_13 = ops.where(eq_8, constant_41, where_12)
        constant_42 = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(where_13, constant_42)
        get_index_6 = self.get_index('index0')
        load_4 = ops.load('full_default', get_index_6)
        where_14 = ops.where(eq_7, mul_1, load_4)
        add_1 = ops.add(add, where_14)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf2', get_index_7, add_1, None)
        return store
op2 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp16 = tl.load(in_ptr0 + (93))
        tmp17 = tl.broadcast_to(tmp16, [XBLOCK])
        tmp27 = tl.load(in_ptr1 + (x0), xmask)
        tmp39 = tl.load(in_ptr0 + (92))
        tmp40 = tl.broadcast_to(tmp39, [XBLOCK])
        tmp1 = x0
        tmp2 = tl.full([1], 93, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = tl.full([1], 94, tl.int32)
        tmp5 = tmp2 == tmp4
        tmp6 = tl.full([1], 95, tl.int32)
        tmp7 = tmp2 == tmp6
        tmp8 = tl.full([1], 96, tl.int32)
        tmp9 = tmp2 == tmp8
        tmp10 = tl.full([1], 97, tl.int32)
        tmp11 = tmp2 == tmp10
        tmp12 = tl.full([1], 98, tl.int32)
        tmp13 = tmp2 == tmp12
        tmp14 = tl.full([1], 99, tl.int32)
        tmp15 = tmp2 == tmp14
        tmp18 = 0.0
        tmp19 = tl.where(tmp15, tmp18, tmp17)
        tmp20 = tl.where(tmp13, tmp18, tmp19)
        tmp21 = tl.where(tmp11, tmp18, tmp20)
        tmp22 = tl.where(tmp9, tmp18, tmp21)
        tmp23 = tl.where(tmp7, tmp18, tmp22)
        tmp24 = tl.where(tmp5, tmp18, tmp23)
        tmp25 = 2.0
        tmp26 = tmp24 * tmp25
        tmp28 = tl.where(tmp3, tmp26, tmp27)
        tmp29 = tmp0 + tmp28
        tmp30 = tl.full([1], 92, tl.int32)
        tmp31 = tmp1 == tmp30
        tmp32 = tmp30 == tmp2
        tmp33 = tmp30 == tmp4
        tmp34 = tmp30 == tmp6
        tmp35 = tmp30 == tmp8
        tmp36 = tmp30 == tmp10
        tmp37 = tmp30 == tmp12
        tmp38 = tmp30 == tmp14
        tmp41 = tl.where(tmp38, tmp18, tmp40)
        tmp42 = tl.where(tmp37, tmp18, tmp41)
        tmp43 = tl.where(tmp36, tmp18, tmp42)
        tmp44 = tl.where(tmp35, tmp18, tmp43)
        tmp45 = tl.where(tmp34, tmp18, tmp44)
        tmp46 = tl.where(tmp33, tmp18, tmp45)
        tmp47 = tl.where(tmp32, tmp18, tmp46)
        tmp48 = tmp47 * tmp25
        tmp49 = tl.where(tmp31, tmp48, tmp27)
        tmp50 = tmp29 + tmp49
        tl.store(in_out_ptr0 + (x0), tmp50, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[3] =
op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 100}, None)]
op3.unmet_dependencies = []
op3.met_dependencies = 
    [   MemoryDep('full_default', c0, {c0: 100}, None),
        MemoryDep('tangents_1', 91, {}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf3.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=True, is_weak=False)]
]
op3.group.device = cuda:0
op3.group.iteration = (100, 1)
op3.sizes = ([100], [])
tangents_1_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op3_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 91
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(91, torch.int32)
        eq = ops.eq(index_expr, constant)
        constant_1 = ops.constant(91, torch.int32)
        constant_2 = ops.constant(92, torch.int32)
        eq_1 = ops.eq(constant_1, constant_2)
        constant_3 = ops.constant(91, torch.int32)
        constant_4 = ops.constant(93, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        constant_5 = ops.constant(91, torch.int32)
        constant_6 = ops.constant(94, torch.int32)
        eq_3 = ops.eq(constant_5, constant_6)
        constant_7 = ops.constant(91, torch.int32)
        constant_8 = ops.constant(95, torch.int32)
        eq_4 = ops.eq(constant_7, constant_8)
        constant_9 = ops.constant(91, torch.int32)
        constant_10 = ops.constant(96, torch.int32)
        eq_5 = ops.eq(constant_9, constant_10)
        constant_11 = ops.constant(91, torch.int32)
        constant_12 = ops.constant(97, torch.int32)
        eq_6 = ops.eq(constant_11, constant_12)
        constant_13 = ops.constant(91, torch.int32)
        constant_14 = ops.constant(98, torch.int32)
        eq_7 = ops.eq(constant_13, constant_14)
        constant_15 = ops.constant(91, torch.int32)
        constant_16 = ops.constant(99, torch.int32)
        eq_8 = ops.eq(constant_15, constant_16)
        get_index_1 = self.get_index('index1')
        load = ops.load('tangents_1', get_index_1)
        constant_17 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_8, constant_17, load)
        constant_18 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_7, constant_18, where)
        constant_19 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_6, constant_19, where_1)
        constant_20 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_5, constant_20, where_2)
        constant_21 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_4, constant_21, where_3)
        constant_22 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_3, constant_22, where_4)
        constant_23 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_2, constant_23, where_5)
        constant_24 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_1, constant_24, where_6)
        constant_25 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_7, constant_25)
        get_index_2 = self.get_index('index0')
        load_1 = ops.load('full_default', get_index_2)
        where_8 = ops.where(eq, mul, load_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf3', get_index_3, where_8, None)
        return store
op3 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp19 = tl.load(in_ptr0 + (91))
        tmp20 = tl.broadcast_to(tmp19, [XBLOCK])
        tmp32 = tl.load(in_ptr1 + (x0), xmask)
        tmp0 = x0
        tmp1 = tl.full([1], 91, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = tl.full([1], 92, tl.int32)
        tmp4 = tmp1 == tmp3
        tmp5 = tl.full([1], 93, tl.int32)
        tmp6 = tmp1 == tmp5
        tmp7 = tl.full([1], 94, tl.int32)
        tmp8 = tmp1 == tmp7
        tmp9 = tl.full([1], 95, tl.int32)
        tmp10 = tmp1 == tmp9
        tmp11 = tl.full([1], 96, tl.int32)
        tmp12 = tmp1 == tmp11
        tmp13 = tl.full([1], 97, tl.int32)
        tmp14 = tmp1 == tmp13
        tmp15 = tl.full([1], 98, tl.int32)
        tmp16 = tmp1 == tmp15
        tmp17 = tl.full([1], 99, tl.int32)
        tmp18 = tmp1 == tmp17
        tmp21 = 0.0
        tmp22 = tl.where(tmp18, tmp21, tmp20)
        tmp23 = tl.where(tmp16, tmp21, tmp22)
        tmp24 = tl.where(tmp14, tmp21, tmp23)
        tmp25 = tl.where(tmp12, tmp21, tmp24)
        tmp26 = tl.where(tmp10, tmp21, tmp25)
        tmp27 = tl.where(tmp8, tmp21, tmp26)
        tmp28 = tl.where(tmp6, tmp21, tmp27)
        tmp29 = tl.where(tmp4, tmp21, tmp28)
        tmp30 = 2.0
        tmp31 = tmp29 * tmp30
        tmp33 = tl.where(tmp2, tmp31, tmp32)
        tl.store(out_ptr0 + (x0), tmp33, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[4] =
op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', c0, {c0: 100}, None)]
op6.unmet_dependencies = 
    [   MemoryDep('buf2', c0, {c0: 100}, None),
        MemoryDep('buf3', c0, {c0: 100}, None),
        MemoryDep('buf4', 87, {}, None),
        MemoryDep('buf4', 88, {}, None),
        MemoryDep('buf4', 89, {}, None),
        MemoryDep('buf5', 0, {}, None)]
op6.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf6.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=True, is_weak=False)]
]
op6.group.device = cuda:0
op6.group.iteration = (100, 1)
op6.sizes = ([100], [])
buf2_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf5_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf6_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op6_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 0
    index2 = 89
    index3 = 88
    index4 = 87
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf3', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_2, torch.int32)
        constant = ops.constant(90, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_3 = self.get_index('index1')
        load_2 = ops.load('buf5', get_index_3)
        get_index_4 = self.get_index('index0')
        load_3 = ops.load('full_default', get_index_4)
        where = ops.where(eq, load_2, load_3)
        add_1 = ops.add(add, where)
        get_index_5 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_5, torch.int32)
        constant_1 = ops.constant(89, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_1)
        get_index_6 = self.get_index('index2')
        load_4 = ops.load('buf4', get_index_6)
        constant_2 = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_7 = self.get_index('index0')
        load_5 = ops.load('full_default', get_index_7)
        where_1 = ops.where(eq_1, mul, load_5)
        add_2 = ops.add(add_1, where_1)
        get_index_8 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_8, torch.int32)
        constant_3 = ops.constant(88, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_3)
        constant_4 = ops.constant(88, torch.int32)
        constant_5 = ops.constant(89, torch.int32)
        eq_3 = ops.eq(constant_4, constant_5)
        get_index_9 = self.get_index('index3')
        load_6 = ops.load('buf4', get_index_9)
        constant_6 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_3, constant_6, load_6)
        constant_7 = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(where_2, constant_7)
        get_index_10 = self.get_index('index0')
        load_7 = ops.load('full_default', get_index_10)
        where_3 = ops.where(eq_2, mul_1, load_7)
        add_3 = ops.add(add_2, where_3)
        get_index_11 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_11, torch.int32)
        constant_8 = ops.constant(87, torch.int32)
        eq_4 = ops.eq(index_expr_3, constant_8)
        constant_9 = ops.constant(87, torch.int32)
        constant_10 = ops.constant(88, torch.int32)
        eq_5 = ops.eq(constant_9, constant_10)
        constant_11 = ops.constant(87, torch.int32)
        constant_12 = ops.constant(89, torch.int32)
        eq_6 = ops.eq(constant_11, constant_12)
        get_index_12 = self.get_index('index4')
        load_8 = ops.load('buf4', get_index_12)
        constant_13 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_6, constant_13, load_8)
        constant_14 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_5, constant_14, where_4)
        constant_15 = ops.constant(2.0, torch.float32)
        mul_2 = ops.mul(where_5, constant_15)
        get_index_13 = self.get_index('index0')
        load_9 = ops.load('full_default', get_index_13)
        where_6 = ops.where(eq_4, mul_2, load_9)
        add_4 = ops.add(add_3, where_6)
        get_index_14 = self.get_index('index0')
        store = ops.store('buf6', get_index_14, add_4, None)
        return store
op6 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp1 = tl.load(in_ptr0 + (x0), xmask)
        tmp6 = tl.load(in_ptr1 + (0))
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK])
        tmp8 = tl.load(in_ptr2 + (x0), xmask)
        tmp13 = tl.load(in_ptr3 + (89))
        tmp14 = tl.broadcast_to(tmp13, [XBLOCK])
        tmp22 = tl.load(in_ptr3 + (88))
        tmp23 = tl.broadcast_to(tmp22, [XBLOCK])
        tmp33 = tl.load(in_ptr3 + (87))
        tmp34 = tl.broadcast_to(tmp33, [XBLOCK])
        tmp2 = tmp0 + tmp1
        tmp3 = x0
        tmp4 = tl.full([1], 90, tl.int32)
        tmp5 = tmp3 == tmp4
        tmp9 = tl.where(tmp5, tmp7, tmp8)
        tmp10 = tmp2 + tmp9
        tmp11 = tl.full([1], 89, tl.int32)
        tmp12 = tmp3 == tmp11
        tmp15 = 2.0
        tmp16 = tmp14 * tmp15
        tmp17 = tl.where(tmp12, tmp16, tmp8)
        tmp18 = tmp10 + tmp17
        tmp19 = tl.full([1], 88, tl.int32)
        tmp20 = tmp3 == tmp19
        tmp21 = tmp19 == tmp11
        tmp24 = 0.0
        tmp25 = tl.where(tmp21, tmp24, tmp23)
        tmp26 = tmp25 * tmp15
        tmp27 = tl.where(tmp20, tmp26, tmp8)
        tmp28 = tmp18 + tmp27
        tmp29 = tl.full([1], 87, tl.int32)
        tmp30 = tmp3 == tmp29
        tmp31 = tmp29 == tmp19
        tmp32 = tmp29 == tmp11
        tmp35 = tl.where(tmp32, tmp24, tmp34)
        tmp36 = tl.where(tmp31, tmp24, tmp35)
        tmp37 = tmp36 * tmp15
        tmp38 = tl.where(tmp30, tmp37, tmp8)
        tmp39 = tmp28 + tmp38
        tl.store(in_out_ptr0 + (x0), tmp39, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[5] =
op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 100}, None)]
op7.unmet_dependencies = 
    [   MemoryDep('buf4', 85, {}, None),
        MemoryDep('buf4', 86, {}, None),
        MemoryDep('buf6', c0, {c0: 100}, None)]
op7.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf7.users = [NodeUser(node=SchedulerNode(name='op8'), can_inplace=True, is_weak=False)]
]
op7.group.device = cuda:0
op7.group.iteration = (100, 1)
op7.sizes = ([100], [])
buf6_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op7_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 86
    index2 = 85
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_1, torch.int32)
        constant = ops.constant(86, torch.int32)
        eq = ops.eq(index_expr, constant)
        constant_1 = ops.constant(86, torch.int32)
        constant_2 = ops.constant(87, torch.int32)
        eq_1 = ops.eq(constant_1, constant_2)
        constant_3 = ops.constant(86, torch.int32)
        constant_4 = ops.constant(88, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        constant_5 = ops.constant(86, torch.int32)
        constant_6 = ops.constant(89, torch.int32)
        eq_3 = ops.eq(constant_5, constant_6)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf4', get_index_2)
        constant_7 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_3, constant_7, load_1)
        constant_8 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_2, constant_8, where)
        constant_9 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_1, constant_9, where_1)
        constant_10 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_2, constant_10)
        get_index_3 = self.get_index('index0')
        load_2 = ops.load('full_default', get_index_3)
        where_3 = ops.where(eq, mul, load_2)
        add = ops.add(load, where_3)
        get_index_4 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_4, torch.int32)
        constant_11 = ops.constant(85, torch.int32)
        eq_4 = ops.eq(index_expr_1, constant_11)
        constant_12 = ops.constant(85, torch.int32)
        constant_13 = ops.constant(86, torch.int32)
        eq_5 = ops.eq(constant_12, constant_13)
        constant_14 = ops.constant(85, torch.int32)
        constant_15 = ops.constant(87, torch.int32)
        eq_6 = ops.eq(constant_14, constant_15)
        constant_16 = ops.constant(85, torch.int32)
        constant_17 = ops.constant(88, torch.int32)
        eq_7 = ops.eq(constant_16, constant_17)
        constant_18 = ops.constant(85, torch.int32)
        constant_19 = ops.constant(89, torch.int32)
        eq_8 = ops.eq(constant_18, constant_19)
        get_index_5 = self.get_index('index2')
        load_3 = ops.load('buf4', get_index_5)
        constant_20 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_8, constant_20, load_3)
        constant_21 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_7, constant_21, where_4)
        constant_22 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_6, constant_22, where_5)
        constant_23 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_5, constant_23, where_6)
        constant_24 = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(where_7, constant_24)
        get_index_6 = self.get_index('index0')
        load_4 = ops.load('full_default', get_index_6)
        where_8 = ops.where(eq_4, mul_1, load_4)
        add_1 = ops.add(add, where_8)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf7', get_index_7, add_1, None)
        return store
op7 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp10 = tl.load(in_ptr0 + (86))
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK])
        tmp18 = tl.load(in_ptr1 + (x0), xmask)
        tmp27 = tl.load(in_ptr0 + (85))
        tmp28 = tl.broadcast_to(tmp27, [XBLOCK])
        tmp1 = x0
        tmp2 = tl.full([1], 86, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = tl.full([1], 87, tl.int32)
        tmp5 = tmp2 == tmp4
        tmp6 = tl.full([1], 88, tl.int32)
        tmp7 = tmp2 == tmp6
        tmp8 = tl.full([1], 89, tl.int32)
        tmp9 = tmp2 == tmp8
        tmp12 = 0.0
        tmp13 = tl.where(tmp9, tmp12, tmp11)
        tmp14 = tl.where(tmp7, tmp12, tmp13)
        tmp15 = tl.where(tmp5, tmp12, tmp14)
        tmp16 = 2.0
        tmp17 = tmp15 * tmp16
        tmp19 = tl.where(tmp3, tmp17, tmp18)
        tmp20 = tmp0 + tmp19
        tmp21 = tl.full([1], 85, tl.int32)
        tmp22 = tmp1 == tmp21
        tmp23 = tmp21 == tmp2
        tmp24 = tmp21 == tmp4
        tmp25 = tmp21 == tmp6
        tmp26 = tmp21 == tmp8
        tmp29 = tl.where(tmp26, tmp12, tmp28)
        tmp30 = tl.where(tmp25, tmp12, tmp29)
        tmp31 = tl.where(tmp24, tmp12, tmp30)
        tmp32 = tl.where(tmp23, tmp12, tmp31)
        tmp33 = tmp32 * tmp16
        tmp34 = tl.where(tmp22, tmp33, tmp18)
        tmp35 = tmp20 + tmp34
        tl.store(in_out_ptr0 + (x0), tmp35, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[6] =
op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: 100}, None)]
op8.unmet_dependencies = 
    [   MemoryDep('buf4', 83, {}, None),
        MemoryDep('buf4', 84, {}, None),
        MemoryDep('buf7', c0, {c0: 100}, None)]
op8.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf8.users = [NodeUser(node=SchedulerNode(name='op9'), can_inplace=True, is_weak=False)]
]
op8.group.device = cuda:0
op8.group.iteration = (100, 1)
op8.sizes = ([100], [])
buf7_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf8_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op8_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 84
    index2 = 83
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_1, torch.int32)
        constant = ops.constant(84, torch.int32)
        eq = ops.eq(index_expr, constant)
        constant_1 = ops.constant(84, torch.int32)
        constant_2 = ops.constant(85, torch.int32)
        eq_1 = ops.eq(constant_1, constant_2)
        constant_3 = ops.constant(84, torch.int32)
        constant_4 = ops.constant(86, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        constant_5 = ops.constant(84, torch.int32)
        constant_6 = ops.constant(87, torch.int32)
        eq_3 = ops.eq(constant_5, constant_6)
        constant_7 = ops.constant(84, torch.int32)
        constant_8 = ops.constant(88, torch.int32)
        eq_4 = ops.eq(constant_7, constant_8)
        constant_9 = ops.constant(84, torch.int32)
        constant_10 = ops.constant(89, torch.int32)
        eq_5 = ops.eq(constant_9, constant_10)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf4', get_index_2)
        constant_11 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_5, constant_11, load_1)
        constant_12 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_4, constant_12, where)
        constant_13 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_3, constant_13, where_1)
        constant_14 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_2, constant_14, where_2)
        constant_15 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_1, constant_15, where_3)
        constant_16 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_4, constant_16)
        get_index_3 = self.get_index('index0')
        load_2 = ops.load('full_default', get_index_3)
        where_5 = ops.where(eq, mul, load_2)
        add = ops.add(load, where_5)
        get_index_4 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_4, torch.int32)
        constant_17 = ops.constant(83, torch.int32)
        eq_6 = ops.eq(index_expr_1, constant_17)
        constant_18 = ops.constant(83, torch.int32)
        constant_19 = ops.constant(84, torch.int32)
        eq_7 = ops.eq(constant_18, constant_19)
        constant_20 = ops.constant(83, torch.int32)
        constant_21 = ops.constant(85, torch.int32)
        eq_8 = ops.eq(constant_20, constant_21)
        constant_22 = ops.constant(83, torch.int32)
        constant_23 = ops.constant(86, torch.int32)
        eq_9 = ops.eq(constant_22, constant_23)
        constant_24 = ops.constant(83, torch.int32)
        constant_25 = ops.constant(87, torch.int32)
        eq_10 = ops.eq(constant_24, constant_25)
        constant_26 = ops.constant(83, torch.int32)
        constant_27 = ops.constant(88, torch.int32)
        eq_11 = ops.eq(constant_26, constant_27)
        constant_28 = ops.constant(83, torch.int32)
        constant_29 = ops.constant(89, torch.int32)
        eq_12 = ops.eq(constant_28, constant_29)
        get_index_5 = self.get_index('index2')
        load_3 = ops.load('buf4', get_index_5)
        constant_30 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_12, constant_30, load_3)
        constant_31 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_11, constant_31, where_6)
        constant_32 = ops.constant(0.0, torch.float32)
        where_8 = ops.where(eq_10, constant_32, where_7)
        constant_33 = ops.constant(0.0, torch.float32)
        where_9 = ops.where(eq_9, constant_33, where_8)
        constant_34 = ops.constant(0.0, torch.float32)
        where_10 = ops.where(eq_8, constant_34, where_9)
        constant_35 = ops.constant(0.0, torch.float32)
        where_11 = ops.where(eq_7, constant_35, where_10)
        constant_36 = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(where_11, constant_36)
        get_index_6 = self.get_index('index0')
        load_4 = ops.load('full_default', get_index_6)
        where_12 = ops.where(eq_6, mul_1, load_4)
        add_1 = ops.add(add, where_12)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf8', get_index_7, add_1, None)
        return store
op8 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp14 = tl.load(in_ptr0 + (84))
        tmp15 = tl.broadcast_to(tmp14, [XBLOCK])
        tmp24 = tl.load(in_ptr1 + (x0), xmask)
        tmp35 = tl.load(in_ptr0 + (83))
        tmp36 = tl.broadcast_to(tmp35, [XBLOCK])
        tmp1 = x0
        tmp2 = tl.full([1], 84, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = tl.full([1], 85, tl.int32)
        tmp5 = tmp2 == tmp4
        tmp6 = tl.full([1], 86, tl.int32)
        tmp7 = tmp2 == tmp6
        tmp8 = tl.full([1], 87, tl.int32)
        tmp9 = tmp2 == tmp8
        tmp10 = tl.full([1], 88, tl.int32)
        tmp11 = tmp2 == tmp10
        tmp12 = tl.full([1], 89, tl.int32)
        tmp13 = tmp2 == tmp12
        tmp16 = 0.0
        tmp17 = tl.where(tmp13, tmp16, tmp15)
        tmp18 = tl.where(tmp11, tmp16, tmp17)
        tmp19 = tl.where(tmp9, tmp16, tmp18)
        tmp20 = tl.where(tmp7, tmp16, tmp19)
        tmp21 = tl.where(tmp5, tmp16, tmp20)
        tmp22 = 2.0
        tmp23 = tmp21 * tmp22
        tmp25 = tl.where(tmp3, tmp23, tmp24)
        tmp26 = tmp0 + tmp25
        tmp27 = tl.full([1], 83, tl.int32)
        tmp28 = tmp1 == tmp27
        tmp29 = tmp27 == tmp2
        tmp30 = tmp27 == tmp4
        tmp31 = tmp27 == tmp6
        tmp32 = tmp27 == tmp8
        tmp33 = tmp27 == tmp10
        tmp34 = tmp27 == tmp12
        tmp37 = tl.where(tmp34, tmp16, tmp36)
        tmp38 = tl.where(tmp33, tmp16, tmp37)
        tmp39 = tl.where(tmp32, tmp16, tmp38)
        tmp40 = tl.where(tmp31, tmp16, tmp39)
        tmp41 = tl.where(tmp30, tmp16, tmp40)
        tmp42 = tl.where(tmp29, tmp16, tmp41)
        tmp43 = tmp42 * tmp22
        tmp44 = tl.where(tmp28, tmp43, tmp24)
        tmp45 = tmp26 + tmp44
        tl.store(in_out_ptr0 + (x0), tmp45, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[7] =
op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 100}, None)]
op9.unmet_dependencies = [MemoryDep('buf4', 82, {}, None), MemoryDep('buf8', c0, {c0: 100}, None)]
op9.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf9.users = [NodeUser(node=SchedulerNode(name='op13'), can_inplace=True, is_weak=False)]
]
op9.group.device = cuda:0
op9.group.iteration = (100, 1)
op9.sizes = ([100], [])
buf8_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op9_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 82
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_1, torch.int32)
        constant = ops.constant(82, torch.int32)
        eq = ops.eq(index_expr, constant)
        constant_1 = ops.constant(82, torch.int32)
        constant_2 = ops.constant(83, torch.int32)
        eq_1 = ops.eq(constant_1, constant_2)
        constant_3 = ops.constant(82, torch.int32)
        constant_4 = ops.constant(84, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        constant_5 = ops.constant(82, torch.int32)
        constant_6 = ops.constant(85, torch.int32)
        eq_3 = ops.eq(constant_5, constant_6)
        constant_7 = ops.constant(82, torch.int32)
        constant_8 = ops.constant(86, torch.int32)
        eq_4 = ops.eq(constant_7, constant_8)
        constant_9 = ops.constant(82, torch.int32)
        constant_10 = ops.constant(87, torch.int32)
        eq_5 = ops.eq(constant_9, constant_10)
        constant_11 = ops.constant(82, torch.int32)
        constant_12 = ops.constant(88, torch.int32)
        eq_6 = ops.eq(constant_11, constant_12)
        constant_13 = ops.constant(82, torch.int32)
        constant_14 = ops.constant(89, torch.int32)
        eq_7 = ops.eq(constant_13, constant_14)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf4', get_index_2)
        constant_15 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_7, constant_15, load_1)
        constant_16 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_6, constant_16, where)
        constant_17 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_5, constant_17, where_1)
        constant_18 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_4, constant_18, where_2)
        constant_19 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_3, constant_19, where_3)
        constant_20 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_2, constant_20, where_4)
        constant_21 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_1, constant_21, where_5)
        constant_22 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_6, constant_22)
        get_index_3 = self.get_index('index0')
        load_2 = ops.load('full_default', get_index_3)
        where_7 = ops.where(eq, mul, load_2)
        add = ops.add(load, where_7)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf9', get_index_4, add, None)
        return store
op9 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp18 = tl.load(in_ptr0 + (82))
        tmp19 = tl.broadcast_to(tmp18, [XBLOCK])
        tmp30 = tl.load(in_ptr1 + (x0), xmask)
        tmp1 = x0
        tmp2 = tl.full([1], 82, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = tl.full([1], 83, tl.int32)
        tmp5 = tmp2 == tmp4
        tmp6 = tl.full([1], 84, tl.int32)
        tmp7 = tmp2 == tmp6
        tmp8 = tl.full([1], 85, tl.int32)
        tmp9 = tmp2 == tmp8
        tmp10 = tl.full([1], 86, tl.int32)
        tmp11 = tmp2 == tmp10
        tmp12 = tl.full([1], 87, tl.int32)
        tmp13 = tmp2 == tmp12
        tmp14 = tl.full([1], 88, tl.int32)
        tmp15 = tmp2 == tmp14
        tmp16 = tl.full([1], 89, tl.int32)
        tmp17 = tmp2 == tmp16
        tmp20 = 0.0
        tmp21 = tl.where(tmp17, tmp20, tmp19)
        tmp22 = tl.where(tmp15, tmp20, tmp21)
        tmp23 = tl.where(tmp13, tmp20, tmp22)
        tmp24 = tl.where(tmp11, tmp20, tmp23)
        tmp25 = tl.where(tmp9, tmp20, tmp24)
        tmp26 = tl.where(tmp7, tmp20, tmp25)
        tmp27 = tl.where(tmp5, tmp20, tmp26)
        tmp28 = 2.0
        tmp29 = tmp27 * tmp28
        tmp31 = tl.where(tmp3, tmp29, tmp30)
        tmp32 = tmp0 + tmp31
        tl.store(in_out_ptr0 + (x0), tmp32, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[8] =
op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', c0, {c0: 100}, None)]
op10.unmet_dependencies = [MemoryDep('buf4', 81, {}, None)]
op10.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf10.users = [NodeUser(node=SchedulerNode(name='op13'), can_inplace=True, is_weak=False)]
]
op10.group.device = cuda:0
op10.group.iteration = (100, 1)
op10.sizes = ([100], [])
buf4_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf10_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op10_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 81
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(81, torch.int32)
        eq = ops.eq(index_expr, constant)
        constant_1 = ops.constant(81, torch.int32)
        constant_2 = ops.constant(82, torch.int32)
        eq_1 = ops.eq(constant_1, constant_2)
        constant_3 = ops.constant(81, torch.int32)
        constant_4 = ops.constant(83, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        constant_5 = ops.constant(81, torch.int32)
        constant_6 = ops.constant(84, torch.int32)
        eq_3 = ops.eq(constant_5, constant_6)
        constant_7 = ops.constant(81, torch.int32)
        constant_8 = ops.constant(85, torch.int32)
        eq_4 = ops.eq(constant_7, constant_8)
        constant_9 = ops.constant(81, torch.int32)
        constant_10 = ops.constant(86, torch.int32)
        eq_5 = ops.eq(constant_9, constant_10)
        constant_11 = ops.constant(81, torch.int32)
        constant_12 = ops.constant(87, torch.int32)
        eq_6 = ops.eq(constant_11, constant_12)
        constant_13 = ops.constant(81, torch.int32)
        constant_14 = ops.constant(88, torch.int32)
        eq_7 = ops.eq(constant_13, constant_14)
        constant_15 = ops.constant(81, torch.int32)
        constant_16 = ops.constant(89, torch.int32)
        eq_8 = ops.eq(constant_15, constant_16)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf4', get_index_1)
        constant_17 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_8, constant_17, load)
        constant_18 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_7, constant_18, where)
        constant_19 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_6, constant_19, where_1)
        constant_20 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_5, constant_20, where_2)
        constant_21 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_4, constant_21, where_3)
        constant_22 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_3, constant_22, where_4)
        constant_23 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_2, constant_23, where_5)
        constant_24 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_1, constant_24, where_6)
        constant_25 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_7, constant_25)
        get_index_2 = self.get_index('index0')
        load_1 = ops.load('full_default', get_index_2)
        where_8 = ops.where(eq, mul, load_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf10', get_index_3, where_8, None)
        return store
op10 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp19 = tl.load(in_ptr0 + (81))
        tmp20 = tl.broadcast_to(tmp19, [XBLOCK])
        tmp32 = tl.load(in_ptr1 + (x0), xmask)
        tmp0 = x0
        tmp1 = tl.full([1], 81, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = tl.full([1], 82, tl.int32)
        tmp4 = tmp1 == tmp3
        tmp5 = tl.full([1], 83, tl.int32)
        tmp6 = tmp1 == tmp5
        tmp7 = tl.full([1], 84, tl.int32)
        tmp8 = tmp1 == tmp7
        tmp9 = tl.full([1], 85, tl.int32)
        tmp10 = tmp1 == tmp9
        tmp11 = tl.full([1], 86, tl.int32)
        tmp12 = tmp1 == tmp11
        tmp13 = tl.full([1], 87, tl.int32)
        tmp14 = tmp1 == tmp13
        tmp15 = tl.full([1], 88, tl.int32)
        tmp16 = tmp1 == tmp15
        tmp17 = tl.full([1], 89, tl.int32)
        tmp18 = tmp1 == tmp17
        tmp21 = 0.0
        tmp22 = tl.where(tmp18, tmp21, tmp20)
        tmp23 = tl.where(tmp16, tmp21, tmp22)
        tmp24 = tl.where(tmp14, tmp21, tmp23)
        tmp25 = tl.where(tmp12, tmp21, tmp24)
        tmp26 = tl.where(tmp10, tmp21, tmp25)
        tmp27 = tl.where(tmp8, tmp21, tmp26)
        tmp28 = tl.where(tmp6, tmp21, tmp27)
        tmp29 = tl.where(tmp4, tmp21, tmp28)
        tmp30 = 2.0
        tmp31 = tmp29 * tmp30
        tmp33 = tl.where(tmp2, tmp31, tmp32)
        tl.store(out_ptr0 + (x0), tmp33, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[9] =
op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', c0, {c0: 100}, None)]
op13.unmet_dependencies = 
    [   MemoryDep('buf10', c0, {c0: 100}, None),
        MemoryDep('buf11', 77, {}, None),
        MemoryDep('buf11', 78, {}, None),
        MemoryDep('buf11', 79, {}, None),
        MemoryDep('buf12', 0, {}, None),
        MemoryDep('buf9', c0, {c0: 100}, None)]
op13.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf13.users = [NodeUser(node=SchedulerNode(name='op14'), can_inplace=True, is_weak=False)]
]
op13.group.device = cuda:0
op13.group.iteration = (100, 1)
op13.sizes = ([100], [])
buf9_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf10_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf11_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf11_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf11_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op13_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 0
    index2 = 79
    index3 = 78
    index4 = 77
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf9', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf10', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_2, torch.int32)
        constant = ops.constant(80, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_3 = self.get_index('index1')
        load_2 = ops.load('buf12', get_index_3)
        get_index_4 = self.get_index('index0')
        load_3 = ops.load('full_default', get_index_4)
        where = ops.where(eq, load_2, load_3)
        add_1 = ops.add(add, where)
        get_index_5 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_5, torch.int32)
        constant_1 = ops.constant(79, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_1)
        get_index_6 = self.get_index('index2')
        load_4 = ops.load('buf11', get_index_6)
        constant_2 = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_7 = self.get_index('index0')
        load_5 = ops.load('full_default', get_index_7)
        where_1 = ops.where(eq_1, mul, load_5)
        add_2 = ops.add(add_1, where_1)
        get_index_8 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_8, torch.int32)
        constant_3 = ops.constant(78, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_3)
        constant_4 = ops.constant(78, torch.int32)
        constant_5 = ops.constant(79, torch.int32)
        eq_3 = ops.eq(constant_4, constant_5)
        get_index_9 = self.get_index('index3')
        load_6 = ops.load('buf11', get_index_9)
        constant_6 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_3, constant_6, load_6)
        constant_7 = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(where_2, constant_7)
        get_index_10 = self.get_index('index0')
        load_7 = ops.load('full_default', get_index_10)
        where_3 = ops.where(eq_2, mul_1, load_7)
        add_3 = ops.add(add_2, where_3)
        get_index_11 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_11, torch.int32)
        constant_8 = ops.constant(77, torch.int32)
        eq_4 = ops.eq(index_expr_3, constant_8)
        constant_9 = ops.constant(77, torch.int32)
        constant_10 = ops.constant(78, torch.int32)
        eq_5 = ops.eq(constant_9, constant_10)
        constant_11 = ops.constant(77, torch.int32)
        constant_12 = ops.constant(79, torch.int32)
        eq_6 = ops.eq(constant_11, constant_12)
        get_index_12 = self.get_index('index4')
        load_8 = ops.load('buf11', get_index_12)
        constant_13 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_6, constant_13, load_8)
        constant_14 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_5, constant_14, where_4)
        constant_15 = ops.constant(2.0, torch.float32)
        mul_2 = ops.mul(where_5, constant_15)
        get_index_13 = self.get_index('index0')
        load_9 = ops.load('full_default', get_index_13)
        where_6 = ops.where(eq_4, mul_2, load_9)
        add_4 = ops.add(add_3, where_6)
        get_index_14 = self.get_index('index0')
        store = ops.store('buf13', get_index_14, add_4, None)
        return store
op13 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), xmask)
        tmp1 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp6 = tl.load(in_ptr1 + (0))
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK])
        tmp8 = tl.load(in_ptr2 + (x0), xmask)
        tmp13 = tl.load(in_ptr3 + (79))
        tmp14 = tl.broadcast_to(tmp13, [XBLOCK])
        tmp22 = tl.load(in_ptr3 + (78))
        tmp23 = tl.broadcast_to(tmp22, [XBLOCK])
        tmp33 = tl.load(in_ptr3 + (77))
        tmp34 = tl.broadcast_to(tmp33, [XBLOCK])
        tmp2 = tmp0 + tmp1
        tmp3 = x0
        tmp4 = tl.full([1], 80, tl.int32)
        tmp5 = tmp3 == tmp4
        tmp9 = tl.where(tmp5, tmp7, tmp8)
        tmp10 = tmp2 + tmp9
        tmp11 = tl.full([1], 79, tl.int32)
        tmp12 = tmp3 == tmp11
        tmp15 = 2.0
        tmp16 = tmp14 * tmp15
        tmp17 = tl.where(tmp12, tmp16, tmp8)
        tmp18 = tmp10 + tmp17
        tmp19 = tl.full([1], 78, tl.int32)
        tmp20 = tmp3 == tmp19
        tmp21 = tmp19 == tmp11
        tmp24 = 0.0
        tmp25 = tl.where(tmp21, tmp24, tmp23)
        tmp26 = tmp25 * tmp15
        tmp27 = tl.where(tmp20, tmp26, tmp8)
        tmp28 = tmp18 + tmp27
        tmp29 = tl.full([1], 77, tl.int32)
        tmp30 = tmp3 == tmp29
        tmp31 = tmp29 == tmp19
        tmp32 = tmp29 == tmp11
        tmp35 = tl.where(tmp32, tmp24, tmp34)
        tmp36 = tl.where(tmp31, tmp24, tmp35)
        tmp37 = tmp36 * tmp15
        tmp38 = tl.where(tmp30, tmp37, tmp8)
        tmp39 = tmp28 + tmp38
        tl.store(in_out_ptr0 + (x0), tmp39, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[10] =
op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', c0, {c0: 100}, None)]
op14.unmet_dependencies = 
    [   MemoryDep('buf11', 75, {}, None),
        MemoryDep('buf11', 76, {}, None),
        MemoryDep('buf13', c0, {c0: 100}, None)]
op14.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf14.users = [NodeUser(node=SchedulerNode(name='op15'), can_inplace=True, is_weak=False)]
]
op14.group.device = cuda:0
op14.group.iteration = (100, 1)
op14.sizes = ([100], [])
buf13_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf11_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf11_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op14_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 76
    index2 = 75
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_1, torch.int32)
        constant = ops.constant(76, torch.int32)
        eq = ops.eq(index_expr, constant)
        constant_1 = ops.constant(76, torch.int32)
        constant_2 = ops.constant(77, torch.int32)
        eq_1 = ops.eq(constant_1, constant_2)
        constant_3 = ops.constant(76, torch.int32)
        constant_4 = ops.constant(78, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        constant_5 = ops.constant(76, torch.int32)
        constant_6 = ops.constant(79, torch.int32)
        eq_3 = ops.eq(constant_5, constant_6)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf11', get_index_2)
        constant_7 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_3, constant_7, load_1)
        constant_8 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_2, constant_8, where)
        constant_9 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_1, constant_9, where_1)
        constant_10 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_2, constant_10)
        get_index_3 = self.get_index('index0')
        load_2 = ops.load('full_default', get_index_3)
        where_3 = ops.where(eq, mul, load_2)
        add = ops.add(load, where_3)
        get_index_4 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_4, torch.int32)
        constant_11 = ops.constant(75, torch.int32)
        eq_4 = ops.eq(index_expr_1, constant_11)
        constant_12 = ops.constant(75, torch.int32)
        constant_13 = ops.constant(76, torch.int32)
        eq_5 = ops.eq(constant_12, constant_13)
        constant_14 = ops.constant(75, torch.int32)
        constant_15 = ops.constant(77, torch.int32)
        eq_6 = ops.eq(constant_14, constant_15)
        constant_16 = ops.constant(75, torch.int32)
        constant_17 = ops.constant(78, torch.int32)
        eq_7 = ops.eq(constant_16, constant_17)
        constant_18 = ops.constant(75, torch.int32)
        constant_19 = ops.constant(79, torch.int32)
        eq_8 = ops.eq(constant_18, constant_19)
        get_index_5 = self.get_index('index2')
        load_3 = ops.load('buf11', get_index_5)
        constant_20 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_8, constant_20, load_3)
        constant_21 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_7, constant_21, where_4)
        constant_22 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_6, constant_22, where_5)
        constant_23 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_5, constant_23, where_6)
        constant_24 = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(where_7, constant_24)
        get_index_6 = self.get_index('index0')
        load_4 = ops.load('full_default', get_index_6)
        where_8 = ops.where(eq_4, mul_1, load_4)
        add_1 = ops.add(add, where_8)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf14', get_index_7, add_1, None)
        return store
op14 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp10 = tl.load(in_ptr0 + (76))
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK])
        tmp18 = tl.load(in_ptr1 + (x0), xmask)
        tmp27 = tl.load(in_ptr0 + (75))
        tmp28 = tl.broadcast_to(tmp27, [XBLOCK])
        tmp1 = x0
        tmp2 = tl.full([1], 76, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = tl.full([1], 77, tl.int32)
        tmp5 = tmp2 == tmp4
        tmp6 = tl.full([1], 78, tl.int32)
        tmp7 = tmp2 == tmp6
        tmp8 = tl.full([1], 79, tl.int32)
        tmp9 = tmp2 == tmp8
        tmp12 = 0.0
        tmp13 = tl.where(tmp9, tmp12, tmp11)
        tmp14 = tl.where(tmp7, tmp12, tmp13)
        tmp15 = tl.where(tmp5, tmp12, tmp14)
        tmp16 = 2.0
        tmp17 = tmp15 * tmp16
        tmp19 = tl.where(tmp3, tmp17, tmp18)
        tmp20 = tmp0 + tmp19
        tmp21 = tl.full([1], 75, tl.int32)
        tmp22 = tmp1 == tmp21
        tmp23 = tmp21 == tmp2
        tmp24 = tmp21 == tmp4
        tmp25 = tmp21 == tmp6
        tmp26 = tmp21 == tmp8
        tmp29 = tl.where(tmp26, tmp12, tmp28)
        tmp30 = tl.where(tmp25, tmp12, tmp29)
        tmp31 = tl.where(tmp24, tmp12, tmp30)
        tmp32 = tl.where(tmp23, tmp12, tmp31)
        tmp33 = tmp32 * tmp16
        tmp34 = tl.where(tmp22, tmp33, tmp18)
        tmp35 = tmp20 + tmp34
        tl.store(in_out_ptr0 + (x0), tmp35, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[11] =
op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', c0, {c0: 100}, None)]
op15.unmet_dependencies = 
    [   MemoryDep('buf11', 73, {}, None),
        MemoryDep('buf11', 74, {}, None),
        MemoryDep('buf14', c0, {c0: 100}, None)]
op15.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf15.users = [NodeUser(node=SchedulerNode(name='op16'), can_inplace=True, is_weak=False)]
]
op15.group.device = cuda:0
op15.group.iteration = (100, 1)
op15.sizes = ([100], [])
buf14_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf11_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf11_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op15_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 74
    index2 = 73
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf14', get_index)
        get_index_1 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_1, torch.int32)
        constant = ops.constant(74, torch.int32)
        eq = ops.eq(index_expr, constant)
        constant_1 = ops.constant(74, torch.int32)
        constant_2 = ops.constant(75, torch.int32)
        eq_1 = ops.eq(constant_1, constant_2)
        constant_3 = ops.constant(74, torch.int32)
        constant_4 = ops.constant(76, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        constant_5 = ops.constant(74, torch.int32)
        constant_6 = ops.constant(77, torch.int32)
        eq_3 = ops.eq(constant_5, constant_6)
        constant_7 = ops.constant(74, torch.int32)
        constant_8 = ops.constant(78, torch.int32)
        eq_4 = ops.eq(constant_7, constant_8)
        constant_9 = ops.constant(74, torch.int32)
        constant_10 = ops.constant(79, torch.int32)
        eq_5 = ops.eq(constant_9, constant_10)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf11', get_index_2)
        constant_11 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_5, constant_11, load_1)
        constant_12 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_4, constant_12, where)
        constant_13 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_3, constant_13, where_1)
        constant_14 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_2, constant_14, where_2)
        constant_15 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_1, constant_15, where_3)
        constant_16 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_4, constant_16)
        get_index_3 = self.get_index('index0')
        load_2 = ops.load('full_default', get_index_3)
        where_5 = ops.where(eq, mul, load_2)
        add = ops.add(load, where_5)
        get_index_4 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_4, torch.int32)
        constant_17 = ops.constant(73, torch.int32)
        eq_6 = ops.eq(index_expr_1, constant_17)
        constant_18 = ops.constant(73, torch.int32)
        constant_19 = ops.constant(74, torch.int32)
        eq_7 = ops.eq(constant_18, constant_19)
        constant_20 = ops.constant(73, torch.int32)
        constant_21 = ops.constant(75, torch.int32)
        eq_8 = ops.eq(constant_20, constant_21)
        constant_22 = ops.constant(73, torch.int32)
        constant_23 = ops.constant(76, torch.int32)
        eq_9 = ops.eq(constant_22, constant_23)
        constant_24 = ops.constant(73, torch.int32)
        constant_25 = ops.constant(77, torch.int32)
        eq_10 = ops.eq(constant_24, constant_25)
        constant_26 = ops.constant(73, torch.int32)
        constant_27 = ops.constant(78, torch.int32)
        eq_11 = ops.eq(constant_26, constant_27)
        constant_28 = ops.constant(73, torch.int32)
        constant_29 = ops.constant(79, torch.int32)
        eq_12 = ops.eq(constant_28, constant_29)
        get_index_5 = self.get_index('index2')
        load_3 = ops.load('buf11', get_index_5)
        constant_30 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_12, constant_30, load_3)
        constant_31 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_11, constant_31, where_6)
        constant_32 = ops.constant(0.0, torch.float32)
        where_8 = ops.where(eq_10, constant_32, where_7)
        constant_33 = ops.constant(0.0, torch.float32)
        where_9 = ops.where(eq_9, constant_33, where_8)
        constant_34 = ops.constant(0.0, torch.float32)
        where_10 = ops.where(eq_8, constant_34, where_9)
        constant_35 = ops.constant(0.0, torch.float32)
        where_11 = ops.where(eq_7, constant_35, where_10)
        constant_36 = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(where_11, constant_36)
        get_index_6 = self.get_index('index0')
        load_4 = ops.load('full_default', get_index_6)
        where_12 = ops.where(eq_6, mul_1, load_4)
        add_1 = ops.add(add, where_12)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf15', get_index_7, add_1, None)
        return store
op15 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp14 = tl.load(in_ptr0 + (74))
        tmp15 = tl.broadcast_to(tmp14, [XBLOCK])
        tmp24 = tl.load(in_ptr1 + (x0), xmask)
        tmp35 = tl.load(in_ptr0 + (73))
        tmp36 = tl.broadcast_to(tmp35, [XBLOCK])
        tmp1 = x0
        tmp2 = tl.full([1], 74, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = tl.full([1], 75, tl.int32)
        tmp5 = tmp2 == tmp4
        tmp6 = tl.full([1], 76, tl.int32)
        tmp7 = tmp2 == tmp6
        tmp8 = tl.full([1], 77, tl.int32)
        tmp9 = tmp2 == tmp8
        tmp10 = tl.full([1], 78, tl.int32)
        tmp11 = tmp2 == tmp10
        tmp12 = tl.full([1], 79, tl.int32)
        tmp13 = tmp2 == tmp12
        tmp16 = 0.0
        tmp17 = tl.where(tmp13, tmp16, tmp15)
        tmp18 = tl.where(tmp11, tmp16, tmp17)
        tmp19 = tl.where(tmp9, tmp16, tmp18)
        tmp20 = tl.where(tmp7, tmp16, tmp19)
        tmp21 = tl.where(tmp5, tmp16, tmp20)
        tmp22 = 2.0
        tmp23 = tmp21 * tmp22
        tmp25 = tl.where(tmp3, tmp23, tmp24)
        tmp26 = tmp0 + tmp25
        tmp27 = tl.full([1], 73, tl.int32)
        tmp28 = tmp1 == tmp27
        tmp29 = tmp27 == tmp2
        tmp30 = tmp27 == tmp4
        tmp31 = tmp27 == tmp6
        tmp32 = tmp27 == tmp8
        tmp33 = tmp27 == tmp10
        tmp34 = tmp27 == tmp12
        tmp37 = tl.where(tmp34, tmp16, tmp36)
        tmp38 = tl.where(tmp33, tmp16, tmp37)
        tmp39 = tl.where(tmp32, tmp16, tmp38)
        tmp40 = tl.where(tmp31, tmp16, tmp39)
        tmp41 = tl.where(tmp30, tmp16, tmp40)
        tmp42 = tl.where(tmp29, tmp16, tmp41)
        tmp43 = tmp42 * tmp22
        tmp44 = tl.where(tmp28, tmp43, tmp24)
        tmp45 = tmp26 + tmp44
        tl.store(in_out_ptr0 + (x0), tmp45, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[12] =
op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', c0, {c0: 100}, None)]
op16.unmet_dependencies = [MemoryDep('buf11', 72, {}, None), MemoryDep('buf15', c0, {c0: 100}, None)]
op16.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf16.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=True, is_weak=False)]
]
op16.group.device = cuda:0
op16.group.iteration = (100, 1)
op16.sizes = ([100], [])
buf15_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf11_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op16_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 72
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        get_index_1 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_1, torch.int32)
        constant = ops.constant(72, torch.int32)
        eq = ops.eq(index_expr, constant)
        constant_1 = ops.constant(72, torch.int32)
        constant_2 = ops.constant(73, torch.int32)
        eq_1 = ops.eq(constant_1, constant_2)
        constant_3 = ops.constant(72, torch.int32)
        constant_4 = ops.constant(74, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        constant_5 = ops.constant(72, torch.int32)
        constant_6 = ops.constant(75, torch.int32)
        eq_3 = ops.eq(constant_5, constant_6)
        constant_7 = ops.constant(72, torch.int32)
        constant_8 = ops.constant(76, torch.int32)
        eq_4 = ops.eq(constant_7, constant_8)
        constant_9 = ops.constant(72, torch.int32)
        constant_10 = ops.constant(77, torch.int32)
        eq_5 = ops.eq(constant_9, constant_10)
        constant_11 = ops.constant(72, torch.int32)
        constant_12 = ops.constant(78, torch.int32)
        eq_6 = ops.eq(constant_11, constant_12)
        constant_13 = ops.constant(72, torch.int32)
        constant_14 = ops.constant(79, torch.int32)
        eq_7 = ops.eq(constant_13, constant_14)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf11', get_index_2)
        constant_15 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_7, constant_15, load_1)
        constant_16 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_6, constant_16, where)
        constant_17 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_5, constant_17, where_1)
        constant_18 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_4, constant_18, where_2)
        constant_19 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_3, constant_19, where_3)
        constant_20 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_2, constant_20, where_4)
        constant_21 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_1, constant_21, where_5)
        constant_22 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_6, constant_22)
        get_index_3 = self.get_index('index0')
        load_2 = ops.load('full_default', get_index_3)
        where_7 = ops.where(eq, mul, load_2)
        add = ops.add(load, where_7)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf16', get_index_4, add, None)
        return store
op16 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp18 = tl.load(in_ptr0 + (72))
        tmp19 = tl.broadcast_to(tmp18, [XBLOCK])
        tmp30 = tl.load(in_ptr1 + (x0), xmask)
        tmp1 = x0
        tmp2 = tl.full([1], 72, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = tl.full([1], 73, tl.int32)
        tmp5 = tmp2 == tmp4
        tmp6 = tl.full([1], 74, tl.int32)
        tmp7 = tmp2 == tmp6
        tmp8 = tl.full([1], 75, tl.int32)
        tmp9 = tmp2 == tmp8
        tmp10 = tl.full([1], 76, tl.int32)
        tmp11 = tmp2 == tmp10
        tmp12 = tl.full([1], 77, tl.int32)
        tmp13 = tmp2 == tmp12
        tmp14 = tl.full([1], 78, tl.int32)
        tmp15 = tmp2 == tmp14
        tmp16 = tl.full([1], 79, tl.int32)
        tmp17 = tmp2 == tmp16
        tmp20 = 0.0
        tmp21 = tl.where(tmp17, tmp20, tmp19)
        tmp22 = tl.where(tmp15, tmp20, tmp21)
        tmp23 = tl.where(tmp13, tmp20, tmp22)
        tmp24 = tl.where(tmp11, tmp20, tmp23)
        tmp25 = tl.where(tmp9, tmp20, tmp24)
        tmp26 = tl.where(tmp7, tmp20, tmp25)
        tmp27 = tl.where(tmp5, tmp20, tmp26)
        tmp28 = 2.0
        tmp29 = tmp27 * tmp28
        tmp31 = tl.where(tmp3, tmp29, tmp30)
        tmp32 = tmp0 + tmp31
        tl.store(in_out_ptr0 + (x0), tmp32, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[13] =
op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 100}, None)]
op17.unmet_dependencies = [MemoryDep('buf11', 71, {}, None)]
op17.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf17.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=True, is_weak=False)]
]
op17.group.device = cuda:0
op17.group.iteration = (100, 1)
op17.sizes = ([100], [])
buf11_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op17_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 71
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(71, torch.int32)
        eq = ops.eq(index_expr, constant)
        constant_1 = ops.constant(71, torch.int32)
        constant_2 = ops.constant(72, torch.int32)
        eq_1 = ops.eq(constant_1, constant_2)
        constant_3 = ops.constant(71, torch.int32)
        constant_4 = ops.constant(73, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        constant_5 = ops.constant(71, torch.int32)
        constant_6 = ops.constant(74, torch.int32)
        eq_3 = ops.eq(constant_5, constant_6)
        constant_7 = ops.constant(71, torch.int32)
        constant_8 = ops.constant(75, torch.int32)
        eq_4 = ops.eq(constant_7, constant_8)
        constant_9 = ops.constant(71, torch.int32)
        constant_10 = ops.constant(76, torch.int32)
        eq_5 = ops.eq(constant_9, constant_10)
        constant_11 = ops.constant(71, torch.int32)
        constant_12 = ops.constant(77, torch.int32)
        eq_6 = ops.eq(constant_11, constant_12)
        constant_13 = ops.constant(71, torch.int32)
        constant_14 = ops.constant(78, torch.int32)
        eq_7 = ops.eq(constant_13, constant_14)
        constant_15 = ops.constant(71, torch.int32)
        constant_16 = ops.constant(79, torch.int32)
        eq_8 = ops.eq(constant_15, constant_16)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf11', get_index_1)
        constant_17 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_8, constant_17, load)
        constant_18 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_7, constant_18, where)
        constant_19 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_6, constant_19, where_1)
        constant_20 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_5, constant_20, where_2)
        constant_21 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_4, constant_21, where_3)
        constant_22 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_3, constant_22, where_4)
        constant_23 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_2, constant_23, where_5)
        constant_24 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_1, constant_24, where_6)
        constant_25 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_7, constant_25)
        get_index_2 = self.get_index('index0')
        load_1 = ops.load('full_default', get_index_2)
        where_8 = ops.where(eq, mul, load_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf17', get_index_3, where_8, None)
        return store
op17 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp19 = tl.load(in_ptr0 + (71))
        tmp20 = tl.broadcast_to(tmp19, [XBLOCK])
        tmp32 = tl.load(in_ptr1 + (x0), xmask)
        tmp0 = x0
        tmp1 = tl.full([1], 71, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = tl.full([1], 72, tl.int32)
        tmp4 = tmp1 == tmp3
        tmp5 = tl.full([1], 73, tl.int32)
        tmp6 = tmp1 == tmp5
        tmp7 = tl.full([1], 74, tl.int32)
        tmp8 = tmp1 == tmp7
        tmp9 = tl.full([1], 75, tl.int32)
        tmp10 = tmp1 == tmp9
        tmp11 = tl.full([1], 76, tl.int32)
        tmp12 = tmp1 == tmp11
        tmp13 = tl.full([1], 77, tl.int32)
        tmp14 = tmp1 == tmp13
        tmp15 = tl.full([1], 78, tl.int32)
        tmp16 = tmp1 == tmp15
        tmp17 = tl.full([1], 79, tl.int32)
        tmp18 = tmp1 == tmp17
        tmp21 = 0.0
        tmp22 = tl.where(tmp18, tmp21, tmp20)
        tmp23 = tl.where(tmp16, tmp21, tmp22)
        tmp24 = tl.where(tmp14, tmp21, tmp23)
        tmp25 = tl.where(tmp12, tmp21, tmp24)
        tmp26 = tl.where(tmp10, tmp21, tmp25)
        tmp27 = tl.where(tmp8, tmp21, tmp26)
        tmp28 = tl.where(tmp6, tmp21, tmp27)
        tmp29 = tl.where(tmp4, tmp21, tmp28)
        tmp30 = 2.0
        tmp31 = tmp29 * tmp30
        tmp33 = tl.where(tmp2, tmp31, tmp32)
        tl.store(out_ptr0 + (x0), tmp33, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[14] =
op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 100}, None)]
op20.unmet_dependencies = 
    [   MemoryDep('buf16', c0, {c0: 100}, None),
        MemoryDep('buf17', c0, {c0: 100}, None),
        MemoryDep('buf18', 67, {}, None),
        MemoryDep('buf18', 68, {}, None),
        MemoryDep('buf18', 69, {}, None),
        MemoryDep('buf19', 0, {}, None)]
op20.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf20.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False)]
]
op20.group.device = cuda:0
op20.group.iteration = (100, 1)
op20.sizes = ([100], [])
buf16_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf20_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op20_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 0
    index2 = 69
    index3 = 68
    index4 = 67
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf17', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_2, torch.int32)
        constant = ops.constant(70, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_3 = self.get_index('index1')
        load_2 = ops.load('buf19', get_index_3)
        get_index_4 = self.get_index('index0')
        load_3 = ops.load('full_default', get_index_4)
        where = ops.where(eq, load_2, load_3)
        add_1 = ops.add(add, where)
        get_index_5 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_5, torch.int32)
        constant_1 = ops.constant(69, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_1)
        get_index_6 = self.get_index('index2')
        load_4 = ops.load('buf18', get_index_6)
        constant_2 = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_7 = self.get_index('index0')
        load_5 = ops.load('full_default', get_index_7)
        where_1 = ops.where(eq_1, mul, load_5)
        add_2 = ops.add(add_1, where_1)
        get_index_8 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_8, torch.int32)
        constant_3 = ops.constant(68, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_3)
        constant_4 = ops.constant(68, torch.int32)
        constant_5 = ops.constant(69, torch.int32)
        eq_3 = ops.eq(constant_4, constant_5)
        get_index_9 = self.get_index('index3')
        load_6 = ops.load('buf18', get_index_9)
        constant_6 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_3, constant_6, load_6)
        constant_7 = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(where_2, constant_7)
        get_index_10 = self.get_index('index0')
        load_7 = ops.load('full_default', get_index_10)
        where_3 = ops.where(eq_2, mul_1, load_7)
        add_3 = ops.add(add_2, where_3)
        get_index_11 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_11, torch.int32)
        constant_8 = ops.constant(67, torch.int32)
        eq_4 = ops.eq(index_expr_3, constant_8)
        constant_9 = ops.constant(67, torch.int32)
        constant_10 = ops.constant(68, torch.int32)
        eq_5 = ops.eq(constant_9, constant_10)
        constant_11 = ops.constant(67, torch.int32)
        constant_12 = ops.constant(69, torch.int32)
        eq_6 = ops.eq(constant_11, constant_12)
        get_index_12 = self.get_index('index4')
        load_8 = ops.load('buf18', get_index_12)
        constant_13 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_6, constant_13, load_8)
        constant_14 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_5, constant_14, where_4)
        constant_15 = ops.constant(2.0, torch.float32)
        mul_2 = ops.mul(where_5, constant_15)
        get_index_13 = self.get_index('index0')
        load_9 = ops.load('full_default', get_index_13)
        where_6 = ops.where(eq_4, mul_2, load_9)
        add_4 = ops.add(add_3, where_6)
        get_index_14 = self.get_index('index0')
        store = ops.store('buf20', get_index_14, add_4, None)
        return store
op20 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp1 = tl.load(in_ptr0 + (x0), xmask)
        tmp6 = tl.load(in_ptr1 + (0))
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK])
        tmp8 = tl.load(in_ptr2 + (x0), xmask)
        tmp13 = tl.load(in_ptr3 + (69))
        tmp14 = tl.broadcast_to(tmp13, [XBLOCK])
        tmp22 = tl.load(in_ptr3 + (68))
        tmp23 = tl.broadcast_to(tmp22, [XBLOCK])
        tmp33 = tl.load(in_ptr3 + (67))
        tmp34 = tl.broadcast_to(tmp33, [XBLOCK])
        tmp2 = tmp0 + tmp1
        tmp3 = x0
        tmp4 = tl.full([1], 70, tl.int32)
        tmp5 = tmp3 == tmp4
        tmp9 = tl.where(tmp5, tmp7, tmp8)
        tmp10 = tmp2 + tmp9
        tmp11 = tl.full([1], 69, tl.int32)
        tmp12 = tmp3 == tmp11
        tmp15 = 2.0
        tmp16 = tmp14 * tmp15
        tmp17 = tl.where(tmp12, tmp16, tmp8)
        tmp18 = tmp10 + tmp17
        tmp19 = tl.full([1], 68, tl.int32)
        tmp20 = tmp3 == tmp19
        tmp21 = tmp19 == tmp11
        tmp24 = 0.0
        tmp25 = tl.where(tmp21, tmp24, tmp23)
        tmp26 = tmp25 * tmp15
        tmp27 = tl.where(tmp20, tmp26, tmp8)
        tmp28 = tmp18 + tmp27
        tmp29 = tl.full([1], 67, tl.int32)
        tmp30 = tmp3 == tmp29
        tmp31 = tmp29 == tmp19
        tmp32 = tmp29 == tmp11
        tmp35 = tl.where(tmp32, tmp24, tmp34)
        tmp36 = tl.where(tmp31, tmp24, tmp35)
        tmp37 = tmp36 * tmp15
        tmp38 = tl.where(tmp30, tmp37, tmp8)
        tmp39 = tmp28 + tmp38
        tl.store(in_out_ptr0 + (x0), tmp39, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[15] =
op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 100}, None)]
op21.unmet_dependencies = 
    [   MemoryDep('buf18', 65, {}, None),
        MemoryDep('buf18', 66, {}, None),
        MemoryDep('buf20', c0, {c0: 100}, None)]
op21.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf21.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=True, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (100, 1)
op21.sizes = ([100], [])
buf20_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf21_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op21_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 66
    index2 = 65
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_1, torch.int32)
        constant = ops.constant(66, torch.int32)
        eq = ops.eq(index_expr, constant)
        constant_1 = ops.constant(66, torch.int32)
        constant_2 = ops.constant(67, torch.int32)
        eq_1 = ops.eq(constant_1, constant_2)
        constant_3 = ops.constant(66, torch.int32)
        constant_4 = ops.constant(68, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        constant_5 = ops.constant(66, torch.int32)
        constant_6 = ops.constant(69, torch.int32)
        eq_3 = ops.eq(constant_5, constant_6)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf18', get_index_2)
        constant_7 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_3, constant_7, load_1)
        constant_8 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_2, constant_8, where)
        constant_9 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_1, constant_9, where_1)
        constant_10 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_2, constant_10)
        get_index_3 = self.get_index('index0')
        load_2 = ops.load('full_default', get_index_3)
        where_3 = ops.where(eq, mul, load_2)
        add = ops.add(load, where_3)
        get_index_4 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_4, torch.int32)
        constant_11 = ops.constant(65, torch.int32)
        eq_4 = ops.eq(index_expr_1, constant_11)
        constant_12 = ops.constant(65, torch.int32)
        constant_13 = ops.constant(66, torch.int32)
        eq_5 = ops.eq(constant_12, constant_13)
        constant_14 = ops.constant(65, torch.int32)
        constant_15 = ops.constant(67, torch.int32)
        eq_6 = ops.eq(constant_14, constant_15)
        constant_16 = ops.constant(65, torch.int32)
        constant_17 = ops.constant(68, torch.int32)
        eq_7 = ops.eq(constant_16, constant_17)
        constant_18 = ops.constant(65, torch.int32)
        constant_19 = ops.constant(69, torch.int32)
        eq_8 = ops.eq(constant_18, constant_19)
        get_index_5 = self.get_index('index2')
        load_3 = ops.load('buf18', get_index_5)
        constant_20 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_8, constant_20, load_3)
        constant_21 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_7, constant_21, where_4)
        constant_22 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_6, constant_22, where_5)
        constant_23 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_5, constant_23, where_6)
        constant_24 = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(where_7, constant_24)
        get_index_6 = self.get_index('index0')
        load_4 = ops.load('full_default', get_index_6)
        where_8 = ops.where(eq_4, mul_1, load_4)
        add_1 = ops.add(add, where_8)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf21', get_index_7, add_1, None)
        return store
op21 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp10 = tl.load(in_ptr0 + (66))
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK])
        tmp18 = tl.load(in_ptr1 + (x0), xmask)
        tmp27 = tl.load(in_ptr0 + (65))
        tmp28 = tl.broadcast_to(tmp27, [XBLOCK])
        tmp1 = x0
        tmp2 = tl.full([1], 66, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = tl.full([1], 67, tl.int32)
        tmp5 = tmp2 == tmp4
        tmp6 = tl.full([1], 68, tl.int32)
        tmp7 = tmp2 == tmp6
        tmp8 = tl.full([1], 69, tl.int32)
        tmp9 = tmp2 == tmp8
        tmp12 = 0.0
        tmp13 = tl.where(tmp9, tmp12, tmp11)
        tmp14 = tl.where(tmp7, tmp12, tmp13)
        tmp15 = tl.where(tmp5, tmp12, tmp14)
        tmp16 = 2.0
        tmp17 = tmp15 * tmp16
        tmp19 = tl.where(tmp3, tmp17, tmp18)
        tmp20 = tmp0 + tmp19
        tmp21 = tl.full([1], 65, tl.int32)
        tmp22 = tmp1 == tmp21
        tmp23 = tmp21 == tmp2
        tmp24 = tmp21 == tmp4
        tmp25 = tmp21 == tmp6
        tmp26 = tmp21 == tmp8
        tmp29 = tl.where(tmp26, tmp12, tmp28)
        tmp30 = tl.where(tmp25, tmp12, tmp29)
        tmp31 = tl.where(tmp24, tmp12, tmp30)
        tmp32 = tl.where(tmp23, tmp12, tmp31)
        tmp33 = tmp32 * tmp16
        tmp34 = tl.where(tmp22, tmp33, tmp18)
        tmp35 = tmp20 + tmp34
        tl.store(in_out_ptr0 + (x0), tmp35, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[16] =
op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 100}, None)]
op22.unmet_dependencies = 
    [   MemoryDep('buf18', 63, {}, None),
        MemoryDep('buf18', 64, {}, None),
        MemoryDep('buf21', c0, {c0: 100}, None)]
op22.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf22.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False)]
]
op22.group.device = cuda:0
op22.group.iteration = (100, 1)
op22.sizes = ([100], [])
buf21_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf22_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op22_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 64
    index2 = 63
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_1, torch.int32)
        constant = ops.constant(64, torch.int32)
        eq = ops.eq(index_expr, constant)
        constant_1 = ops.constant(64, torch.int32)
        constant_2 = ops.constant(65, torch.int32)
        eq_1 = ops.eq(constant_1, constant_2)
        constant_3 = ops.constant(64, torch.int32)
        constant_4 = ops.constant(66, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        constant_5 = ops.constant(64, torch.int32)
        constant_6 = ops.constant(67, torch.int32)
        eq_3 = ops.eq(constant_5, constant_6)
        constant_7 = ops.constant(64, torch.int32)
        constant_8 = ops.constant(68, torch.int32)
        eq_4 = ops.eq(constant_7, constant_8)
        constant_9 = ops.constant(64, torch.int32)
        constant_10 = ops.constant(69, torch.int32)
        eq_5 = ops.eq(constant_9, constant_10)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf18', get_index_2)
        constant_11 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_5, constant_11, load_1)
        constant_12 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_4, constant_12, where)
        constant_13 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_3, constant_13, where_1)
        constant_14 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_2, constant_14, where_2)
        constant_15 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_1, constant_15, where_3)
        constant_16 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_4, constant_16)
        get_index_3 = self.get_index('index0')
        load_2 = ops.load('full_default', get_index_3)
        where_5 = ops.where(eq, mul, load_2)
        add = ops.add(load, where_5)
        get_index_4 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_4, torch.int32)
        constant_17 = ops.constant(63, torch.int32)
        eq_6 = ops.eq(index_expr_1, constant_17)
        constant_18 = ops.constant(63, torch.int32)
        constant_19 = ops.constant(64, torch.int32)
        eq_7 = ops.eq(constant_18, constant_19)
        constant_20 = ops.constant(63, torch.int32)
        constant_21 = ops.constant(65, torch.int32)
        eq_8 = ops.eq(constant_20, constant_21)
        constant_22 = ops.constant(63, torch.int32)
        constant_23 = ops.constant(66, torch.int32)
        eq_9 = ops.eq(constant_22, constant_23)
        constant_24 = ops.constant(63, torch.int32)
        constant_25 = ops.constant(67, torch.int32)
        eq_10 = ops.eq(constant_24, constant_25)
        constant_26 = ops.constant(63, torch.int32)
        constant_27 = ops.constant(68, torch.int32)
        eq_11 = ops.eq(constant_26, constant_27)
        constant_28 = ops.constant(63, torch.int32)
        constant_29 = ops.constant(69, torch.int32)
        eq_12 = ops.eq(constant_28, constant_29)
        get_index_5 = self.get_index('index2')
        load_3 = ops.load('buf18', get_index_5)
        constant_30 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_12, constant_30, load_3)
        constant_31 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_11, constant_31, where_6)
        constant_32 = ops.constant(0.0, torch.float32)
        where_8 = ops.where(eq_10, constant_32, where_7)
        constant_33 = ops.constant(0.0, torch.float32)
        where_9 = ops.where(eq_9, constant_33, where_8)
        constant_34 = ops.constant(0.0, torch.float32)
        where_10 = ops.where(eq_8, constant_34, where_9)
        constant_35 = ops.constant(0.0, torch.float32)
        where_11 = ops.where(eq_7, constant_35, where_10)
        constant_36 = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(where_11, constant_36)
        get_index_6 = self.get_index('index0')
        load_4 = ops.load('full_default', get_index_6)
        where_12 = ops.where(eq_6, mul_1, load_4)
        add_1 = ops.add(add, where_12)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf22', get_index_7, add_1, None)
        return store
op22 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp14 = tl.load(in_ptr0 + (64))
        tmp15 = tl.broadcast_to(tmp14, [XBLOCK])
        tmp24 = tl.load(in_ptr1 + (x0), xmask)
        tmp35 = tl.load(in_ptr0 + (63))
        tmp36 = tl.broadcast_to(tmp35, [XBLOCK])
        tmp1 = x0
        tmp2 = tl.full([1], 64, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = tl.full([1], 65, tl.int32)
        tmp5 = tmp2 == tmp4
        tmp6 = tl.full([1], 66, tl.int32)
        tmp7 = tmp2 == tmp6
        tmp8 = tl.full([1], 67, tl.int32)
        tmp9 = tmp2 == tmp8
        tmp10 = tl.full([1], 68, tl.int32)
        tmp11 = tmp2 == tmp10
        tmp12 = tl.full([1], 69, tl.int32)
        tmp13 = tmp2 == tmp12
        tmp16 = 0.0
        tmp17 = tl.where(tmp13, tmp16, tmp15)
        tmp18 = tl.where(tmp11, tmp16, tmp17)
        tmp19 = tl.where(tmp9, tmp16, tmp18)
        tmp20 = tl.where(tmp7, tmp16, tmp19)
        tmp21 = tl.where(tmp5, tmp16, tmp20)
        tmp22 = 2.0
        tmp23 = tmp21 * tmp22
        tmp25 = tl.where(tmp3, tmp23, tmp24)
        tmp26 = tmp0 + tmp25
        tmp27 = tl.full([1], 63, tl.int32)
        tmp28 = tmp1 == tmp27
        tmp29 = tmp27 == tmp2
        tmp30 = tmp27 == tmp4
        tmp31 = tmp27 == tmp6
        tmp32 = tmp27 == tmp8
        tmp33 = tmp27 == tmp10
        tmp34 = tmp27 == tmp12
        tmp37 = tl.where(tmp34, tmp16, tmp36)
        tmp38 = tl.where(tmp33, tmp16, tmp37)
        tmp39 = tl.where(tmp32, tmp16, tmp38)
        tmp40 = tl.where(tmp31, tmp16, tmp39)
        tmp41 = tl.where(tmp30, tmp16, tmp40)
        tmp42 = tl.where(tmp29, tmp16, tmp41)
        tmp43 = tmp42 * tmp22
        tmp44 = tl.where(tmp28, tmp43, tmp24)
        tmp45 = tmp26 + tmp44
        tl.store(in_out_ptr0 + (x0), tmp45, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[17] =
op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 100}, None)]
op23.unmet_dependencies = [MemoryDep('buf18', 62, {}, None), MemoryDep('buf22', c0, {c0: 100}, None)]
op23.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf23.users = [NodeUser(node=SchedulerNode(name='op27'), can_inplace=True, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (100, 1)
op23.sizes = ([100], [])
buf22_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op23_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 62
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_1, torch.int32)
        constant = ops.constant(62, torch.int32)
        eq = ops.eq(index_expr, constant)
        constant_1 = ops.constant(62, torch.int32)
        constant_2 = ops.constant(63, torch.int32)
        eq_1 = ops.eq(constant_1, constant_2)
        constant_3 = ops.constant(62, torch.int32)
        constant_4 = ops.constant(64, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        constant_5 = ops.constant(62, torch.int32)
        constant_6 = ops.constant(65, torch.int32)
        eq_3 = ops.eq(constant_5, constant_6)
        constant_7 = ops.constant(62, torch.int32)
        constant_8 = ops.constant(66, torch.int32)
        eq_4 = ops.eq(constant_7, constant_8)
        constant_9 = ops.constant(62, torch.int32)
        constant_10 = ops.constant(67, torch.int32)
        eq_5 = ops.eq(constant_9, constant_10)
        constant_11 = ops.constant(62, torch.int32)
        constant_12 = ops.constant(68, torch.int32)
        eq_6 = ops.eq(constant_11, constant_12)
        constant_13 = ops.constant(62, torch.int32)
        constant_14 = ops.constant(69, torch.int32)
        eq_7 = ops.eq(constant_13, constant_14)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf18', get_index_2)
        constant_15 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_7, constant_15, load_1)
        constant_16 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_6, constant_16, where)
        constant_17 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_5, constant_17, where_1)
        constant_18 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_4, constant_18, where_2)
        constant_19 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_3, constant_19, where_3)
        constant_20 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_2, constant_20, where_4)
        constant_21 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_1, constant_21, where_5)
        constant_22 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_6, constant_22)
        get_index_3 = self.get_index('index0')
        load_2 = ops.load('full_default', get_index_3)
        where_7 = ops.where(eq, mul, load_2)
        add = ops.add(load, where_7)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf23', get_index_4, add, None)
        return store
op23 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp18 = tl.load(in_ptr0 + (62))
        tmp19 = tl.broadcast_to(tmp18, [XBLOCK])
        tmp30 = tl.load(in_ptr1 + (x0), xmask)
        tmp1 = x0
        tmp2 = tl.full([1], 62, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = tl.full([1], 63, tl.int32)
        tmp5 = tmp2 == tmp4
        tmp6 = tl.full([1], 64, tl.int32)
        tmp7 = tmp2 == tmp6
        tmp8 = tl.full([1], 65, tl.int32)
        tmp9 = tmp2 == tmp8
        tmp10 = tl.full([1], 66, tl.int32)
        tmp11 = tmp2 == tmp10
        tmp12 = tl.full([1], 67, tl.int32)
        tmp13 = tmp2 == tmp12
        tmp14 = tl.full([1], 68, tl.int32)
        tmp15 = tmp2 == tmp14
        tmp16 = tl.full([1], 69, tl.int32)
        tmp17 = tmp2 == tmp16
        tmp20 = 0.0
        tmp21 = tl.where(tmp17, tmp20, tmp19)
        tmp22 = tl.where(tmp15, tmp20, tmp21)
        tmp23 = tl.where(tmp13, tmp20, tmp22)
        tmp24 = tl.where(tmp11, tmp20, tmp23)
        tmp25 = tl.where(tmp9, tmp20, tmp24)
        tmp26 = tl.where(tmp7, tmp20, tmp25)
        tmp27 = tl.where(tmp5, tmp20, tmp26)
        tmp28 = 2.0
        tmp29 = tmp27 * tmp28
        tmp31 = tl.where(tmp3, tmp29, tmp30)
        tmp32 = tmp0 + tmp31
        tl.store(in_out_ptr0 + (x0), tmp32, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[18] =
op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 100}, None)]
op24.unmet_dependencies = [MemoryDep('buf18', 61, {}, None)]
op24.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf24.users = [NodeUser(node=SchedulerNode(name='op27'), can_inplace=True, is_weak=False)]
]
op24.group.device = cuda:0
op24.group.iteration = (100, 1)
op24.sizes = ([100], [])
buf18_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op24_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 61
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(61, torch.int32)
        eq = ops.eq(index_expr, constant)
        constant_1 = ops.constant(61, torch.int32)
        constant_2 = ops.constant(62, torch.int32)
        eq_1 = ops.eq(constant_1, constant_2)
        constant_3 = ops.constant(61, torch.int32)
        constant_4 = ops.constant(63, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        constant_5 = ops.constant(61, torch.int32)
        constant_6 = ops.constant(64, torch.int32)
        eq_3 = ops.eq(constant_5, constant_6)
        constant_7 = ops.constant(61, torch.int32)
        constant_8 = ops.constant(65, torch.int32)
        eq_4 = ops.eq(constant_7, constant_8)
        constant_9 = ops.constant(61, torch.int32)
        constant_10 = ops.constant(66, torch.int32)
        eq_5 = ops.eq(constant_9, constant_10)
        constant_11 = ops.constant(61, torch.int32)
        constant_12 = ops.constant(67, torch.int32)
        eq_6 = ops.eq(constant_11, constant_12)
        constant_13 = ops.constant(61, torch.int32)
        constant_14 = ops.constant(68, torch.int32)
        eq_7 = ops.eq(constant_13, constant_14)
        constant_15 = ops.constant(61, torch.int32)
        constant_16 = ops.constant(69, torch.int32)
        eq_8 = ops.eq(constant_15, constant_16)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf18', get_index_1)
        constant_17 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_8, constant_17, load)
        constant_18 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_7, constant_18, where)
        constant_19 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_6, constant_19, where_1)
        constant_20 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_5, constant_20, where_2)
        constant_21 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_4, constant_21, where_3)
        constant_22 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_3, constant_22, where_4)
        constant_23 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_2, constant_23, where_5)
        constant_24 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_1, constant_24, where_6)
        constant_25 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_7, constant_25)
        get_index_2 = self.get_index('index0')
        load_1 = ops.load('full_default', get_index_2)
        where_8 = ops.where(eq, mul, load_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf24', get_index_3, where_8, None)
        return store
op24 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp19 = tl.load(in_ptr0 + (61))
        tmp20 = tl.broadcast_to(tmp19, [XBLOCK])
        tmp32 = tl.load(in_ptr1 + (x0), xmask)
        tmp0 = x0
        tmp1 = tl.full([1], 61, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = tl.full([1], 62, tl.int32)
        tmp4 = tmp1 == tmp3
        tmp5 = tl.full([1], 63, tl.int32)
        tmp6 = tmp1 == tmp5
        tmp7 = tl.full([1], 64, tl.int32)
        tmp8 = tmp1 == tmp7
        tmp9 = tl.full([1], 65, tl.int32)
        tmp10 = tmp1 == tmp9
        tmp11 = tl.full([1], 66, tl.int32)
        tmp12 = tmp1 == tmp11
        tmp13 = tl.full([1], 67, tl.int32)
        tmp14 = tmp1 == tmp13
        tmp15 = tl.full([1], 68, tl.int32)
        tmp16 = tmp1 == tmp15
        tmp17 = tl.full([1], 69, tl.int32)
        tmp18 = tmp1 == tmp17
        tmp21 = 0.0
        tmp22 = tl.where(tmp18, tmp21, tmp20)
        tmp23 = tl.where(tmp16, tmp21, tmp22)
        tmp24 = tl.where(tmp14, tmp21, tmp23)
        tmp25 = tl.where(tmp12, tmp21, tmp24)
        tmp26 = tl.where(tmp10, tmp21, tmp25)
        tmp27 = tl.where(tmp8, tmp21, tmp26)
        tmp28 = tl.where(tmp6, tmp21, tmp27)
        tmp29 = tl.where(tmp4, tmp21, tmp28)
        tmp30 = 2.0
        tmp31 = tmp29 * tmp30
        tmp33 = tl.where(tmp2, tmp31, tmp32)
        tl.store(out_ptr0 + (x0), tmp33, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[19] =
op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 100}, None)]
op27.unmet_dependencies = 
    [   MemoryDep('buf23', c0, {c0: 100}, None),
        MemoryDep('buf24', c0, {c0: 100}, None),
        MemoryDep('buf25', 57, {}, None),
        MemoryDep('buf25', 58, {}, None),
        MemoryDep('buf25', 59, {}, None),
        MemoryDep('buf26', 0, {}, None)]
op27.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf27.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False)]
]
op27.group.device = cuda:0
op27.group.iteration = (100, 1)
op27.sizes = ([100], [])
buf23_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf26_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op27_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 0
    index2 = 59
    index3 = 58
    index4 = 57
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf24', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_2, torch.int32)
        constant = ops.constant(60, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_3 = self.get_index('index1')
        load_2 = ops.load('buf26', get_index_3)
        get_index_4 = self.get_index('index0')
        load_3 = ops.load('full_default', get_index_4)
        where = ops.where(eq, load_2, load_3)
        add_1 = ops.add(add, where)
        get_index_5 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_5, torch.int32)
        constant_1 = ops.constant(59, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_1)
        get_index_6 = self.get_index('index2')
        load_4 = ops.load('buf25', get_index_6)
        constant_2 = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_7 = self.get_index('index0')
        load_5 = ops.load('full_default', get_index_7)
        where_1 = ops.where(eq_1, mul, load_5)
        add_2 = ops.add(add_1, where_1)
        get_index_8 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_8, torch.int32)
        constant_3 = ops.constant(58, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_3)
        constant_4 = ops.constant(58, torch.int32)
        constant_5 = ops.constant(59, torch.int32)
        eq_3 = ops.eq(constant_4, constant_5)
        get_index_9 = self.get_index('index3')
        load_6 = ops.load('buf25', get_index_9)
        constant_6 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_3, constant_6, load_6)
        constant_7 = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(where_2, constant_7)
        get_index_10 = self.get_index('index0')
        load_7 = ops.load('full_default', get_index_10)
        where_3 = ops.where(eq_2, mul_1, load_7)
        add_3 = ops.add(add_2, where_3)
        get_index_11 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_11, torch.int32)
        constant_8 = ops.constant(57, torch.int32)
        eq_4 = ops.eq(index_expr_3, constant_8)
        constant_9 = ops.constant(57, torch.int32)
        constant_10 = ops.constant(58, torch.int32)
        eq_5 = ops.eq(constant_9, constant_10)
        constant_11 = ops.constant(57, torch.int32)
        constant_12 = ops.constant(59, torch.int32)
        eq_6 = ops.eq(constant_11, constant_12)
        get_index_12 = self.get_index('index4')
        load_8 = ops.load('buf25', get_index_12)
        constant_13 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_6, constant_13, load_8)
        constant_14 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_5, constant_14, where_4)
        constant_15 = ops.constant(2.0, torch.float32)
        mul_2 = ops.mul(where_5, constant_15)
        get_index_13 = self.get_index('index0')
        load_9 = ops.load('full_default', get_index_13)
        where_6 = ops.where(eq_4, mul_2, load_9)
        add_4 = ops.add(add_3, where_6)
        get_index_14 = self.get_index('index0')
        store = ops.store('buf27', get_index_14, add_4, None)
        return store
op27 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp1 = tl.load(in_ptr0 + (x0), xmask)
        tmp6 = tl.load(in_ptr1 + (0))
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK])
        tmp8 = tl.load(in_ptr2 + (x0), xmask)
        tmp13 = tl.load(in_ptr3 + (59))
        tmp14 = tl.broadcast_to(tmp13, [XBLOCK])
        tmp22 = tl.load(in_ptr3 + (58))
        tmp23 = tl.broadcast_to(tmp22, [XBLOCK])
        tmp33 = tl.load(in_ptr3 + (57))
        tmp34 = tl.broadcast_to(tmp33, [XBLOCK])
        tmp2 = tmp0 + tmp1
        tmp3 = x0
        tmp4 = tl.full([1], 60, tl.int32)
        tmp5 = tmp3 == tmp4
        tmp9 = tl.where(tmp5, tmp7, tmp8)
        tmp10 = tmp2 + tmp9
        tmp11 = tl.full([1], 59, tl.int32)
        tmp12 = tmp3 == tmp11
        tmp15 = 2.0
        tmp16 = tmp14 * tmp15
        tmp17 = tl.where(tmp12, tmp16, tmp8)
        tmp18 = tmp10 + tmp17
        tmp19 = tl.full([1], 58, tl.int32)
        tmp20 = tmp3 == tmp19
        tmp21 = tmp19 == tmp11
        tmp24 = 0.0
        tmp25 = tl.where(tmp21, tmp24, tmp23)
        tmp26 = tmp25 * tmp15
        tmp27 = tl.where(tmp20, tmp26, tmp8)
        tmp28 = tmp18 + tmp27
        tmp29 = tl.full([1], 57, tl.int32)
        tmp30 = tmp3 == tmp29
        tmp31 = tmp29 == tmp19
        tmp32 = tmp29 == tmp11
        tmp35 = tl.where(tmp32, tmp24, tmp34)
        tmp36 = tl.where(tmp31, tmp24, tmp35)
        tmp37 = tmp36 * tmp15
        tmp38 = tl.where(tmp30, tmp37, tmp8)
        tmp39 = tmp28 + tmp38
        tl.store(in_out_ptr0 + (x0), tmp39, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[20] =
op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 100}, None)]
op28.unmet_dependencies = 
    [   MemoryDep('buf25', 55, {}, None),
        MemoryDep('buf25', 56, {}, None),
        MemoryDep('buf27', c0, {c0: 100}, None)]
op28.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf28.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=True, is_weak=False)]
]
op28.group.device = cuda:0
op28.group.iteration = (100, 1)
op28.sizes = ([100], [])
buf27_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf28_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op28_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 56
    index2 = 55
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf27', get_index)
        get_index_1 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_1, torch.int32)
        constant = ops.constant(56, torch.int32)
        eq = ops.eq(index_expr, constant)
        constant_1 = ops.constant(56, torch.int32)
        constant_2 = ops.constant(57, torch.int32)
        eq_1 = ops.eq(constant_1, constant_2)
        constant_3 = ops.constant(56, torch.int32)
        constant_4 = ops.constant(58, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        constant_5 = ops.constant(56, torch.int32)
        constant_6 = ops.constant(59, torch.int32)
        eq_3 = ops.eq(constant_5, constant_6)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf25', get_index_2)
        constant_7 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_3, constant_7, load_1)
        constant_8 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_2, constant_8, where)
        constant_9 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_1, constant_9, where_1)
        constant_10 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_2, constant_10)
        get_index_3 = self.get_index('index0')
        load_2 = ops.load('full_default', get_index_3)
        where_3 = ops.where(eq, mul, load_2)
        add = ops.add(load, where_3)
        get_index_4 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_4, torch.int32)
        constant_11 = ops.constant(55, torch.int32)
        eq_4 = ops.eq(index_expr_1, constant_11)
        constant_12 = ops.constant(55, torch.int32)
        constant_13 = ops.constant(56, torch.int32)
        eq_5 = ops.eq(constant_12, constant_13)
        constant_14 = ops.constant(55, torch.int32)
        constant_15 = ops.constant(57, torch.int32)
        eq_6 = ops.eq(constant_14, constant_15)
        constant_16 = ops.constant(55, torch.int32)
        constant_17 = ops.constant(58, torch.int32)
        eq_7 = ops.eq(constant_16, constant_17)
        constant_18 = ops.constant(55, torch.int32)
        constant_19 = ops.constant(59, torch.int32)
        eq_8 = ops.eq(constant_18, constant_19)
        get_index_5 = self.get_index('index2')
        load_3 = ops.load('buf25', get_index_5)
        constant_20 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_8, constant_20, load_3)
        constant_21 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_7, constant_21, where_4)
        constant_22 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_6, constant_22, where_5)
        constant_23 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_5, constant_23, where_6)
        constant_24 = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(where_7, constant_24)
        get_index_6 = self.get_index('index0')
        load_4 = ops.load('full_default', get_index_6)
        where_8 = ops.where(eq_4, mul_1, load_4)
        add_1 = ops.add(add, where_8)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf28', get_index_7, add_1, None)
        return store
op28 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp10 = tl.load(in_ptr0 + (56))
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK])
        tmp18 = tl.load(in_ptr1 + (x0), xmask)
        tmp27 = tl.load(in_ptr0 + (55))
        tmp28 = tl.broadcast_to(tmp27, [XBLOCK])
        tmp1 = x0
        tmp2 = tl.full([1], 56, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = tl.full([1], 57, tl.int32)
        tmp5 = tmp2 == tmp4
        tmp6 = tl.full([1], 58, tl.int32)
        tmp7 = tmp2 == tmp6
        tmp8 = tl.full([1], 59, tl.int32)
        tmp9 = tmp2 == tmp8
        tmp12 = 0.0
        tmp13 = tl.where(tmp9, tmp12, tmp11)
        tmp14 = tl.where(tmp7, tmp12, tmp13)
        tmp15 = tl.where(tmp5, tmp12, tmp14)
        tmp16 = 2.0
        tmp17 = tmp15 * tmp16
        tmp19 = tl.where(tmp3, tmp17, tmp18)
        tmp20 = tmp0 + tmp19
        tmp21 = tl.full([1], 55, tl.int32)
        tmp22 = tmp1 == tmp21
        tmp23 = tmp21 == tmp2
        tmp24 = tmp21 == tmp4
        tmp25 = tmp21 == tmp6
        tmp26 = tmp21 == tmp8
        tmp29 = tl.where(tmp26, tmp12, tmp28)
        tmp30 = tl.where(tmp25, tmp12, tmp29)
        tmp31 = tl.where(tmp24, tmp12, tmp30)
        tmp32 = tl.where(tmp23, tmp12, tmp31)
        tmp33 = tmp32 * tmp16
        tmp34 = tl.where(tmp22, tmp33, tmp18)
        tmp35 = tmp20 + tmp34
        tl.store(in_out_ptr0 + (x0), tmp35, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[21] =
op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 100}, None)]
op29.unmet_dependencies = 
    [   MemoryDep('buf25', 53, {}, None),
        MemoryDep('buf25', 54, {}, None),
        MemoryDep('buf28', c0, {c0: 100}, None)]
op29.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf29.users = [NodeUser(node=SchedulerNode(name='op30'), can_inplace=True, is_weak=False)]
]
op29.group.device = cuda:0
op29.group.iteration = (100, 1)
op29.sizes = ([100], [])
buf28_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf29_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op29_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 54
    index2 = 53
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        get_index_1 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_1, torch.int32)
        constant = ops.constant(54, torch.int32)
        eq = ops.eq(index_expr, constant)
        constant_1 = ops.constant(54, torch.int32)
        constant_2 = ops.constant(55, torch.int32)
        eq_1 = ops.eq(constant_1, constant_2)
        constant_3 = ops.constant(54, torch.int32)
        constant_4 = ops.constant(56, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        constant_5 = ops.constant(54, torch.int32)
        constant_6 = ops.constant(57, torch.int32)
        eq_3 = ops.eq(constant_5, constant_6)
        constant_7 = ops.constant(54, torch.int32)
        constant_8 = ops.constant(58, torch.int32)
        eq_4 = ops.eq(constant_7, constant_8)
        constant_9 = ops.constant(54, torch.int32)
        constant_10 = ops.constant(59, torch.int32)
        eq_5 = ops.eq(constant_9, constant_10)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf25', get_index_2)
        constant_11 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_5, constant_11, load_1)
        constant_12 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_4, constant_12, where)
        constant_13 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_3, constant_13, where_1)
        constant_14 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_2, constant_14, where_2)
        constant_15 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_1, constant_15, where_3)
        constant_16 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_4, constant_16)
        get_index_3 = self.get_index('index0')
        load_2 = ops.load('full_default', get_index_3)
        where_5 = ops.where(eq, mul, load_2)
        add = ops.add(load, where_5)
        get_index_4 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_4, torch.int32)
        constant_17 = ops.constant(53, torch.int32)
        eq_6 = ops.eq(index_expr_1, constant_17)
        constant_18 = ops.constant(53, torch.int32)
        constant_19 = ops.constant(54, torch.int32)
        eq_7 = ops.eq(constant_18, constant_19)
        constant_20 = ops.constant(53, torch.int32)
        constant_21 = ops.constant(55, torch.int32)
        eq_8 = ops.eq(constant_20, constant_21)
        constant_22 = ops.constant(53, torch.int32)
        constant_23 = ops.constant(56, torch.int32)
        eq_9 = ops.eq(constant_22, constant_23)
        constant_24 = ops.constant(53, torch.int32)
        constant_25 = ops.constant(57, torch.int32)
        eq_10 = ops.eq(constant_24, constant_25)
        constant_26 = ops.constant(53, torch.int32)
        constant_27 = ops.constant(58, torch.int32)
        eq_11 = ops.eq(constant_26, constant_27)
        constant_28 = ops.constant(53, torch.int32)
        constant_29 = ops.constant(59, torch.int32)
        eq_12 = ops.eq(constant_28, constant_29)
        get_index_5 = self.get_index('index2')
        load_3 = ops.load('buf25', get_index_5)
        constant_30 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_12, constant_30, load_3)
        constant_31 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_11, constant_31, where_6)
        constant_32 = ops.constant(0.0, torch.float32)
        where_8 = ops.where(eq_10, constant_32, where_7)
        constant_33 = ops.constant(0.0, torch.float32)
        where_9 = ops.where(eq_9, constant_33, where_8)
        constant_34 = ops.constant(0.0, torch.float32)
        where_10 = ops.where(eq_8, constant_34, where_9)
        constant_35 = ops.constant(0.0, torch.float32)
        where_11 = ops.where(eq_7, constant_35, where_10)
        constant_36 = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(where_11, constant_36)
        get_index_6 = self.get_index('index0')
        load_4 = ops.load('full_default', get_index_6)
        where_12 = ops.where(eq_6, mul_1, load_4)
        add_1 = ops.add(add, where_12)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf29', get_index_7, add_1, None)
        return store
op29 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp14 = tl.load(in_ptr0 + (54))
        tmp15 = tl.broadcast_to(tmp14, [XBLOCK])
        tmp24 = tl.load(in_ptr1 + (x0), xmask)
        tmp35 = tl.load(in_ptr0 + (53))
        tmp36 = tl.broadcast_to(tmp35, [XBLOCK])
        tmp1 = x0
        tmp2 = tl.full([1], 54, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = tl.full([1], 55, tl.int32)
        tmp5 = tmp2 == tmp4
        tmp6 = tl.full([1], 56, tl.int32)
        tmp7 = tmp2 == tmp6
        tmp8 = tl.full([1], 57, tl.int32)
        tmp9 = tmp2 == tmp8
        tmp10 = tl.full([1], 58, tl.int32)
        tmp11 = tmp2 == tmp10
        tmp12 = tl.full([1], 59, tl.int32)
        tmp13 = tmp2 == tmp12
        tmp16 = 0.0
        tmp17 = tl.where(tmp13, tmp16, tmp15)
        tmp18 = tl.where(tmp11, tmp16, tmp17)
        tmp19 = tl.where(tmp9, tmp16, tmp18)
        tmp20 = tl.where(tmp7, tmp16, tmp19)
        tmp21 = tl.where(tmp5, tmp16, tmp20)
        tmp22 = 2.0
        tmp23 = tmp21 * tmp22
        tmp25 = tl.where(tmp3, tmp23, tmp24)
        tmp26 = tmp0 + tmp25
        tmp27 = tl.full([1], 53, tl.int32)
        tmp28 = tmp1 == tmp27
        tmp29 = tmp27 == tmp2
        tmp30 = tmp27 == tmp4
        tmp31 = tmp27 == tmp6
        tmp32 = tmp27 == tmp8
        tmp33 = tmp27 == tmp10
        tmp34 = tmp27 == tmp12
        tmp37 = tl.where(tmp34, tmp16, tmp36)
        tmp38 = tl.where(tmp33, tmp16, tmp37)
        tmp39 = tl.where(tmp32, tmp16, tmp38)
        tmp40 = tl.where(tmp31, tmp16, tmp39)
        tmp41 = tl.where(tmp30, tmp16, tmp40)
        tmp42 = tl.where(tmp29, tmp16, tmp41)
        tmp43 = tmp42 * tmp22
        tmp44 = tl.where(tmp28, tmp43, tmp24)
        tmp45 = tmp26 + tmp44
        tl.store(in_out_ptr0 + (x0), tmp45, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[22] =
op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', c0, {c0: 100}, None)]
op30.unmet_dependencies = [MemoryDep('buf25', 52, {}, None), MemoryDep('buf29', c0, {c0: 100}, None)]
op30.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf30.users = [NodeUser(node=SchedulerNode(name='op34'), can_inplace=True, is_weak=False)]
]
op30.group.device = cuda:0
op30.group.iteration = (100, 1)
op30.sizes = ([100], [])
buf29_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf30_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op30_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 52
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        get_index_1 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_1, torch.int32)
        constant = ops.constant(52, torch.int32)
        eq = ops.eq(index_expr, constant)
        constant_1 = ops.constant(52, torch.int32)
        constant_2 = ops.constant(53, torch.int32)
        eq_1 = ops.eq(constant_1, constant_2)
        constant_3 = ops.constant(52, torch.int32)
        constant_4 = ops.constant(54, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        constant_5 = ops.constant(52, torch.int32)
        constant_6 = ops.constant(55, torch.int32)
        eq_3 = ops.eq(constant_5, constant_6)
        constant_7 = ops.constant(52, torch.int32)
        constant_8 = ops.constant(56, torch.int32)
        eq_4 = ops.eq(constant_7, constant_8)
        constant_9 = ops.constant(52, torch.int32)
        constant_10 = ops.constant(57, torch.int32)
        eq_5 = ops.eq(constant_9, constant_10)
        constant_11 = ops.constant(52, torch.int32)
        constant_12 = ops.constant(58, torch.int32)
        eq_6 = ops.eq(constant_11, constant_12)
        constant_13 = ops.constant(52, torch.int32)
        constant_14 = ops.constant(59, torch.int32)
        eq_7 = ops.eq(constant_13, constant_14)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf25', get_index_2)
        constant_15 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_7, constant_15, load_1)
        constant_16 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_6, constant_16, where)
        constant_17 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_5, constant_17, where_1)
        constant_18 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_4, constant_18, where_2)
        constant_19 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_3, constant_19, where_3)
        constant_20 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_2, constant_20, where_4)
        constant_21 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_1, constant_21, where_5)
        constant_22 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_6, constant_22)
        get_index_3 = self.get_index('index0')
        load_2 = ops.load('full_default', get_index_3)
        where_7 = ops.where(eq, mul, load_2)
        add = ops.add(load, where_7)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf30', get_index_4, add, None)
        return store
op30 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp18 = tl.load(in_ptr0 + (52))
        tmp19 = tl.broadcast_to(tmp18, [XBLOCK])
        tmp30 = tl.load(in_ptr1 + (x0), xmask)
        tmp1 = x0
        tmp2 = tl.full([1], 52, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = tl.full([1], 53, tl.int32)
        tmp5 = tmp2 == tmp4
        tmp6 = tl.full([1], 54, tl.int32)
        tmp7 = tmp2 == tmp6
        tmp8 = tl.full([1], 55, tl.int32)
        tmp9 = tmp2 == tmp8
        tmp10 = tl.full([1], 56, tl.int32)
        tmp11 = tmp2 == tmp10
        tmp12 = tl.full([1], 57, tl.int32)
        tmp13 = tmp2 == tmp12
        tmp14 = tl.full([1], 58, tl.int32)
        tmp15 = tmp2 == tmp14
        tmp16 = tl.full([1], 59, tl.int32)
        tmp17 = tmp2 == tmp16
        tmp20 = 0.0
        tmp21 = tl.where(tmp17, tmp20, tmp19)
        tmp22 = tl.where(tmp15, tmp20, tmp21)
        tmp23 = tl.where(tmp13, tmp20, tmp22)
        tmp24 = tl.where(tmp11, tmp20, tmp23)
        tmp25 = tl.where(tmp9, tmp20, tmp24)
        tmp26 = tl.where(tmp7, tmp20, tmp25)
        tmp27 = tl.where(tmp5, tmp20, tmp26)
        tmp28 = 2.0
        tmp29 = tmp27 * tmp28
        tmp31 = tl.where(tmp3, tmp29, tmp30)
        tmp32 = tmp0 + tmp31
        tl.store(in_out_ptr0 + (x0), tmp32, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[23] =
op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', c0, {c0: 100}, None)]
op31.unmet_dependencies = [MemoryDep('buf25', 51, {}, None)]
op31.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf31.users = [NodeUser(node=SchedulerNode(name='op34'), can_inplace=True, is_weak=False)]
]
op31.group.device = cuda:0
op31.group.iteration = (100, 1)
op31.sizes = ([100], [])
buf25_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op31_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 51
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(51, torch.int32)
        eq = ops.eq(index_expr, constant)
        constant_1 = ops.constant(51, torch.int32)
        constant_2 = ops.constant(52, torch.int32)
        eq_1 = ops.eq(constant_1, constant_2)
        constant_3 = ops.constant(51, torch.int32)
        constant_4 = ops.constant(53, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        constant_5 = ops.constant(51, torch.int32)
        constant_6 = ops.constant(54, torch.int32)
        eq_3 = ops.eq(constant_5, constant_6)
        constant_7 = ops.constant(51, torch.int32)
        constant_8 = ops.constant(55, torch.int32)
        eq_4 = ops.eq(constant_7, constant_8)
        constant_9 = ops.constant(51, torch.int32)
        constant_10 = ops.constant(56, torch.int32)
        eq_5 = ops.eq(constant_9, constant_10)
        constant_11 = ops.constant(51, torch.int32)
        constant_12 = ops.constant(57, torch.int32)
        eq_6 = ops.eq(constant_11, constant_12)
        constant_13 = ops.constant(51, torch.int32)
        constant_14 = ops.constant(58, torch.int32)
        eq_7 = ops.eq(constant_13, constant_14)
        constant_15 = ops.constant(51, torch.int32)
        constant_16 = ops.constant(59, torch.int32)
        eq_8 = ops.eq(constant_15, constant_16)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf25', get_index_1)
        constant_17 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_8, constant_17, load)
        constant_18 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_7, constant_18, where)
        constant_19 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_6, constant_19, where_1)
        constant_20 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_5, constant_20, where_2)
        constant_21 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_4, constant_21, where_3)
        constant_22 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_3, constant_22, where_4)
        constant_23 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_2, constant_23, where_5)
        constant_24 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_1, constant_24, where_6)
        constant_25 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_7, constant_25)
        get_index_2 = self.get_index('index0')
        load_1 = ops.load('full_default', get_index_2)
        where_8 = ops.where(eq, mul, load_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf31', get_index_3, where_8, None)
        return store
op31 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp19 = tl.load(in_ptr0 + (51))
        tmp20 = tl.broadcast_to(tmp19, [XBLOCK])
        tmp32 = tl.load(in_ptr1 + (x0), xmask)
        tmp0 = x0
        tmp1 = tl.full([1], 51, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = tl.full([1], 52, tl.int32)
        tmp4 = tmp1 == tmp3
        tmp5 = tl.full([1], 53, tl.int32)
        tmp6 = tmp1 == tmp5
        tmp7 = tl.full([1], 54, tl.int32)
        tmp8 = tmp1 == tmp7
        tmp9 = tl.full([1], 55, tl.int32)
        tmp10 = tmp1 == tmp9
        tmp11 = tl.full([1], 56, tl.int32)
        tmp12 = tmp1 == tmp11
        tmp13 = tl.full([1], 57, tl.int32)
        tmp14 = tmp1 == tmp13
        tmp15 = tl.full([1], 58, tl.int32)
        tmp16 = tmp1 == tmp15
        tmp17 = tl.full([1], 59, tl.int32)
        tmp18 = tmp1 == tmp17
        tmp21 = 0.0
        tmp22 = tl.where(tmp18, tmp21, tmp20)
        tmp23 = tl.where(tmp16, tmp21, tmp22)
        tmp24 = tl.where(tmp14, tmp21, tmp23)
        tmp25 = tl.where(tmp12, tmp21, tmp24)
        tmp26 = tl.where(tmp10, tmp21, tmp25)
        tmp27 = tl.where(tmp8, tmp21, tmp26)
        tmp28 = tl.where(tmp6, tmp21, tmp27)
        tmp29 = tl.where(tmp4, tmp21, tmp28)
        tmp30 = 2.0
        tmp31 = tmp29 * tmp30
        tmp33 = tl.where(tmp2, tmp31, tmp32)
        tl.store(out_ptr0 + (x0), tmp33, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[24] =
op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 100}, None)]
op34.unmet_dependencies = 
    [   MemoryDep('buf30', c0, {c0: 100}, None),
        MemoryDep('buf31', c0, {c0: 100}, None),
        MemoryDep('buf32', 47, {}, None),
        MemoryDep('buf32', 48, {}, None),
        MemoryDep('buf32', 49, {}, None),
        MemoryDep('buf33', 0, {}, None)]
op34.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf34.users = [NodeUser(node=SchedulerNode(name='op35'), can_inplace=True, is_weak=False)]
]
op34.group.device = cuda:0
op34.group.iteration = (100, 1)
op34.sizes = ([100], [])
buf30_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op34_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 0
    index2 = 49
    index3 = 48
    index4 = 47
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf31', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_2, torch.int32)
        constant = ops.constant(50, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_3 = self.get_index('index1')
        load_2 = ops.load('buf33', get_index_3)
        get_index_4 = self.get_index('index0')
        load_3 = ops.load('full_default', get_index_4)
        where = ops.where(eq, load_2, load_3)
        add_1 = ops.add(add, where)
        get_index_5 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_5, torch.int32)
        constant_1 = ops.constant(49, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_1)
        get_index_6 = self.get_index('index2')
        load_4 = ops.load('buf32', get_index_6)
        constant_2 = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_7 = self.get_index('index0')
        load_5 = ops.load('full_default', get_index_7)
        where_1 = ops.where(eq_1, mul, load_5)
        add_2 = ops.add(add_1, where_1)
        get_index_8 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_8, torch.int32)
        constant_3 = ops.constant(48, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_3)
        constant_4 = ops.constant(48, torch.int32)
        constant_5 = ops.constant(49, torch.int32)
        eq_3 = ops.eq(constant_4, constant_5)
        get_index_9 = self.get_index('index3')
        load_6 = ops.load('buf32', get_index_9)
        constant_6 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_3, constant_6, load_6)
        constant_7 = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(where_2, constant_7)
        get_index_10 = self.get_index('index0')
        load_7 = ops.load('full_default', get_index_10)
        where_3 = ops.where(eq_2, mul_1, load_7)
        add_3 = ops.add(add_2, where_3)
        get_index_11 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_11, torch.int32)
        constant_8 = ops.constant(47, torch.int32)
        eq_4 = ops.eq(index_expr_3, constant_8)
        constant_9 = ops.constant(47, torch.int32)
        constant_10 = ops.constant(48, torch.int32)
        eq_5 = ops.eq(constant_9, constant_10)
        constant_11 = ops.constant(47, torch.int32)
        constant_12 = ops.constant(49, torch.int32)
        eq_6 = ops.eq(constant_11, constant_12)
        get_index_12 = self.get_index('index4')
        load_8 = ops.load('buf32', get_index_12)
        constant_13 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_6, constant_13, load_8)
        constant_14 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_5, constant_14, where_4)
        constant_15 = ops.constant(2.0, torch.float32)
        mul_2 = ops.mul(where_5, constant_15)
        get_index_13 = self.get_index('index0')
        load_9 = ops.load('full_default', get_index_13)
        where_6 = ops.where(eq_4, mul_2, load_9)
        add_4 = ops.add(add_3, where_6)
        get_index_14 = self.get_index('index0')
        store = ops.store('buf34', get_index_14, add_4, None)
        return store
op34 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp1 = tl.load(in_ptr0 + (x0), xmask)
        tmp6 = tl.load(in_ptr1 + (0))
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK])
        tmp8 = tl.load(in_ptr2 + (x0), xmask)
        tmp13 = tl.load(in_ptr3 + (49))
        tmp14 = tl.broadcast_to(tmp13, [XBLOCK])
        tmp22 = tl.load(in_ptr3 + (48))
        tmp23 = tl.broadcast_to(tmp22, [XBLOCK])
        tmp33 = tl.load(in_ptr3 + (47))
        tmp34 = tl.broadcast_to(tmp33, [XBLOCK])
        tmp2 = tmp0 + tmp1
        tmp3 = x0
        tmp4 = tl.full([1], 50, tl.int32)
        tmp5 = tmp3 == tmp4
        tmp9 = tl.where(tmp5, tmp7, tmp8)
        tmp10 = tmp2 + tmp9
        tmp11 = tl.full([1], 49, tl.int32)
        tmp12 = tmp3 == tmp11
        tmp15 = 2.0
        tmp16 = tmp14 * tmp15
        tmp17 = tl.where(tmp12, tmp16, tmp8)
        tmp18 = tmp10 + tmp17
        tmp19 = tl.full([1], 48, tl.int32)
        tmp20 = tmp3 == tmp19
        tmp21 = tmp19 == tmp11
        tmp24 = 0.0
        tmp25 = tl.where(tmp21, tmp24, tmp23)
        tmp26 = tmp25 * tmp15
        tmp27 = tl.where(tmp20, tmp26, tmp8)
        tmp28 = tmp18 + tmp27
        tmp29 = tl.full([1], 47, tl.int32)
        tmp30 = tmp3 == tmp29
        tmp31 = tmp29 == tmp19
        tmp32 = tmp29 == tmp11
        tmp35 = tl.where(tmp32, tmp24, tmp34)
        tmp36 = tl.where(tmp31, tmp24, tmp35)
        tmp37 = tmp36 * tmp15
        tmp38 = tl.where(tmp30, tmp37, tmp8)
        tmp39 = tmp28 + tmp38
        tl.store(in_out_ptr0 + (x0), tmp39, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[25] =
op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 100}, None)]
op35.unmet_dependencies = 
    [   MemoryDep('buf32', 45, {}, None),
        MemoryDep('buf32', 46, {}, None),
        MemoryDep('buf34', c0, {c0: 100}, None)]
op35.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf35.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False)]
]
op35.group.device = cuda:0
op35.group.iteration = (100, 1)
op35.sizes = ([100], [])
buf34_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op35_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 46
    index2 = 45
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf34', get_index)
        get_index_1 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_1, torch.int32)
        constant = ops.constant(46, torch.int32)
        eq = ops.eq(index_expr, constant)
        constant_1 = ops.constant(46, torch.int32)
        constant_2 = ops.constant(47, torch.int32)
        eq_1 = ops.eq(constant_1, constant_2)
        constant_3 = ops.constant(46, torch.int32)
        constant_4 = ops.constant(48, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        constant_5 = ops.constant(46, torch.int32)
        constant_6 = ops.constant(49, torch.int32)
        eq_3 = ops.eq(constant_5, constant_6)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf32', get_index_2)
        constant_7 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_3, constant_7, load_1)
        constant_8 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_2, constant_8, where)
        constant_9 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_1, constant_9, where_1)
        constant_10 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_2, constant_10)
        get_index_3 = self.get_index('index0')
        load_2 = ops.load('full_default', get_index_3)
        where_3 = ops.where(eq, mul, load_2)
        add = ops.add(load, where_3)
        get_index_4 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_4, torch.int32)
        constant_11 = ops.constant(45, torch.int32)
        eq_4 = ops.eq(index_expr_1, constant_11)
        constant_12 = ops.constant(45, torch.int32)
        constant_13 = ops.constant(46, torch.int32)
        eq_5 = ops.eq(constant_12, constant_13)
        constant_14 = ops.constant(45, torch.int32)
        constant_15 = ops.constant(47, torch.int32)
        eq_6 = ops.eq(constant_14, constant_15)
        constant_16 = ops.constant(45, torch.int32)
        constant_17 = ops.constant(48, torch.int32)
        eq_7 = ops.eq(constant_16, constant_17)
        constant_18 = ops.constant(45, torch.int32)
        constant_19 = ops.constant(49, torch.int32)
        eq_8 = ops.eq(constant_18, constant_19)
        get_index_5 = self.get_index('index2')
        load_3 = ops.load('buf32', get_index_5)
        constant_20 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_8, constant_20, load_3)
        constant_21 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_7, constant_21, where_4)
        constant_22 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_6, constant_22, where_5)
        constant_23 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_5, constant_23, where_6)
        constant_24 = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(where_7, constant_24)
        get_index_6 = self.get_index('index0')
        load_4 = ops.load('full_default', get_index_6)
        where_8 = ops.where(eq_4, mul_1, load_4)
        add_1 = ops.add(add, where_8)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf35', get_index_7, add_1, None)
        return store
op35 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp10 = tl.load(in_ptr0 + (46))
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK])
        tmp18 = tl.load(in_ptr1 + (x0), xmask)
        tmp27 = tl.load(in_ptr0 + (45))
        tmp28 = tl.broadcast_to(tmp27, [XBLOCK])
        tmp1 = x0
        tmp2 = tl.full([1], 46, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = tl.full([1], 47, tl.int32)
        tmp5 = tmp2 == tmp4
        tmp6 = tl.full([1], 48, tl.int32)
        tmp7 = tmp2 == tmp6
        tmp8 = tl.full([1], 49, tl.int32)
        tmp9 = tmp2 == tmp8
        tmp12 = 0.0
        tmp13 = tl.where(tmp9, tmp12, tmp11)
        tmp14 = tl.where(tmp7, tmp12, tmp13)
        tmp15 = tl.where(tmp5, tmp12, tmp14)
        tmp16 = 2.0
        tmp17 = tmp15 * tmp16
        tmp19 = tl.where(tmp3, tmp17, tmp18)
        tmp20 = tmp0 + tmp19
        tmp21 = tl.full([1], 45, tl.int32)
        tmp22 = tmp1 == tmp21
        tmp23 = tmp21 == tmp2
        tmp24 = tmp21 == tmp4
        tmp25 = tmp21 == tmp6
        tmp26 = tmp21 == tmp8
        tmp29 = tl.where(tmp26, tmp12, tmp28)
        tmp30 = tl.where(tmp25, tmp12, tmp29)
        tmp31 = tl.where(tmp24, tmp12, tmp30)
        tmp32 = tl.where(tmp23, tmp12, tmp31)
        tmp33 = tmp32 * tmp16
        tmp34 = tl.where(tmp22, tmp33, tmp18)
        tmp35 = tmp20 + tmp34
        tl.store(in_out_ptr0 + (x0), tmp35, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[26] =
op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 100}, None)]
op36.unmet_dependencies = 
    [   MemoryDep('buf32', 43, {}, None),
        MemoryDep('buf32', 44, {}, None),
        MemoryDep('buf35', c0, {c0: 100}, None)]
op36.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf36.users = [NodeUser(node=SchedulerNode(name='op37'), can_inplace=True, is_weak=False)]
]
op36.group.device = cuda:0
op36.group.iteration = (100, 1)
op36.sizes = ([100], [])
buf35_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op36_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 44
    index2 = 43
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        get_index_1 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_1, torch.int32)
        constant = ops.constant(44, torch.int32)
        eq = ops.eq(index_expr, constant)
        constant_1 = ops.constant(44, torch.int32)
        constant_2 = ops.constant(45, torch.int32)
        eq_1 = ops.eq(constant_1, constant_2)
        constant_3 = ops.constant(44, torch.int32)
        constant_4 = ops.constant(46, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        constant_5 = ops.constant(44, torch.int32)
        constant_6 = ops.constant(47, torch.int32)
        eq_3 = ops.eq(constant_5, constant_6)
        constant_7 = ops.constant(44, torch.int32)
        constant_8 = ops.constant(48, torch.int32)
        eq_4 = ops.eq(constant_7, constant_8)
        constant_9 = ops.constant(44, torch.int32)
        constant_10 = ops.constant(49, torch.int32)
        eq_5 = ops.eq(constant_9, constant_10)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf32', get_index_2)
        constant_11 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_5, constant_11, load_1)
        constant_12 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_4, constant_12, where)
        constant_13 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_3, constant_13, where_1)
        constant_14 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_2, constant_14, where_2)
        constant_15 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_1, constant_15, where_3)
        constant_16 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_4, constant_16)
        get_index_3 = self.get_index('index0')
        load_2 = ops.load('full_default', get_index_3)
        where_5 = ops.where(eq, mul, load_2)
        add = ops.add(load, where_5)
        get_index_4 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_4, torch.int32)
        constant_17 = ops.constant(43, torch.int32)
        eq_6 = ops.eq(index_expr_1, constant_17)
        constant_18 = ops.constant(43, torch.int32)
        constant_19 = ops.constant(44, torch.int32)
        eq_7 = ops.eq(constant_18, constant_19)
        constant_20 = ops.constant(43, torch.int32)
        constant_21 = ops.constant(45, torch.int32)
        eq_8 = ops.eq(constant_20, constant_21)
        constant_22 = ops.constant(43, torch.int32)
        constant_23 = ops.constant(46, torch.int32)
        eq_9 = ops.eq(constant_22, constant_23)
        constant_24 = ops.constant(43, torch.int32)
        constant_25 = ops.constant(47, torch.int32)
        eq_10 = ops.eq(constant_24, constant_25)
        constant_26 = ops.constant(43, torch.int32)
        constant_27 = ops.constant(48, torch.int32)
        eq_11 = ops.eq(constant_26, constant_27)
        constant_28 = ops.constant(43, torch.int32)
        constant_29 = ops.constant(49, torch.int32)
        eq_12 = ops.eq(constant_28, constant_29)
        get_index_5 = self.get_index('index2')
        load_3 = ops.load('buf32', get_index_5)
        constant_30 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_12, constant_30, load_3)
        constant_31 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_11, constant_31, where_6)
        constant_32 = ops.constant(0.0, torch.float32)
        where_8 = ops.where(eq_10, constant_32, where_7)
        constant_33 = ops.constant(0.0, torch.float32)
        where_9 = ops.where(eq_9, constant_33, where_8)
        constant_34 = ops.constant(0.0, torch.float32)
        where_10 = ops.where(eq_8, constant_34, where_9)
        constant_35 = ops.constant(0.0, torch.float32)
        where_11 = ops.where(eq_7, constant_35, where_10)
        constant_36 = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(where_11, constant_36)
        get_index_6 = self.get_index('index0')
        load_4 = ops.load('full_default', get_index_6)
        where_12 = ops.where(eq_6, mul_1, load_4)
        add_1 = ops.add(add, where_12)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf36', get_index_7, add_1, None)
        return store
op36 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp14 = tl.load(in_ptr0 + (44))
        tmp15 = tl.broadcast_to(tmp14, [XBLOCK])
        tmp24 = tl.load(in_ptr1 + (x0), xmask)
        tmp35 = tl.load(in_ptr0 + (43))
        tmp36 = tl.broadcast_to(tmp35, [XBLOCK])
        tmp1 = x0
        tmp2 = tl.full([1], 44, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = tl.full([1], 45, tl.int32)
        tmp5 = tmp2 == tmp4
        tmp6 = tl.full([1], 46, tl.int32)
        tmp7 = tmp2 == tmp6
        tmp8 = tl.full([1], 47, tl.int32)
        tmp9 = tmp2 == tmp8
        tmp10 = tl.full([1], 48, tl.int32)
        tmp11 = tmp2 == tmp10
        tmp12 = tl.full([1], 49, tl.int32)
        tmp13 = tmp2 == tmp12
        tmp16 = 0.0
        tmp17 = tl.where(tmp13, tmp16, tmp15)
        tmp18 = tl.where(tmp11, tmp16, tmp17)
        tmp19 = tl.where(tmp9, tmp16, tmp18)
        tmp20 = tl.where(tmp7, tmp16, tmp19)
        tmp21 = tl.where(tmp5, tmp16, tmp20)
        tmp22 = 2.0
        tmp23 = tmp21 * tmp22
        tmp25 = tl.where(tmp3, tmp23, tmp24)
        tmp26 = tmp0 + tmp25
        tmp27 = tl.full([1], 43, tl.int32)
        tmp28 = tmp1 == tmp27
        tmp29 = tmp27 == tmp2
        tmp30 = tmp27 == tmp4
        tmp31 = tmp27 == tmp6
        tmp32 = tmp27 == tmp8
        tmp33 = tmp27 == tmp10
        tmp34 = tmp27 == tmp12
        tmp37 = tl.where(tmp34, tmp16, tmp36)
        tmp38 = tl.where(tmp33, tmp16, tmp37)
        tmp39 = tl.where(tmp32, tmp16, tmp38)
        tmp40 = tl.where(tmp31, tmp16, tmp39)
        tmp41 = tl.where(tmp30, tmp16, tmp40)
        tmp42 = tl.where(tmp29, tmp16, tmp41)
        tmp43 = tmp42 * tmp22
        tmp44 = tl.where(tmp28, tmp43, tmp24)
        tmp45 = tmp26 + tmp44
        tl.store(in_out_ptr0 + (x0), tmp45, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[27] =
op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 100}, None)]
op37.unmet_dependencies = [MemoryDep('buf32', 42, {}, None), MemoryDep('buf36', c0, {c0: 100}, None)]
op37.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf37.users = [NodeUser(node=SchedulerNode(name='op41'), can_inplace=True, is_weak=False)]
]
op37.group.device = cuda:0
op37.group.iteration = (100, 1)
op37.sizes = ([100], [])
buf36_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf37_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op37_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 42
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        get_index_1 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_1, torch.int32)
        constant = ops.constant(42, torch.int32)
        eq = ops.eq(index_expr, constant)
        constant_1 = ops.constant(42, torch.int32)
        constant_2 = ops.constant(43, torch.int32)
        eq_1 = ops.eq(constant_1, constant_2)
        constant_3 = ops.constant(42, torch.int32)
        constant_4 = ops.constant(44, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        constant_5 = ops.constant(42, torch.int32)
        constant_6 = ops.constant(45, torch.int32)
        eq_3 = ops.eq(constant_5, constant_6)
        constant_7 = ops.constant(42, torch.int32)
        constant_8 = ops.constant(46, torch.int32)
        eq_4 = ops.eq(constant_7, constant_8)
        constant_9 = ops.constant(42, torch.int32)
        constant_10 = ops.constant(47, torch.int32)
        eq_5 = ops.eq(constant_9, constant_10)
        constant_11 = ops.constant(42, torch.int32)
        constant_12 = ops.constant(48, torch.int32)
        eq_6 = ops.eq(constant_11, constant_12)
        constant_13 = ops.constant(42, torch.int32)
        constant_14 = ops.constant(49, torch.int32)
        eq_7 = ops.eq(constant_13, constant_14)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf32', get_index_2)
        constant_15 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_7, constant_15, load_1)
        constant_16 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_6, constant_16, where)
        constant_17 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_5, constant_17, where_1)
        constant_18 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_4, constant_18, where_2)
        constant_19 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_3, constant_19, where_3)
        constant_20 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_2, constant_20, where_4)
        constant_21 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_1, constant_21, where_5)
        constant_22 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_6, constant_22)
        get_index_3 = self.get_index('index0')
        load_2 = ops.load('full_default', get_index_3)
        where_7 = ops.where(eq, mul, load_2)
        add = ops.add(load, where_7)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf37', get_index_4, add, None)
        return store
op37 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp18 = tl.load(in_ptr0 + (42))
        tmp19 = tl.broadcast_to(tmp18, [XBLOCK])
        tmp30 = tl.load(in_ptr1 + (x0), xmask)
        tmp1 = x0
        tmp2 = tl.full([1], 42, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = tl.full([1], 43, tl.int32)
        tmp5 = tmp2 == tmp4
        tmp6 = tl.full([1], 44, tl.int32)
        tmp7 = tmp2 == tmp6
        tmp8 = tl.full([1], 45, tl.int32)
        tmp9 = tmp2 == tmp8
        tmp10 = tl.full([1], 46, tl.int32)
        tmp11 = tmp2 == tmp10
        tmp12 = tl.full([1], 47, tl.int32)
        tmp13 = tmp2 == tmp12
        tmp14 = tl.full([1], 48, tl.int32)
        tmp15 = tmp2 == tmp14
        tmp16 = tl.full([1], 49, tl.int32)
        tmp17 = tmp2 == tmp16
        tmp20 = 0.0
        tmp21 = tl.where(tmp17, tmp20, tmp19)
        tmp22 = tl.where(tmp15, tmp20, tmp21)
        tmp23 = tl.where(tmp13, tmp20, tmp22)
        tmp24 = tl.where(tmp11, tmp20, tmp23)
        tmp25 = tl.where(tmp9, tmp20, tmp24)
        tmp26 = tl.where(tmp7, tmp20, tmp25)
        tmp27 = tl.where(tmp5, tmp20, tmp26)
        tmp28 = 2.0
        tmp29 = tmp27 * tmp28
        tmp31 = tl.where(tmp3, tmp29, tmp30)
        tmp32 = tmp0 + tmp31
        tl.store(in_out_ptr0 + (x0), tmp32, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[28] =
op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', c0, {c0: 100}, None)]
op38.unmet_dependencies = [MemoryDep('buf32', 41, {}, None)]
op38.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf38.users = [NodeUser(node=SchedulerNode(name='op41'), can_inplace=True, is_weak=False)]
]
op38.group.device = cuda:0
op38.group.iteration = (100, 1)
op38.sizes = ([100], [])
buf32_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf38_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op38_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 41
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(41, torch.int32)
        eq = ops.eq(index_expr, constant)
        constant_1 = ops.constant(41, torch.int32)
        constant_2 = ops.constant(42, torch.int32)
        eq_1 = ops.eq(constant_1, constant_2)
        constant_3 = ops.constant(41, torch.int32)
        constant_4 = ops.constant(43, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        constant_5 = ops.constant(41, torch.int32)
        constant_6 = ops.constant(44, torch.int32)
        eq_3 = ops.eq(constant_5, constant_6)
        constant_7 = ops.constant(41, torch.int32)
        constant_8 = ops.constant(45, torch.int32)
        eq_4 = ops.eq(constant_7, constant_8)
        constant_9 = ops.constant(41, torch.int32)
        constant_10 = ops.constant(46, torch.int32)
        eq_5 = ops.eq(constant_9, constant_10)
        constant_11 = ops.constant(41, torch.int32)
        constant_12 = ops.constant(47, torch.int32)
        eq_6 = ops.eq(constant_11, constant_12)
        constant_13 = ops.constant(41, torch.int32)
        constant_14 = ops.constant(48, torch.int32)
        eq_7 = ops.eq(constant_13, constant_14)
        constant_15 = ops.constant(41, torch.int32)
        constant_16 = ops.constant(49, torch.int32)
        eq_8 = ops.eq(constant_15, constant_16)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf32', get_index_1)
        constant_17 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_8, constant_17, load)
        constant_18 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_7, constant_18, where)
        constant_19 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_6, constant_19, where_1)
        constant_20 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_5, constant_20, where_2)
        constant_21 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_4, constant_21, where_3)
        constant_22 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_3, constant_22, where_4)
        constant_23 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_2, constant_23, where_5)
        constant_24 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_1, constant_24, where_6)
        constant_25 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_7, constant_25)
        get_index_2 = self.get_index('index0')
        load_1 = ops.load('full_default', get_index_2)
        where_8 = ops.where(eq, mul, load_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf38', get_index_3, where_8, None)
        return store
op38 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp19 = tl.load(in_ptr0 + (41))
        tmp20 = tl.broadcast_to(tmp19, [XBLOCK])
        tmp32 = tl.load(in_ptr1 + (x0), xmask)
        tmp0 = x0
        tmp1 = tl.full([1], 41, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = tl.full([1], 42, tl.int32)
        tmp4 = tmp1 == tmp3
        tmp5 = tl.full([1], 43, tl.int32)
        tmp6 = tmp1 == tmp5
        tmp7 = tl.full([1], 44, tl.int32)
        tmp8 = tmp1 == tmp7
        tmp9 = tl.full([1], 45, tl.int32)
        tmp10 = tmp1 == tmp9
        tmp11 = tl.full([1], 46, tl.int32)
        tmp12 = tmp1 == tmp11
        tmp13 = tl.full([1], 47, tl.int32)
        tmp14 = tmp1 == tmp13
        tmp15 = tl.full([1], 48, tl.int32)
        tmp16 = tmp1 == tmp15
        tmp17 = tl.full([1], 49, tl.int32)
        tmp18 = tmp1 == tmp17
        tmp21 = 0.0
        tmp22 = tl.where(tmp18, tmp21, tmp20)
        tmp23 = tl.where(tmp16, tmp21, tmp22)
        tmp24 = tl.where(tmp14, tmp21, tmp23)
        tmp25 = tl.where(tmp12, tmp21, tmp24)
        tmp26 = tl.where(tmp10, tmp21, tmp25)
        tmp27 = tl.where(tmp8, tmp21, tmp26)
        tmp28 = tl.where(tmp6, tmp21, tmp27)
        tmp29 = tl.where(tmp4, tmp21, tmp28)
        tmp30 = 2.0
        tmp31 = tmp29 * tmp30
        tmp33 = tl.where(tmp2, tmp31, tmp32)
        tl.store(out_ptr0 + (x0), tmp33, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[29] =
op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 100}, None)]
op41.unmet_dependencies = 
    [   MemoryDep('buf37', c0, {c0: 100}, None),
        MemoryDep('buf38', c0, {c0: 100}, None),
        MemoryDep('buf39', 37, {}, None),
        MemoryDep('buf39', 38, {}, None),
        MemoryDep('buf39', 39, {}, None),
        MemoryDep('buf40', 0, {}, None)]
op41.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf41.users = [NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False)]
]
op41.group.device = cuda:0
op41.group.iteration = (100, 1)
op41.sizes = ([100], [])
buf37_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf38_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op41_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 0
    index2 = 39
    index3 = 38
    index4 = 37
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf37', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf38', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_2, torch.int32)
        constant = ops.constant(40, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_3 = self.get_index('index1')
        load_2 = ops.load('buf40', get_index_3)
        get_index_4 = self.get_index('index0')
        load_3 = ops.load('full_default', get_index_4)
        where = ops.where(eq, load_2, load_3)
        add_1 = ops.add(add, where)
        get_index_5 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_5, torch.int32)
        constant_1 = ops.constant(39, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_1)
        get_index_6 = self.get_index('index2')
        load_4 = ops.load('buf39', get_index_6)
        constant_2 = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_7 = self.get_index('index0')
        load_5 = ops.load('full_default', get_index_7)
        where_1 = ops.where(eq_1, mul, load_5)
        add_2 = ops.add(add_1, where_1)
        get_index_8 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_8, torch.int32)
        constant_3 = ops.constant(38, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_3)
        constant_4 = ops.constant(38, torch.int32)
        constant_5 = ops.constant(39, torch.int32)
        eq_3 = ops.eq(constant_4, constant_5)
        get_index_9 = self.get_index('index3')
        load_6 = ops.load('buf39', get_index_9)
        constant_6 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_3, constant_6, load_6)
        constant_7 = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(where_2, constant_7)
        get_index_10 = self.get_index('index0')
        load_7 = ops.load('full_default', get_index_10)
        where_3 = ops.where(eq_2, mul_1, load_7)
        add_3 = ops.add(add_2, where_3)
        get_index_11 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_11, torch.int32)
        constant_8 = ops.constant(37, torch.int32)
        eq_4 = ops.eq(index_expr_3, constant_8)
        constant_9 = ops.constant(37, torch.int32)
        constant_10 = ops.constant(38, torch.int32)
        eq_5 = ops.eq(constant_9, constant_10)
        constant_11 = ops.constant(37, torch.int32)
        constant_12 = ops.constant(39, torch.int32)
        eq_6 = ops.eq(constant_11, constant_12)
        get_index_12 = self.get_index('index4')
        load_8 = ops.load('buf39', get_index_12)
        constant_13 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_6, constant_13, load_8)
        constant_14 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_5, constant_14, where_4)
        constant_15 = ops.constant(2.0, torch.float32)
        mul_2 = ops.mul(where_5, constant_15)
        get_index_13 = self.get_index('index0')
        load_9 = ops.load('full_default', get_index_13)
        where_6 = ops.where(eq_4, mul_2, load_9)
        add_4 = ops.add(add_3, where_6)
        get_index_14 = self.get_index('index0')
        store = ops.store('buf41', get_index_14, add_4, None)
        return store
op41 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp1 = tl.load(in_ptr0 + (x0), xmask)
        tmp6 = tl.load(in_ptr1 + (0))
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK])
        tmp8 = tl.load(in_ptr2 + (x0), xmask)
        tmp13 = tl.load(in_ptr3 + (39))
        tmp14 = tl.broadcast_to(tmp13, [XBLOCK])
        tmp22 = tl.load(in_ptr3 + (38))
        tmp23 = tl.broadcast_to(tmp22, [XBLOCK])
        tmp33 = tl.load(in_ptr3 + (37))
        tmp34 = tl.broadcast_to(tmp33, [XBLOCK])
        tmp2 = tmp0 + tmp1
        tmp3 = x0
        tmp4 = tl.full([1], 40, tl.int32)
        tmp5 = tmp3 == tmp4
        tmp9 = tl.where(tmp5, tmp7, tmp8)
        tmp10 = tmp2 + tmp9
        tmp11 = tl.full([1], 39, tl.int32)
        tmp12 = tmp3 == tmp11
        tmp15 = 2.0
        tmp16 = tmp14 * tmp15
        tmp17 = tl.where(tmp12, tmp16, tmp8)
        tmp18 = tmp10 + tmp17
        tmp19 = tl.full([1], 38, tl.int32)
        tmp20 = tmp3 == tmp19
        tmp21 = tmp19 == tmp11
        tmp24 = 0.0
        tmp25 = tl.where(tmp21, tmp24, tmp23)
        tmp26 = tmp25 * tmp15
        tmp27 = tl.where(tmp20, tmp26, tmp8)
        tmp28 = tmp18 + tmp27
        tmp29 = tl.full([1], 37, tl.int32)
        tmp30 = tmp3 == tmp29
        tmp31 = tmp29 == tmp19
        tmp32 = tmp29 == tmp11
        tmp35 = tl.where(tmp32, tmp24, tmp34)
        tmp36 = tl.where(tmp31, tmp24, tmp35)
        tmp37 = tmp36 * tmp15
        tmp38 = tl.where(tmp30, tmp37, tmp8)
        tmp39 = tmp28 + tmp38
        tl.store(in_out_ptr0 + (x0), tmp39, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[30] =
op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 100}, None)]
op42.unmet_dependencies = 
    [   MemoryDep('buf39', 35, {}, None),
        MemoryDep('buf39', 36, {}, None),
        MemoryDep('buf41', c0, {c0: 100}, None)]
op42.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf42.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=True, is_weak=False)]
]
op42.group.device = cuda:0
op42.group.iteration = (100, 1)
op42.sizes = ([100], [])
buf41_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op42_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 36
    index2 = 35
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        get_index_1 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_1, torch.int32)
        constant = ops.constant(36, torch.int32)
        eq = ops.eq(index_expr, constant)
        constant_1 = ops.constant(36, torch.int32)
        constant_2 = ops.constant(37, torch.int32)
        eq_1 = ops.eq(constant_1, constant_2)
        constant_3 = ops.constant(36, torch.int32)
        constant_4 = ops.constant(38, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        constant_5 = ops.constant(36, torch.int32)
        constant_6 = ops.constant(39, torch.int32)
        eq_3 = ops.eq(constant_5, constant_6)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf39', get_index_2)
        constant_7 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_3, constant_7, load_1)
        constant_8 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_2, constant_8, where)
        constant_9 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_1, constant_9, where_1)
        constant_10 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_2, constant_10)
        get_index_3 = self.get_index('index0')
        load_2 = ops.load('full_default', get_index_3)
        where_3 = ops.where(eq, mul, load_2)
        add = ops.add(load, where_3)
        get_index_4 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_4, torch.int32)
        constant_11 = ops.constant(35, torch.int32)
        eq_4 = ops.eq(index_expr_1, constant_11)
        constant_12 = ops.constant(35, torch.int32)
        constant_13 = ops.constant(36, torch.int32)
        eq_5 = ops.eq(constant_12, constant_13)
        constant_14 = ops.constant(35, torch.int32)
        constant_15 = ops.constant(37, torch.int32)
        eq_6 = ops.eq(constant_14, constant_15)
        constant_16 = ops.constant(35, torch.int32)
        constant_17 = ops.constant(38, torch.int32)
        eq_7 = ops.eq(constant_16, constant_17)
        constant_18 = ops.constant(35, torch.int32)
        constant_19 = ops.constant(39, torch.int32)
        eq_8 = ops.eq(constant_18, constant_19)
        get_index_5 = self.get_index('index2')
        load_3 = ops.load('buf39', get_index_5)
        constant_20 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_8, constant_20, load_3)
        constant_21 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_7, constant_21, where_4)
        constant_22 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_6, constant_22, where_5)
        constant_23 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_5, constant_23, where_6)
        constant_24 = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(where_7, constant_24)
        get_index_6 = self.get_index('index0')
        load_4 = ops.load('full_default', get_index_6)
        where_8 = ops.where(eq_4, mul_1, load_4)
        add_1 = ops.add(add, where_8)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf42', get_index_7, add_1, None)
        return store
op42 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp10 = tl.load(in_ptr0 + (36))
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK])
        tmp18 = tl.load(in_ptr1 + (x0), xmask)
        tmp27 = tl.load(in_ptr0 + (35))
        tmp28 = tl.broadcast_to(tmp27, [XBLOCK])
        tmp1 = x0
        tmp2 = tl.full([1], 36, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = tl.full([1], 37, tl.int32)
        tmp5 = tmp2 == tmp4
        tmp6 = tl.full([1], 38, tl.int32)
        tmp7 = tmp2 == tmp6
        tmp8 = tl.full([1], 39, tl.int32)
        tmp9 = tmp2 == tmp8
        tmp12 = 0.0
        tmp13 = tl.where(tmp9, tmp12, tmp11)
        tmp14 = tl.where(tmp7, tmp12, tmp13)
        tmp15 = tl.where(tmp5, tmp12, tmp14)
        tmp16 = 2.0
        tmp17 = tmp15 * tmp16
        tmp19 = tl.where(tmp3, tmp17, tmp18)
        tmp20 = tmp0 + tmp19
        tmp21 = tl.full([1], 35, tl.int32)
        tmp22 = tmp1 == tmp21
        tmp23 = tmp21 == tmp2
        tmp24 = tmp21 == tmp4
        tmp25 = tmp21 == tmp6
        tmp26 = tmp21 == tmp8
        tmp29 = tl.where(tmp26, tmp12, tmp28)
        tmp30 = tl.where(tmp25, tmp12, tmp29)
        tmp31 = tl.where(tmp24, tmp12, tmp30)
        tmp32 = tl.where(tmp23, tmp12, tmp31)
        tmp33 = tmp32 * tmp16
        tmp34 = tl.where(tmp22, tmp33, tmp18)
        tmp35 = tmp20 + tmp34
        tl.store(in_out_ptr0 + (x0), tmp35, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[31] =
op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 100}, None)]
op43.unmet_dependencies = 
    [   MemoryDep('buf39', 33, {}, None),
        MemoryDep('buf39', 34, {}, None),
        MemoryDep('buf42', c0, {c0: 100}, None)]
op43.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf43.users = [NodeUser(node=SchedulerNode(name='op44'), can_inplace=True, is_weak=False)]
]
op43.group.device = cuda:0
op43.group.iteration = (100, 1)
op43.sizes = ([100], [])
buf42_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op43_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 34
    index2 = 33
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_1, torch.int32)
        constant = ops.constant(34, torch.int32)
        eq = ops.eq(index_expr, constant)
        constant_1 = ops.constant(34, torch.int32)
        constant_2 = ops.constant(35, torch.int32)
        eq_1 = ops.eq(constant_1, constant_2)
        constant_3 = ops.constant(34, torch.int32)
        constant_4 = ops.constant(36, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        constant_5 = ops.constant(34, torch.int32)
        constant_6 = ops.constant(37, torch.int32)
        eq_3 = ops.eq(constant_5, constant_6)
        constant_7 = ops.constant(34, torch.int32)
        constant_8 = ops.constant(38, torch.int32)
        eq_4 = ops.eq(constant_7, constant_8)
        constant_9 = ops.constant(34, torch.int32)
        constant_10 = ops.constant(39, torch.int32)
        eq_5 = ops.eq(constant_9, constant_10)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf39', get_index_2)
        constant_11 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_5, constant_11, load_1)
        constant_12 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_4, constant_12, where)
        constant_13 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_3, constant_13, where_1)
        constant_14 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_2, constant_14, where_2)
        constant_15 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_1, constant_15, where_3)
        constant_16 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_4, constant_16)
        get_index_3 = self.get_index('index0')
        load_2 = ops.load('full_default', get_index_3)
        where_5 = ops.where(eq, mul, load_2)
        add = ops.add(load, where_5)
        get_index_4 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_4, torch.int32)
        constant_17 = ops.constant(33, torch.int32)
        eq_6 = ops.eq(index_expr_1, constant_17)
        constant_18 = ops.constant(33, torch.int32)
        constant_19 = ops.constant(34, torch.int32)
        eq_7 = ops.eq(constant_18, constant_19)
        constant_20 = ops.constant(33, torch.int32)
        constant_21 = ops.constant(35, torch.int32)
        eq_8 = ops.eq(constant_20, constant_21)
        constant_22 = ops.constant(33, torch.int32)
        constant_23 = ops.constant(36, torch.int32)
        eq_9 = ops.eq(constant_22, constant_23)
        constant_24 = ops.constant(33, torch.int32)
        constant_25 = ops.constant(37, torch.int32)
        eq_10 = ops.eq(constant_24, constant_25)
        constant_26 = ops.constant(33, torch.int32)
        constant_27 = ops.constant(38, torch.int32)
        eq_11 = ops.eq(constant_26, constant_27)
        constant_28 = ops.constant(33, torch.int32)
        constant_29 = ops.constant(39, torch.int32)
        eq_12 = ops.eq(constant_28, constant_29)
        get_index_5 = self.get_index('index2')
        load_3 = ops.load('buf39', get_index_5)
        constant_30 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_12, constant_30, load_3)
        constant_31 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_11, constant_31, where_6)
        constant_32 = ops.constant(0.0, torch.float32)
        where_8 = ops.where(eq_10, constant_32, where_7)
        constant_33 = ops.constant(0.0, torch.float32)
        where_9 = ops.where(eq_9, constant_33, where_8)
        constant_34 = ops.constant(0.0, torch.float32)
        where_10 = ops.where(eq_8, constant_34, where_9)
        constant_35 = ops.constant(0.0, torch.float32)
        where_11 = ops.where(eq_7, constant_35, where_10)
        constant_36 = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(where_11, constant_36)
        get_index_6 = self.get_index('index0')
        load_4 = ops.load('full_default', get_index_6)
        where_12 = ops.where(eq_6, mul_1, load_4)
        add_1 = ops.add(add, where_12)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf43', get_index_7, add_1, None)
        return store
op43 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp14 = tl.load(in_ptr0 + (34))
        tmp15 = tl.broadcast_to(tmp14, [XBLOCK])
        tmp24 = tl.load(in_ptr1 + (x0), xmask)
        tmp35 = tl.load(in_ptr0 + (33))
        tmp36 = tl.broadcast_to(tmp35, [XBLOCK])
        tmp1 = x0
        tmp2 = tl.full([1], 34, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = tl.full([1], 35, tl.int32)
        tmp5 = tmp2 == tmp4
        tmp6 = tl.full([1], 36, tl.int32)
        tmp7 = tmp2 == tmp6
        tmp8 = tl.full([1], 37, tl.int32)
        tmp9 = tmp2 == tmp8
        tmp10 = tl.full([1], 38, tl.int32)
        tmp11 = tmp2 == tmp10
        tmp12 = tl.full([1], 39, tl.int32)
        tmp13 = tmp2 == tmp12
        tmp16 = 0.0
        tmp17 = tl.where(tmp13, tmp16, tmp15)
        tmp18 = tl.where(tmp11, tmp16, tmp17)
        tmp19 = tl.where(tmp9, tmp16, tmp18)
        tmp20 = tl.where(tmp7, tmp16, tmp19)
        tmp21 = tl.where(tmp5, tmp16, tmp20)
        tmp22 = 2.0
        tmp23 = tmp21 * tmp22
        tmp25 = tl.where(tmp3, tmp23, tmp24)
        tmp26 = tmp0 + tmp25
        tmp27 = tl.full([1], 33, tl.int32)
        tmp28 = tmp1 == tmp27
        tmp29 = tmp27 == tmp2
        tmp30 = tmp27 == tmp4
        tmp31 = tmp27 == tmp6
        tmp32 = tmp27 == tmp8
        tmp33 = tmp27 == tmp10
        tmp34 = tmp27 == tmp12
        tmp37 = tl.where(tmp34, tmp16, tmp36)
        tmp38 = tl.where(tmp33, tmp16, tmp37)
        tmp39 = tl.where(tmp32, tmp16, tmp38)
        tmp40 = tl.where(tmp31, tmp16, tmp39)
        tmp41 = tl.where(tmp30, tmp16, tmp40)
        tmp42 = tl.where(tmp29, tmp16, tmp41)
        tmp43 = tmp42 * tmp22
        tmp44 = tl.where(tmp28, tmp43, tmp24)
        tmp45 = tmp26 + tmp44
        tl.store(in_out_ptr0 + (x0), tmp45, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[32] =
op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 100}, None)]
op44.unmet_dependencies = [MemoryDep('buf39', 32, {}, None), MemoryDep('buf43', c0, {c0: 100}, None)]
op44.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf44.users = [NodeUser(node=SchedulerNode(name='op48'), can_inplace=True, is_weak=False)]
]
op44.group.device = cuda:0
op44.group.iteration = (100, 1)
op44.sizes = ([100], [])
buf43_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf44_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op44_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 32
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_1, torch.int32)
        constant = ops.constant(32, torch.int32)
        eq = ops.eq(index_expr, constant)
        constant_1 = ops.constant(32, torch.int32)
        constant_2 = ops.constant(33, torch.int32)
        eq_1 = ops.eq(constant_1, constant_2)
        constant_3 = ops.constant(32, torch.int32)
        constant_4 = ops.constant(34, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        constant_5 = ops.constant(32, torch.int32)
        constant_6 = ops.constant(35, torch.int32)
        eq_3 = ops.eq(constant_5, constant_6)
        constant_7 = ops.constant(32, torch.int32)
        constant_8 = ops.constant(36, torch.int32)
        eq_4 = ops.eq(constant_7, constant_8)
        constant_9 = ops.constant(32, torch.int32)
        constant_10 = ops.constant(37, torch.int32)
        eq_5 = ops.eq(constant_9, constant_10)
        constant_11 = ops.constant(32, torch.int32)
        constant_12 = ops.constant(38, torch.int32)
        eq_6 = ops.eq(constant_11, constant_12)
        constant_13 = ops.constant(32, torch.int32)
        constant_14 = ops.constant(39, torch.int32)
        eq_7 = ops.eq(constant_13, constant_14)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf39', get_index_2)
        constant_15 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_7, constant_15, load_1)
        constant_16 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_6, constant_16, where)
        constant_17 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_5, constant_17, where_1)
        constant_18 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_4, constant_18, where_2)
        constant_19 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_3, constant_19, where_3)
        constant_20 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_2, constant_20, where_4)
        constant_21 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_1, constant_21, where_5)
        constant_22 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_6, constant_22)
        get_index_3 = self.get_index('index0')
        load_2 = ops.load('full_default', get_index_3)
        where_7 = ops.where(eq, mul, load_2)
        add = ops.add(load, where_7)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf44', get_index_4, add, None)
        return store
op44 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp18 = tl.load(in_ptr0 + (32))
        tmp19 = tl.broadcast_to(tmp18, [XBLOCK])
        tmp30 = tl.load(in_ptr1 + (x0), xmask)
        tmp1 = x0
        tmp2 = tl.full([1], 32, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = tl.full([1], 33, tl.int32)
        tmp5 = tmp2 == tmp4
        tmp6 = tl.full([1], 34, tl.int32)
        tmp7 = tmp2 == tmp6
        tmp8 = tl.full([1], 35, tl.int32)
        tmp9 = tmp2 == tmp8
        tmp10 = tl.full([1], 36, tl.int32)
        tmp11 = tmp2 == tmp10
        tmp12 = tl.full([1], 37, tl.int32)
        tmp13 = tmp2 == tmp12
        tmp14 = tl.full([1], 38, tl.int32)
        tmp15 = tmp2 == tmp14
        tmp16 = tl.full([1], 39, tl.int32)
        tmp17 = tmp2 == tmp16
        tmp20 = 0.0
        tmp21 = tl.where(tmp17, tmp20, tmp19)
        tmp22 = tl.where(tmp15, tmp20, tmp21)
        tmp23 = tl.where(tmp13, tmp20, tmp22)
        tmp24 = tl.where(tmp11, tmp20, tmp23)
        tmp25 = tl.where(tmp9, tmp20, tmp24)
        tmp26 = tl.where(tmp7, tmp20, tmp25)
        tmp27 = tl.where(tmp5, tmp20, tmp26)
        tmp28 = 2.0
        tmp29 = tmp27 * tmp28
        tmp31 = tl.where(tmp3, tmp29, tmp30)
        tmp32 = tmp0 + tmp31
        tl.store(in_out_ptr0 + (x0), tmp32, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[33] =
op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 100}, None)]
op45.unmet_dependencies = [MemoryDep('buf39', 31, {}, None)]
op45.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf45.users = [NodeUser(node=SchedulerNode(name='op48'), can_inplace=True, is_weak=False)]
]
op45.group.device = cuda:0
op45.group.iteration = (100, 1)
op45.sizes = ([100], [])
buf39_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf45_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op45_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 31
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(31, torch.int32)
        eq = ops.eq(index_expr, constant)
        constant_1 = ops.constant(31, torch.int32)
        constant_2 = ops.constant(32, torch.int32)
        eq_1 = ops.eq(constant_1, constant_2)
        constant_3 = ops.constant(31, torch.int32)
        constant_4 = ops.constant(33, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        constant_5 = ops.constant(31, torch.int32)
        constant_6 = ops.constant(34, torch.int32)
        eq_3 = ops.eq(constant_5, constant_6)
        constant_7 = ops.constant(31, torch.int32)
        constant_8 = ops.constant(35, torch.int32)
        eq_4 = ops.eq(constant_7, constant_8)
        constant_9 = ops.constant(31, torch.int32)
        constant_10 = ops.constant(36, torch.int32)
        eq_5 = ops.eq(constant_9, constant_10)
        constant_11 = ops.constant(31, torch.int32)
        constant_12 = ops.constant(37, torch.int32)
        eq_6 = ops.eq(constant_11, constant_12)
        constant_13 = ops.constant(31, torch.int32)
        constant_14 = ops.constant(38, torch.int32)
        eq_7 = ops.eq(constant_13, constant_14)
        constant_15 = ops.constant(31, torch.int32)
        constant_16 = ops.constant(39, torch.int32)
        eq_8 = ops.eq(constant_15, constant_16)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf39', get_index_1)
        constant_17 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_8, constant_17, load)
        constant_18 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_7, constant_18, where)
        constant_19 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_6, constant_19, where_1)
        constant_20 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_5, constant_20, where_2)
        constant_21 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_4, constant_21, where_3)
        constant_22 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_3, constant_22, where_4)
        constant_23 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_2, constant_23, where_5)
        constant_24 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_1, constant_24, where_6)
        constant_25 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_7, constant_25)
        get_index_2 = self.get_index('index0')
        load_1 = ops.load('full_default', get_index_2)
        where_8 = ops.where(eq, mul, load_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf45', get_index_3, where_8, None)
        return store
op45 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp19 = tl.load(in_ptr0 + (31))
        tmp20 = tl.broadcast_to(tmp19, [XBLOCK])
        tmp32 = tl.load(in_ptr1 + (x0), xmask)
        tmp0 = x0
        tmp1 = tl.full([1], 31, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = tl.full([1], 32, tl.int32)
        tmp4 = tmp1 == tmp3
        tmp5 = tl.full([1], 33, tl.int32)
        tmp6 = tmp1 == tmp5
        tmp7 = tl.full([1], 34, tl.int32)
        tmp8 = tmp1 == tmp7
        tmp9 = tl.full([1], 35, tl.int32)
        tmp10 = tmp1 == tmp9
        tmp11 = tl.full([1], 36, tl.int32)
        tmp12 = tmp1 == tmp11
        tmp13 = tl.full([1], 37, tl.int32)
        tmp14 = tmp1 == tmp13
        tmp15 = tl.full([1], 38, tl.int32)
        tmp16 = tmp1 == tmp15
        tmp17 = tl.full([1], 39, tl.int32)
        tmp18 = tmp1 == tmp17
        tmp21 = 0.0
        tmp22 = tl.where(tmp18, tmp21, tmp20)
        tmp23 = tl.where(tmp16, tmp21, tmp22)
        tmp24 = tl.where(tmp14, tmp21, tmp23)
        tmp25 = tl.where(tmp12, tmp21, tmp24)
        tmp26 = tl.where(tmp10, tmp21, tmp25)
        tmp27 = tl.where(tmp8, tmp21, tmp26)
        tmp28 = tl.where(tmp6, tmp21, tmp27)
        tmp29 = tl.where(tmp4, tmp21, tmp28)
        tmp30 = 2.0
        tmp31 = tmp29 * tmp30
        tmp33 = tl.where(tmp2, tmp31, tmp32)
        tl.store(out_ptr0 + (x0), tmp33, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[34] =
op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 100}, None)]
op48.unmet_dependencies = 
    [   MemoryDep('buf44', c0, {c0: 100}, None),
        MemoryDep('buf45', c0, {c0: 100}, None),
        MemoryDep('buf46', 27, {}, None),
        MemoryDep('buf46', 28, {}, None),
        MemoryDep('buf46', 29, {}, None),
        MemoryDep('buf47', 0, {}, None)]
op48.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf48.users = [NodeUser(node=SchedulerNode(name='op49'), can_inplace=True, is_weak=False)]
]
op48.group.device = cuda:0
op48.group.iteration = (100, 1)
op48.sizes = ([100], [])
buf44_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf45_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf47_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op48_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 0
    index2 = 29
    index3 = 28
    index4 = 27
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf45', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_2, torch.int32)
        constant = ops.constant(30, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_3 = self.get_index('index1')
        load_2 = ops.load('buf47', get_index_3)
        get_index_4 = self.get_index('index0')
        load_3 = ops.load('full_default', get_index_4)
        where = ops.where(eq, load_2, load_3)
        add_1 = ops.add(add, where)
        get_index_5 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_5, torch.int32)
        constant_1 = ops.constant(29, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_1)
        get_index_6 = self.get_index('index2')
        load_4 = ops.load('buf46', get_index_6)
        constant_2 = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_7 = self.get_index('index0')
        load_5 = ops.load('full_default', get_index_7)
        where_1 = ops.where(eq_1, mul, load_5)
        add_2 = ops.add(add_1, where_1)
        get_index_8 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_8, torch.int32)
        constant_3 = ops.constant(28, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_3)
        constant_4 = ops.constant(28, torch.int32)
        constant_5 = ops.constant(29, torch.int32)
        eq_3 = ops.eq(constant_4, constant_5)
        get_index_9 = self.get_index('index3')
        load_6 = ops.load('buf46', get_index_9)
        constant_6 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_3, constant_6, load_6)
        constant_7 = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(where_2, constant_7)
        get_index_10 = self.get_index('index0')
        load_7 = ops.load('full_default', get_index_10)
        where_3 = ops.where(eq_2, mul_1, load_7)
        add_3 = ops.add(add_2, where_3)
        get_index_11 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_11, torch.int32)
        constant_8 = ops.constant(27, torch.int32)
        eq_4 = ops.eq(index_expr_3, constant_8)
        constant_9 = ops.constant(27, torch.int32)
        constant_10 = ops.constant(28, torch.int32)
        eq_5 = ops.eq(constant_9, constant_10)
        constant_11 = ops.constant(27, torch.int32)
        constant_12 = ops.constant(29, torch.int32)
        eq_6 = ops.eq(constant_11, constant_12)
        get_index_12 = self.get_index('index4')
        load_8 = ops.load('buf46', get_index_12)
        constant_13 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_6, constant_13, load_8)
        constant_14 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_5, constant_14, where_4)
        constant_15 = ops.constant(2.0, torch.float32)
        mul_2 = ops.mul(where_5, constant_15)
        get_index_13 = self.get_index('index0')
        load_9 = ops.load('full_default', get_index_13)
        where_6 = ops.where(eq_4, mul_2, load_9)
        add_4 = ops.add(add_3, where_6)
        get_index_14 = self.get_index('index0')
        store = ops.store('buf48', get_index_14, add_4, None)
        return store
op48 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp1 = tl.load(in_ptr0 + (x0), xmask)
        tmp6 = tl.load(in_ptr1 + (0))
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK])
        tmp8 = tl.load(in_ptr2 + (x0), xmask)
        tmp13 = tl.load(in_ptr3 + (29))
        tmp14 = tl.broadcast_to(tmp13, [XBLOCK])
        tmp22 = tl.load(in_ptr3 + (28))
        tmp23 = tl.broadcast_to(tmp22, [XBLOCK])
        tmp33 = tl.load(in_ptr3 + (27))
        tmp34 = tl.broadcast_to(tmp33, [XBLOCK])
        tmp2 = tmp0 + tmp1
        tmp3 = x0
        tmp4 = tl.full([1], 30, tl.int32)
        tmp5 = tmp3 == tmp4
        tmp9 = tl.where(tmp5, tmp7, tmp8)
        tmp10 = tmp2 + tmp9
        tmp11 = tl.full([1], 29, tl.int32)
        tmp12 = tmp3 == tmp11
        tmp15 = 2.0
        tmp16 = tmp14 * tmp15
        tmp17 = tl.where(tmp12, tmp16, tmp8)
        tmp18 = tmp10 + tmp17
        tmp19 = tl.full([1], 28, tl.int32)
        tmp20 = tmp3 == tmp19
        tmp21 = tmp19 == tmp11
        tmp24 = 0.0
        tmp25 = tl.where(tmp21, tmp24, tmp23)
        tmp26 = tmp25 * tmp15
        tmp27 = tl.where(tmp20, tmp26, tmp8)
        tmp28 = tmp18 + tmp27
        tmp29 = tl.full([1], 27, tl.int32)
        tmp30 = tmp3 == tmp29
        tmp31 = tmp29 == tmp19
        tmp32 = tmp29 == tmp11
        tmp35 = tl.where(tmp32, tmp24, tmp34)
        tmp36 = tl.where(tmp31, tmp24, tmp35)
        tmp37 = tmp36 * tmp15
        tmp38 = tl.where(tmp30, tmp37, tmp8)
        tmp39 = tmp28 + tmp38
        tl.store(in_out_ptr0 + (x0), tmp39, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[35] =
op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', c0, {c0: 100}, None)]
op49.unmet_dependencies = 
    [   MemoryDep('buf46', 25, {}, None),
        MemoryDep('buf46', 26, {}, None),
        MemoryDep('buf48', c0, {c0: 100}, None)]
op49.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf49.users = [NodeUser(node=SchedulerNode(name='op50'), can_inplace=True, is_weak=False)]
]
op49.group.device = cuda:0
op49.group.iteration = (100, 1)
op49.sizes = ([100], [])
buf48_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op49_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 26
    index2 = 25
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf48', get_index)
        get_index_1 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_1, torch.int32)
        constant = ops.constant(26, torch.int32)
        eq = ops.eq(index_expr, constant)
        constant_1 = ops.constant(26, torch.int32)
        constant_2 = ops.constant(27, torch.int32)
        eq_1 = ops.eq(constant_1, constant_2)
        constant_3 = ops.constant(26, torch.int32)
        constant_4 = ops.constant(28, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        constant_5 = ops.constant(26, torch.int32)
        constant_6 = ops.constant(29, torch.int32)
        eq_3 = ops.eq(constant_5, constant_6)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf46', get_index_2)
        constant_7 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_3, constant_7, load_1)
        constant_8 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_2, constant_8, where)
        constant_9 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_1, constant_9, where_1)
        constant_10 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_2, constant_10)
        get_index_3 = self.get_index('index0')
        load_2 = ops.load('full_default', get_index_3)
        where_3 = ops.where(eq, mul, load_2)
        add = ops.add(load, where_3)
        get_index_4 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_4, torch.int32)
        constant_11 = ops.constant(25, torch.int32)
        eq_4 = ops.eq(index_expr_1, constant_11)
        constant_12 = ops.constant(25, torch.int32)
        constant_13 = ops.constant(26, torch.int32)
        eq_5 = ops.eq(constant_12, constant_13)
        constant_14 = ops.constant(25, torch.int32)
        constant_15 = ops.constant(27, torch.int32)
        eq_6 = ops.eq(constant_14, constant_15)
        constant_16 = ops.constant(25, torch.int32)
        constant_17 = ops.constant(28, torch.int32)
        eq_7 = ops.eq(constant_16, constant_17)
        constant_18 = ops.constant(25, torch.int32)
        constant_19 = ops.constant(29, torch.int32)
        eq_8 = ops.eq(constant_18, constant_19)
        get_index_5 = self.get_index('index2')
        load_3 = ops.load('buf46', get_index_5)
        constant_20 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_8, constant_20, load_3)
        constant_21 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_7, constant_21, where_4)
        constant_22 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_6, constant_22, where_5)
        constant_23 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_5, constant_23, where_6)
        constant_24 = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(where_7, constant_24)
        get_index_6 = self.get_index('index0')
        load_4 = ops.load('full_default', get_index_6)
        where_8 = ops.where(eq_4, mul_1, load_4)
        add_1 = ops.add(add, where_8)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf49', get_index_7, add_1, None)
        return store
op49 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp10 = tl.load(in_ptr0 + (26))
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK])
        tmp18 = tl.load(in_ptr1 + (x0), xmask)
        tmp27 = tl.load(in_ptr0 + (25))
        tmp28 = tl.broadcast_to(tmp27, [XBLOCK])
        tmp1 = x0
        tmp2 = tl.full([1], 26, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = tl.full([1], 27, tl.int32)
        tmp5 = tmp2 == tmp4
        tmp6 = tl.full([1], 28, tl.int32)
        tmp7 = tmp2 == tmp6
        tmp8 = tl.full([1], 29, tl.int32)
        tmp9 = tmp2 == tmp8
        tmp12 = 0.0
        tmp13 = tl.where(tmp9, tmp12, tmp11)
        tmp14 = tl.where(tmp7, tmp12, tmp13)
        tmp15 = tl.where(tmp5, tmp12, tmp14)
        tmp16 = 2.0
        tmp17 = tmp15 * tmp16
        tmp19 = tl.where(tmp3, tmp17, tmp18)
        tmp20 = tmp0 + tmp19
        tmp21 = tl.full([1], 25, tl.int32)
        tmp22 = tmp1 == tmp21
        tmp23 = tmp21 == tmp2
        tmp24 = tmp21 == tmp4
        tmp25 = tmp21 == tmp6
        tmp26 = tmp21 == tmp8
        tmp29 = tl.where(tmp26, tmp12, tmp28)
        tmp30 = tl.where(tmp25, tmp12, tmp29)
        tmp31 = tl.where(tmp24, tmp12, tmp30)
        tmp32 = tl.where(tmp23, tmp12, tmp31)
        tmp33 = tmp32 * tmp16
        tmp34 = tl.where(tmp22, tmp33, tmp18)
        tmp35 = tmp20 + tmp34
        tl.store(in_out_ptr0 + (x0), tmp35, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[36] =
op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 100}, None)]
op50.unmet_dependencies = 
    [   MemoryDep('buf46', 23, {}, None),
        MemoryDep('buf46', 24, {}, None),
        MemoryDep('buf49', c0, {c0: 100}, None)]
op50.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf50.users = [NodeUser(node=SchedulerNode(name='op51'), can_inplace=True, is_weak=False)]
]
op50.group.device = cuda:0
op50.group.iteration = (100, 1)
op50.sizes = ([100], [])
buf49_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op50_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 24
    index2 = 23
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_1, torch.int32)
        constant = ops.constant(24, torch.int32)
        eq = ops.eq(index_expr, constant)
        constant_1 = ops.constant(24, torch.int32)
        constant_2 = ops.constant(25, torch.int32)
        eq_1 = ops.eq(constant_1, constant_2)
        constant_3 = ops.constant(24, torch.int32)
        constant_4 = ops.constant(26, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        constant_5 = ops.constant(24, torch.int32)
        constant_6 = ops.constant(27, torch.int32)
        eq_3 = ops.eq(constant_5, constant_6)
        constant_7 = ops.constant(24, torch.int32)
        constant_8 = ops.constant(28, torch.int32)
        eq_4 = ops.eq(constant_7, constant_8)
        constant_9 = ops.constant(24, torch.int32)
        constant_10 = ops.constant(29, torch.int32)
        eq_5 = ops.eq(constant_9, constant_10)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf46', get_index_2)
        constant_11 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_5, constant_11, load_1)
        constant_12 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_4, constant_12, where)
        constant_13 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_3, constant_13, where_1)
        constant_14 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_2, constant_14, where_2)
        constant_15 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_1, constant_15, where_3)
        constant_16 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_4, constant_16)
        get_index_3 = self.get_index('index0')
        load_2 = ops.load('full_default', get_index_3)
        where_5 = ops.where(eq, mul, load_2)
        add = ops.add(load, where_5)
        get_index_4 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_4, torch.int32)
        constant_17 = ops.constant(23, torch.int32)
        eq_6 = ops.eq(index_expr_1, constant_17)
        constant_18 = ops.constant(23, torch.int32)
        constant_19 = ops.constant(24, torch.int32)
        eq_7 = ops.eq(constant_18, constant_19)
        constant_20 = ops.constant(23, torch.int32)
        constant_21 = ops.constant(25, torch.int32)
        eq_8 = ops.eq(constant_20, constant_21)
        constant_22 = ops.constant(23, torch.int32)
        constant_23 = ops.constant(26, torch.int32)
        eq_9 = ops.eq(constant_22, constant_23)
        constant_24 = ops.constant(23, torch.int32)
        constant_25 = ops.constant(27, torch.int32)
        eq_10 = ops.eq(constant_24, constant_25)
        constant_26 = ops.constant(23, torch.int32)
        constant_27 = ops.constant(28, torch.int32)
        eq_11 = ops.eq(constant_26, constant_27)
        constant_28 = ops.constant(23, torch.int32)
        constant_29 = ops.constant(29, torch.int32)
        eq_12 = ops.eq(constant_28, constant_29)
        get_index_5 = self.get_index('index2')
        load_3 = ops.load('buf46', get_index_5)
        constant_30 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_12, constant_30, load_3)
        constant_31 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_11, constant_31, where_6)
        constant_32 = ops.constant(0.0, torch.float32)
        where_8 = ops.where(eq_10, constant_32, where_7)
        constant_33 = ops.constant(0.0, torch.float32)
        where_9 = ops.where(eq_9, constant_33, where_8)
        constant_34 = ops.constant(0.0, torch.float32)
        where_10 = ops.where(eq_8, constant_34, where_9)
        constant_35 = ops.constant(0.0, torch.float32)
        where_11 = ops.where(eq_7, constant_35, where_10)
        constant_36 = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(where_11, constant_36)
        get_index_6 = self.get_index('index0')
        load_4 = ops.load('full_default', get_index_6)
        where_12 = ops.where(eq_6, mul_1, load_4)
        add_1 = ops.add(add, where_12)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf50', get_index_7, add_1, None)
        return store
op50 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp14 = tl.load(in_ptr0 + (24))
        tmp15 = tl.broadcast_to(tmp14, [XBLOCK])
        tmp24 = tl.load(in_ptr1 + (x0), xmask)
        tmp35 = tl.load(in_ptr0 + (23))
        tmp36 = tl.broadcast_to(tmp35, [XBLOCK])
        tmp1 = x0
        tmp2 = tl.full([1], 24, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = tl.full([1], 25, tl.int32)
        tmp5 = tmp2 == tmp4
        tmp6 = tl.full([1], 26, tl.int32)
        tmp7 = tmp2 == tmp6
        tmp8 = tl.full([1], 27, tl.int32)
        tmp9 = tmp2 == tmp8
        tmp10 = tl.full([1], 28, tl.int32)
        tmp11 = tmp2 == tmp10
        tmp12 = tl.full([1], 29, tl.int32)
        tmp13 = tmp2 == tmp12
        tmp16 = 0.0
        tmp17 = tl.where(tmp13, tmp16, tmp15)
        tmp18 = tl.where(tmp11, tmp16, tmp17)
        tmp19 = tl.where(tmp9, tmp16, tmp18)
        tmp20 = tl.where(tmp7, tmp16, tmp19)
        tmp21 = tl.where(tmp5, tmp16, tmp20)
        tmp22 = 2.0
        tmp23 = tmp21 * tmp22
        tmp25 = tl.where(tmp3, tmp23, tmp24)
        tmp26 = tmp0 + tmp25
        tmp27 = tl.full([1], 23, tl.int32)
        tmp28 = tmp1 == tmp27
        tmp29 = tmp27 == tmp2
        tmp30 = tmp27 == tmp4
        tmp31 = tmp27 == tmp6
        tmp32 = tmp27 == tmp8
        tmp33 = tmp27 == tmp10
        tmp34 = tmp27 == tmp12
        tmp37 = tl.where(tmp34, tmp16, tmp36)
        tmp38 = tl.where(tmp33, tmp16, tmp37)
        tmp39 = tl.where(tmp32, tmp16, tmp38)
        tmp40 = tl.where(tmp31, tmp16, tmp39)
        tmp41 = tl.where(tmp30, tmp16, tmp40)
        tmp42 = tl.where(tmp29, tmp16, tmp41)
        tmp43 = tmp42 * tmp22
        tmp44 = tl.where(tmp28, tmp43, tmp24)
        tmp45 = tmp26 + tmp44
        tl.store(in_out_ptr0 + (x0), tmp45, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[37] =
op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 100}, None)]
op51.unmet_dependencies = [MemoryDep('buf46', 22, {}, None), MemoryDep('buf50', c0, {c0: 100}, None)]
op51.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf51.users = [NodeUser(node=SchedulerNode(name='op55'), can_inplace=True, is_weak=False)]
]
op51.group.device = cuda:0
op51.group.iteration = (100, 1)
op51.sizes = ([100], [])
buf50_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op51_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 22
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_1, torch.int32)
        constant = ops.constant(22, torch.int32)
        eq = ops.eq(index_expr, constant)
        constant_1 = ops.constant(22, torch.int32)
        constant_2 = ops.constant(23, torch.int32)
        eq_1 = ops.eq(constant_1, constant_2)
        constant_3 = ops.constant(22, torch.int32)
        constant_4 = ops.constant(24, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        constant_5 = ops.constant(22, torch.int32)
        constant_6 = ops.constant(25, torch.int32)
        eq_3 = ops.eq(constant_5, constant_6)
        constant_7 = ops.constant(22, torch.int32)
        constant_8 = ops.constant(26, torch.int32)
        eq_4 = ops.eq(constant_7, constant_8)
        constant_9 = ops.constant(22, torch.int32)
        constant_10 = ops.constant(27, torch.int32)
        eq_5 = ops.eq(constant_9, constant_10)
        constant_11 = ops.constant(22, torch.int32)
        constant_12 = ops.constant(28, torch.int32)
        eq_6 = ops.eq(constant_11, constant_12)
        constant_13 = ops.constant(22, torch.int32)
        constant_14 = ops.constant(29, torch.int32)
        eq_7 = ops.eq(constant_13, constant_14)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf46', get_index_2)
        constant_15 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_7, constant_15, load_1)
        constant_16 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_6, constant_16, where)
        constant_17 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_5, constant_17, where_1)
        constant_18 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_4, constant_18, where_2)
        constant_19 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_3, constant_19, where_3)
        constant_20 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_2, constant_20, where_4)
        constant_21 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_1, constant_21, where_5)
        constant_22 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_6, constant_22)
        get_index_3 = self.get_index('index0')
        load_2 = ops.load('full_default', get_index_3)
        where_7 = ops.where(eq, mul, load_2)
        add = ops.add(load, where_7)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf51', get_index_4, add, None)
        return store
op51 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp18 = tl.load(in_ptr0 + (22))
        tmp19 = tl.broadcast_to(tmp18, [XBLOCK])
        tmp30 = tl.load(in_ptr1 + (x0), xmask)
        tmp1 = x0
        tmp2 = tl.full([1], 22, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = tl.full([1], 23, tl.int32)
        tmp5 = tmp2 == tmp4
        tmp6 = tl.full([1], 24, tl.int32)
        tmp7 = tmp2 == tmp6
        tmp8 = tl.full([1], 25, tl.int32)
        tmp9 = tmp2 == tmp8
        tmp10 = tl.full([1], 26, tl.int32)
        tmp11 = tmp2 == tmp10
        tmp12 = tl.full([1], 27, tl.int32)
        tmp13 = tmp2 == tmp12
        tmp14 = tl.full([1], 28, tl.int32)
        tmp15 = tmp2 == tmp14
        tmp16 = tl.full([1], 29, tl.int32)
        tmp17 = tmp2 == tmp16
        tmp20 = 0.0
        tmp21 = tl.where(tmp17, tmp20, tmp19)
        tmp22 = tl.where(tmp15, tmp20, tmp21)
        tmp23 = tl.where(tmp13, tmp20, tmp22)
        tmp24 = tl.where(tmp11, tmp20, tmp23)
        tmp25 = tl.where(tmp9, tmp20, tmp24)
        tmp26 = tl.where(tmp7, tmp20, tmp25)
        tmp27 = tl.where(tmp5, tmp20, tmp26)
        tmp28 = 2.0
        tmp29 = tmp27 * tmp28
        tmp31 = tl.where(tmp3, tmp29, tmp30)
        tmp32 = tmp0 + tmp31
        tl.store(in_out_ptr0 + (x0), tmp32, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[38] =
op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', c0, {c0: 100}, None)]
op52.unmet_dependencies = [MemoryDep('buf46', 21, {}, None)]
op52.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf52.users = [NodeUser(node=SchedulerNode(name='op55'), can_inplace=True, is_weak=False)]
]
op52.group.device = cuda:0
op52.group.iteration = (100, 1)
op52.sizes = ([100], [])
buf46_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op52_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 21
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(21, torch.int32)
        eq = ops.eq(index_expr, constant)
        constant_1 = ops.constant(21, torch.int32)
        constant_2 = ops.constant(22, torch.int32)
        eq_1 = ops.eq(constant_1, constant_2)
        constant_3 = ops.constant(21, torch.int32)
        constant_4 = ops.constant(23, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        constant_5 = ops.constant(21, torch.int32)
        constant_6 = ops.constant(24, torch.int32)
        eq_3 = ops.eq(constant_5, constant_6)
        constant_7 = ops.constant(21, torch.int32)
        constant_8 = ops.constant(25, torch.int32)
        eq_4 = ops.eq(constant_7, constant_8)
        constant_9 = ops.constant(21, torch.int32)
        constant_10 = ops.constant(26, torch.int32)
        eq_5 = ops.eq(constant_9, constant_10)
        constant_11 = ops.constant(21, torch.int32)
        constant_12 = ops.constant(27, torch.int32)
        eq_6 = ops.eq(constant_11, constant_12)
        constant_13 = ops.constant(21, torch.int32)
        constant_14 = ops.constant(28, torch.int32)
        eq_7 = ops.eq(constant_13, constant_14)
        constant_15 = ops.constant(21, torch.int32)
        constant_16 = ops.constant(29, torch.int32)
        eq_8 = ops.eq(constant_15, constant_16)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf46', get_index_1)
        constant_17 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_8, constant_17, load)
        constant_18 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_7, constant_18, where)
        constant_19 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_6, constant_19, where_1)
        constant_20 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_5, constant_20, where_2)
        constant_21 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_4, constant_21, where_3)
        constant_22 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_3, constant_22, where_4)
        constant_23 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_2, constant_23, where_5)
        constant_24 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_1, constant_24, where_6)
        constant_25 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_7, constant_25)
        get_index_2 = self.get_index('index0')
        load_1 = ops.load('full_default', get_index_2)
        where_8 = ops.where(eq, mul, load_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf52', get_index_3, where_8, None)
        return store
op52 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp19 = tl.load(in_ptr0 + (21))
        tmp20 = tl.broadcast_to(tmp19, [XBLOCK])
        tmp32 = tl.load(in_ptr1 + (x0), xmask)
        tmp0 = x0
        tmp1 = tl.full([1], 21, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = tl.full([1], 22, tl.int32)
        tmp4 = tmp1 == tmp3
        tmp5 = tl.full([1], 23, tl.int32)
        tmp6 = tmp1 == tmp5
        tmp7 = tl.full([1], 24, tl.int32)
        tmp8 = tmp1 == tmp7
        tmp9 = tl.full([1], 25, tl.int32)
        tmp10 = tmp1 == tmp9
        tmp11 = tl.full([1], 26, tl.int32)
        tmp12 = tmp1 == tmp11
        tmp13 = tl.full([1], 27, tl.int32)
        tmp14 = tmp1 == tmp13
        tmp15 = tl.full([1], 28, tl.int32)
        tmp16 = tmp1 == tmp15
        tmp17 = tl.full([1], 29, tl.int32)
        tmp18 = tmp1 == tmp17
        tmp21 = 0.0
        tmp22 = tl.where(tmp18, tmp21, tmp20)
        tmp23 = tl.where(tmp16, tmp21, tmp22)
        tmp24 = tl.where(tmp14, tmp21, tmp23)
        tmp25 = tl.where(tmp12, tmp21, tmp24)
        tmp26 = tl.where(tmp10, tmp21, tmp25)
        tmp27 = tl.where(tmp8, tmp21, tmp26)
        tmp28 = tl.where(tmp6, tmp21, tmp27)
        tmp29 = tl.where(tmp4, tmp21, tmp28)
        tmp30 = 2.0
        tmp31 = tmp29 * tmp30
        tmp33 = tl.where(tmp2, tmp31, tmp32)
        tl.store(out_ptr0 + (x0), tmp33, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[39] =
op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', c0, {c0: 100}, None)]
op55.unmet_dependencies = 
    [   MemoryDep('buf51', c0, {c0: 100}, None),
        MemoryDep('buf52', c0, {c0: 100}, None),
        MemoryDep('buf53', 17, {}, None),
        MemoryDep('buf53', 18, {}, None),
        MemoryDep('buf53', 19, {}, None),
        MemoryDep('buf54', 0, {}, None)]
op55.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf55.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=True, is_weak=False)]
]
op55.group.device = cuda:0
op55.group.iteration = (100, 1)
op55.sizes = ([100], [])
buf51_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf55_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op55_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 0
    index2 = 19
    index3 = 18
    index4 = 17
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf51', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf52', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_2, torch.int32)
        constant = ops.constant(20, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_3 = self.get_index('index1')
        load_2 = ops.load('buf54', get_index_3)
        get_index_4 = self.get_index('index0')
        load_3 = ops.load('full_default', get_index_4)
        where = ops.where(eq, load_2, load_3)
        add_1 = ops.add(add, where)
        get_index_5 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_5, torch.int32)
        constant_1 = ops.constant(19, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_1)
        get_index_6 = self.get_index('index2')
        load_4 = ops.load('buf53', get_index_6)
        constant_2 = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_7 = self.get_index('index0')
        load_5 = ops.load('full_default', get_index_7)
        where_1 = ops.where(eq_1, mul, load_5)
        add_2 = ops.add(add_1, where_1)
        get_index_8 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_8, torch.int32)
        constant_3 = ops.constant(18, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_3)
        constant_4 = ops.constant(18, torch.int32)
        constant_5 = ops.constant(19, torch.int32)
        eq_3 = ops.eq(constant_4, constant_5)
        get_index_9 = self.get_index('index3')
        load_6 = ops.load('buf53', get_index_9)
        constant_6 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_3, constant_6, load_6)
        constant_7 = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(where_2, constant_7)
        get_index_10 = self.get_index('index0')
        load_7 = ops.load('full_default', get_index_10)
        where_3 = ops.where(eq_2, mul_1, load_7)
        add_3 = ops.add(add_2, where_3)
        get_index_11 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_11, torch.int32)
        constant_8 = ops.constant(17, torch.int32)
        eq_4 = ops.eq(index_expr_3, constant_8)
        constant_9 = ops.constant(17, torch.int32)
        constant_10 = ops.constant(18, torch.int32)
        eq_5 = ops.eq(constant_9, constant_10)
        constant_11 = ops.constant(17, torch.int32)
        constant_12 = ops.constant(19, torch.int32)
        eq_6 = ops.eq(constant_11, constant_12)
        get_index_12 = self.get_index('index4')
        load_8 = ops.load('buf53', get_index_12)
        constant_13 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_6, constant_13, load_8)
        constant_14 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_5, constant_14, where_4)
        constant_15 = ops.constant(2.0, torch.float32)
        mul_2 = ops.mul(where_5, constant_15)
        get_index_13 = self.get_index('index0')
        load_9 = ops.load('full_default', get_index_13)
        where_6 = ops.where(eq_4, mul_2, load_9)
        add_4 = ops.add(add_3, where_6)
        get_index_14 = self.get_index('index0')
        store = ops.store('buf55', get_index_14, add_4, None)
        return store
op55 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp1 = tl.load(in_ptr0 + (x0), xmask)
        tmp6 = tl.load(in_ptr1 + (0))
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK])
        tmp8 = tl.load(in_ptr2 + (x0), xmask)
        tmp13 = tl.load(in_ptr3 + (19))
        tmp14 = tl.broadcast_to(tmp13, [XBLOCK])
        tmp22 = tl.load(in_ptr3 + (18))
        tmp23 = tl.broadcast_to(tmp22, [XBLOCK])
        tmp33 = tl.load(in_ptr3 + (17))
        tmp34 = tl.broadcast_to(tmp33, [XBLOCK])
        tmp2 = tmp0 + tmp1
        tmp3 = x0
        tmp4 = tl.full([1], 20, tl.int32)
        tmp5 = tmp3 == tmp4
        tmp9 = tl.where(tmp5, tmp7, tmp8)
        tmp10 = tmp2 + tmp9
        tmp11 = tl.full([1], 19, tl.int32)
        tmp12 = tmp3 == tmp11
        tmp15 = 2.0
        tmp16 = tmp14 * tmp15
        tmp17 = tl.where(tmp12, tmp16, tmp8)
        tmp18 = tmp10 + tmp17
        tmp19 = tl.full([1], 18, tl.int32)
        tmp20 = tmp3 == tmp19
        tmp21 = tmp19 == tmp11
        tmp24 = 0.0
        tmp25 = tl.where(tmp21, tmp24, tmp23)
        tmp26 = tmp25 * tmp15
        tmp27 = tl.where(tmp20, tmp26, tmp8)
        tmp28 = tmp18 + tmp27
        tmp29 = tl.full([1], 17, tl.int32)
        tmp30 = tmp3 == tmp29
        tmp31 = tmp29 == tmp19
        tmp32 = tmp29 == tmp11
        tmp35 = tl.where(tmp32, tmp24, tmp34)
        tmp36 = tl.where(tmp31, tmp24, tmp35)
        tmp37 = tmp36 * tmp15
        tmp38 = tl.where(tmp30, tmp37, tmp8)
        tmp39 = tmp28 + tmp38
        tl.store(in_out_ptr0 + (x0), tmp39, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[40] =
op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 100}, None)]
op56.unmet_dependencies = 
    [   MemoryDep('buf53', 15, {}, None),
        MemoryDep('buf53', 16, {}, None),
        MemoryDep('buf55', c0, {c0: 100}, None)]
op56.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf56.users = [NodeUser(node=SchedulerNode(name='op57'), can_inplace=True, is_weak=False)]
]
op56.group.device = cuda:0
op56.group.iteration = (100, 1)
op56.sizes = ([100], [])
buf55_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op56_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 16
    index2 = 15
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        get_index_1 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_1, torch.int32)
        constant = ops.constant(16, torch.int32)
        eq = ops.eq(index_expr, constant)
        constant_1 = ops.constant(16, torch.int32)
        constant_2 = ops.constant(17, torch.int32)
        eq_1 = ops.eq(constant_1, constant_2)
        constant_3 = ops.constant(16, torch.int32)
        constant_4 = ops.constant(18, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        constant_5 = ops.constant(16, torch.int32)
        constant_6 = ops.constant(19, torch.int32)
        eq_3 = ops.eq(constant_5, constant_6)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf53', get_index_2)
        constant_7 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_3, constant_7, load_1)
        constant_8 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_2, constant_8, where)
        constant_9 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_1, constant_9, where_1)
        constant_10 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_2, constant_10)
        get_index_3 = self.get_index('index0')
        load_2 = ops.load('full_default', get_index_3)
        where_3 = ops.where(eq, mul, load_2)
        add = ops.add(load, where_3)
        get_index_4 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_4, torch.int32)
        constant_11 = ops.constant(15, torch.int32)
        eq_4 = ops.eq(index_expr_1, constant_11)
        constant_12 = ops.constant(15, torch.int32)
        constant_13 = ops.constant(16, torch.int32)
        eq_5 = ops.eq(constant_12, constant_13)
        constant_14 = ops.constant(15, torch.int32)
        constant_15 = ops.constant(17, torch.int32)
        eq_6 = ops.eq(constant_14, constant_15)
        constant_16 = ops.constant(15, torch.int32)
        constant_17 = ops.constant(18, torch.int32)
        eq_7 = ops.eq(constant_16, constant_17)
        constant_18 = ops.constant(15, torch.int32)
        constant_19 = ops.constant(19, torch.int32)
        eq_8 = ops.eq(constant_18, constant_19)
        get_index_5 = self.get_index('index2')
        load_3 = ops.load('buf53', get_index_5)
        constant_20 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_8, constant_20, load_3)
        constant_21 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_7, constant_21, where_4)
        constant_22 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_6, constant_22, where_5)
        constant_23 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_5, constant_23, where_6)
        constant_24 = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(where_7, constant_24)
        get_index_6 = self.get_index('index0')
        load_4 = ops.load('full_default', get_index_6)
        where_8 = ops.where(eq_4, mul_1, load_4)
        add_1 = ops.add(add, where_8)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf56', get_index_7, add_1, None)
        return store
op56 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp10 = tl.load(in_ptr0 + (16))
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK])
        tmp18 = tl.load(in_ptr1 + (x0), xmask)
        tmp27 = tl.load(in_ptr0 + (15))
        tmp28 = tl.broadcast_to(tmp27, [XBLOCK])
        tmp1 = x0
        tmp2 = tl.full([1], 16, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = tl.full([1], 17, tl.int32)
        tmp5 = tmp2 == tmp4
        tmp6 = tl.full([1], 18, tl.int32)
        tmp7 = tmp2 == tmp6
        tmp8 = tl.full([1], 19, tl.int32)
        tmp9 = tmp2 == tmp8
        tmp12 = 0.0
        tmp13 = tl.where(tmp9, tmp12, tmp11)
        tmp14 = tl.where(tmp7, tmp12, tmp13)
        tmp15 = tl.where(tmp5, tmp12, tmp14)
        tmp16 = 2.0
        tmp17 = tmp15 * tmp16
        tmp19 = tl.where(tmp3, tmp17, tmp18)
        tmp20 = tmp0 + tmp19
        tmp21 = tl.full([1], 15, tl.int32)
        tmp22 = tmp1 == tmp21
        tmp23 = tmp21 == tmp2
        tmp24 = tmp21 == tmp4
        tmp25 = tmp21 == tmp6
        tmp26 = tmp21 == tmp8
        tmp29 = tl.where(tmp26, tmp12, tmp28)
        tmp30 = tl.where(tmp25, tmp12, tmp29)
        tmp31 = tl.where(tmp24, tmp12, tmp30)
        tmp32 = tl.where(tmp23, tmp12, tmp31)
        tmp33 = tmp32 * tmp16
        tmp34 = tl.where(tmp22, tmp33, tmp18)
        tmp35 = tmp20 + tmp34
        tl.store(in_out_ptr0 + (x0), tmp35, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[41] =
op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 100}, None)]
op57.unmet_dependencies = 
    [   MemoryDep('buf53', 13, {}, None),
        MemoryDep('buf53', 14, {}, None),
        MemoryDep('buf56', c0, {c0: 100}, None)]
op57.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf57.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False)]
]
op57.group.device = cuda:0
op57.group.iteration = (100, 1)
op57.sizes = ([100], [])
buf56_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op57_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 14
    index2 = 13
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_1, torch.int32)
        constant = ops.constant(14, torch.int32)
        eq = ops.eq(index_expr, constant)
        constant_1 = ops.constant(14, torch.int32)
        constant_2 = ops.constant(15, torch.int32)
        eq_1 = ops.eq(constant_1, constant_2)
        constant_3 = ops.constant(14, torch.int32)
        constant_4 = ops.constant(16, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        constant_5 = ops.constant(14, torch.int32)
        constant_6 = ops.constant(17, torch.int32)
        eq_3 = ops.eq(constant_5, constant_6)
        constant_7 = ops.constant(14, torch.int32)
        constant_8 = ops.constant(18, torch.int32)
        eq_4 = ops.eq(constant_7, constant_8)
        constant_9 = ops.constant(14, torch.int32)
        constant_10 = ops.constant(19, torch.int32)
        eq_5 = ops.eq(constant_9, constant_10)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf53', get_index_2)
        constant_11 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_5, constant_11, load_1)
        constant_12 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_4, constant_12, where)
        constant_13 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_3, constant_13, where_1)
        constant_14 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_2, constant_14, where_2)
        constant_15 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_1, constant_15, where_3)
        constant_16 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_4, constant_16)
        get_index_3 = self.get_index('index0')
        load_2 = ops.load('full_default', get_index_3)
        where_5 = ops.where(eq, mul, load_2)
        add = ops.add(load, where_5)
        get_index_4 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_4, torch.int32)
        constant_17 = ops.constant(13, torch.int32)
        eq_6 = ops.eq(index_expr_1, constant_17)
        constant_18 = ops.constant(13, torch.int32)
        constant_19 = ops.constant(14, torch.int32)
        eq_7 = ops.eq(constant_18, constant_19)
        constant_20 = ops.constant(13, torch.int32)
        constant_21 = ops.constant(15, torch.int32)
        eq_8 = ops.eq(constant_20, constant_21)
        constant_22 = ops.constant(13, torch.int32)
        constant_23 = ops.constant(16, torch.int32)
        eq_9 = ops.eq(constant_22, constant_23)
        constant_24 = ops.constant(13, torch.int32)
        constant_25 = ops.constant(17, torch.int32)
        eq_10 = ops.eq(constant_24, constant_25)
        constant_26 = ops.constant(13, torch.int32)
        constant_27 = ops.constant(18, torch.int32)
        eq_11 = ops.eq(constant_26, constant_27)
        constant_28 = ops.constant(13, torch.int32)
        constant_29 = ops.constant(19, torch.int32)
        eq_12 = ops.eq(constant_28, constant_29)
        get_index_5 = self.get_index('index2')
        load_3 = ops.load('buf53', get_index_5)
        constant_30 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_12, constant_30, load_3)
        constant_31 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_11, constant_31, where_6)
        constant_32 = ops.constant(0.0, torch.float32)
        where_8 = ops.where(eq_10, constant_32, where_7)
        constant_33 = ops.constant(0.0, torch.float32)
        where_9 = ops.where(eq_9, constant_33, where_8)
        constant_34 = ops.constant(0.0, torch.float32)
        where_10 = ops.where(eq_8, constant_34, where_9)
        constant_35 = ops.constant(0.0, torch.float32)
        where_11 = ops.where(eq_7, constant_35, where_10)
        constant_36 = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(where_11, constant_36)
        get_index_6 = self.get_index('index0')
        load_4 = ops.load('full_default', get_index_6)
        where_12 = ops.where(eq_6, mul_1, load_4)
        add_1 = ops.add(add, where_12)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf57', get_index_7, add_1, None)
        return store
op57 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp14 = tl.load(in_ptr0 + (14))
        tmp15 = tl.broadcast_to(tmp14, [XBLOCK])
        tmp24 = tl.load(in_ptr1 + (x0), xmask)
        tmp35 = tl.load(in_ptr0 + (13))
        tmp36 = tl.broadcast_to(tmp35, [XBLOCK])
        tmp1 = x0
        tmp2 = tl.full([1], 14, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = tl.full([1], 15, tl.int32)
        tmp5 = tmp2 == tmp4
        tmp6 = tl.full([1], 16, tl.int32)
        tmp7 = tmp2 == tmp6
        tmp8 = tl.full([1], 17, tl.int32)
        tmp9 = tmp2 == tmp8
        tmp10 = tl.full([1], 18, tl.int32)
        tmp11 = tmp2 == tmp10
        tmp12 = tl.full([1], 19, tl.int32)
        tmp13 = tmp2 == tmp12
        tmp16 = 0.0
        tmp17 = tl.where(tmp13, tmp16, tmp15)
        tmp18 = tl.where(tmp11, tmp16, tmp17)
        tmp19 = tl.where(tmp9, tmp16, tmp18)
        tmp20 = tl.where(tmp7, tmp16, tmp19)
        tmp21 = tl.where(tmp5, tmp16, tmp20)
        tmp22 = 2.0
        tmp23 = tmp21 * tmp22
        tmp25 = tl.where(tmp3, tmp23, tmp24)
        tmp26 = tmp0 + tmp25
        tmp27 = tl.full([1], 13, tl.int32)
        tmp28 = tmp1 == tmp27
        tmp29 = tmp27 == tmp2
        tmp30 = tmp27 == tmp4
        tmp31 = tmp27 == tmp6
        tmp32 = tmp27 == tmp8
        tmp33 = tmp27 == tmp10
        tmp34 = tmp27 == tmp12
        tmp37 = tl.where(tmp34, tmp16, tmp36)
        tmp38 = tl.where(tmp33, tmp16, tmp37)
        tmp39 = tl.where(tmp32, tmp16, tmp38)
        tmp40 = tl.where(tmp31, tmp16, tmp39)
        tmp41 = tl.where(tmp30, tmp16, tmp40)
        tmp42 = tl.where(tmp29, tmp16, tmp41)
        tmp43 = tmp42 * tmp22
        tmp44 = tl.where(tmp28, tmp43, tmp24)
        tmp45 = tmp26 + tmp44
        tl.store(in_out_ptr0 + (x0), tmp45, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[42] =
op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 100}, None)]
op58.unmet_dependencies = [MemoryDep('buf53', 12, {}, None), MemoryDep('buf57', c0, {c0: 100}, None)]
op58.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf58.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=True, is_weak=False)]
]
op58.group.device = cuda:0
op58.group.iteration = (100, 1)
op58.sizes = ([100], [])
buf57_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op58_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 12
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_1, torch.int32)
        constant = ops.constant(12, torch.int32)
        eq = ops.eq(index_expr, constant)
        constant_1 = ops.constant(12, torch.int32)
        constant_2 = ops.constant(13, torch.int32)
        eq_1 = ops.eq(constant_1, constant_2)
        constant_3 = ops.constant(12, torch.int32)
        constant_4 = ops.constant(14, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        constant_5 = ops.constant(12, torch.int32)
        constant_6 = ops.constant(15, torch.int32)
        eq_3 = ops.eq(constant_5, constant_6)
        constant_7 = ops.constant(12, torch.int32)
        constant_8 = ops.constant(16, torch.int32)
        eq_4 = ops.eq(constant_7, constant_8)
        constant_9 = ops.constant(12, torch.int32)
        constant_10 = ops.constant(17, torch.int32)
        eq_5 = ops.eq(constant_9, constant_10)
        constant_11 = ops.constant(12, torch.int32)
        constant_12 = ops.constant(18, torch.int32)
        eq_6 = ops.eq(constant_11, constant_12)
        constant_13 = ops.constant(12, torch.int32)
        constant_14 = ops.constant(19, torch.int32)
        eq_7 = ops.eq(constant_13, constant_14)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf53', get_index_2)
        constant_15 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_7, constant_15, load_1)
        constant_16 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_6, constant_16, where)
        constant_17 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_5, constant_17, where_1)
        constant_18 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_4, constant_18, where_2)
        constant_19 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_3, constant_19, where_3)
        constant_20 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_2, constant_20, where_4)
        constant_21 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_1, constant_21, where_5)
        constant_22 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_6, constant_22)
        get_index_3 = self.get_index('index0')
        load_2 = ops.load('full_default', get_index_3)
        where_7 = ops.where(eq, mul, load_2)
        add = ops.add(load, where_7)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf58', get_index_4, add, None)
        return store
op58 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp18 = tl.load(in_ptr0 + (12))
        tmp19 = tl.broadcast_to(tmp18, [XBLOCK])
        tmp30 = tl.load(in_ptr1 + (x0), xmask)
        tmp1 = x0
        tmp2 = tl.full([1], 12, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = tl.full([1], 13, tl.int32)
        tmp5 = tmp2 == tmp4
        tmp6 = tl.full([1], 14, tl.int32)
        tmp7 = tmp2 == tmp6
        tmp8 = tl.full([1], 15, tl.int32)
        tmp9 = tmp2 == tmp8
        tmp10 = tl.full([1], 16, tl.int32)
        tmp11 = tmp2 == tmp10
        tmp12 = tl.full([1], 17, tl.int32)
        tmp13 = tmp2 == tmp12
        tmp14 = tl.full([1], 18, tl.int32)
        tmp15 = tmp2 == tmp14
        tmp16 = tl.full([1], 19, tl.int32)
        tmp17 = tmp2 == tmp16
        tmp20 = 0.0
        tmp21 = tl.where(tmp17, tmp20, tmp19)
        tmp22 = tl.where(tmp15, tmp20, tmp21)
        tmp23 = tl.where(tmp13, tmp20, tmp22)
        tmp24 = tl.where(tmp11, tmp20, tmp23)
        tmp25 = tl.where(tmp9, tmp20, tmp24)
        tmp26 = tl.where(tmp7, tmp20, tmp25)
        tmp27 = tl.where(tmp5, tmp20, tmp26)
        tmp28 = 2.0
        tmp29 = tmp27 * tmp28
        tmp31 = tl.where(tmp3, tmp29, tmp30)
        tmp32 = tmp0 + tmp31
        tl.store(in_out_ptr0 + (x0), tmp32, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[43] =
op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 100}, None)]
op59.unmet_dependencies = [MemoryDep('buf53', 11, {}, None)]
op59.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf59.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=True, is_weak=False)]
]
op59.group.device = cuda:0
op59.group.iteration = (100, 1)
op59.sizes = ([100], [])
buf53_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op59_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 11
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(11, torch.int32)
        eq = ops.eq(index_expr, constant)
        constant_1 = ops.constant(11, torch.int32)
        constant_2 = ops.constant(12, torch.int32)
        eq_1 = ops.eq(constant_1, constant_2)
        constant_3 = ops.constant(11, torch.int32)
        constant_4 = ops.constant(13, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        constant_5 = ops.constant(11, torch.int32)
        constant_6 = ops.constant(14, torch.int32)
        eq_3 = ops.eq(constant_5, constant_6)
        constant_7 = ops.constant(11, torch.int32)
        constant_8 = ops.constant(15, torch.int32)
        eq_4 = ops.eq(constant_7, constant_8)
        constant_9 = ops.constant(11, torch.int32)
        constant_10 = ops.constant(16, torch.int32)
        eq_5 = ops.eq(constant_9, constant_10)
        constant_11 = ops.constant(11, torch.int32)
        constant_12 = ops.constant(17, torch.int32)
        eq_6 = ops.eq(constant_11, constant_12)
        constant_13 = ops.constant(11, torch.int32)
        constant_14 = ops.constant(18, torch.int32)
        eq_7 = ops.eq(constant_13, constant_14)
        constant_15 = ops.constant(11, torch.int32)
        constant_16 = ops.constant(19, torch.int32)
        eq_8 = ops.eq(constant_15, constant_16)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf53', get_index_1)
        constant_17 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_8, constant_17, load)
        constant_18 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_7, constant_18, where)
        constant_19 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_6, constant_19, where_1)
        constant_20 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_5, constant_20, where_2)
        constant_21 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_4, constant_21, where_3)
        constant_22 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_3, constant_22, where_4)
        constant_23 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_2, constant_23, where_5)
        constant_24 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_1, constant_24, where_6)
        constant_25 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_7, constant_25)
        get_index_2 = self.get_index('index0')
        load_1 = ops.load('full_default', get_index_2)
        where_8 = ops.where(eq, mul, load_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf59', get_index_3, where_8, None)
        return store
op59 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp19 = tl.load(in_ptr0 + (11))
        tmp20 = tl.broadcast_to(tmp19, [XBLOCK])
        tmp32 = tl.load(in_ptr1 + (x0), xmask)
        tmp0 = x0
        tmp1 = tl.full([1], 11, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = tl.full([1], 12, tl.int32)
        tmp4 = tmp1 == tmp3
        tmp5 = tl.full([1], 13, tl.int32)
        tmp6 = tmp1 == tmp5
        tmp7 = tl.full([1], 14, tl.int32)
        tmp8 = tmp1 == tmp7
        tmp9 = tl.full([1], 15, tl.int32)
        tmp10 = tmp1 == tmp9
        tmp11 = tl.full([1], 16, tl.int32)
        tmp12 = tmp1 == tmp11
        tmp13 = tl.full([1], 17, tl.int32)
        tmp14 = tmp1 == tmp13
        tmp15 = tl.full([1], 18, tl.int32)
        tmp16 = tmp1 == tmp15
        tmp17 = tl.full([1], 19, tl.int32)
        tmp18 = tmp1 == tmp17
        tmp21 = 0.0
        tmp22 = tl.where(tmp18, tmp21, tmp20)
        tmp23 = tl.where(tmp16, tmp21, tmp22)
        tmp24 = tl.where(tmp14, tmp21, tmp23)
        tmp25 = tl.where(tmp12, tmp21, tmp24)
        tmp26 = tl.where(tmp10, tmp21, tmp25)
        tmp27 = tl.where(tmp8, tmp21, tmp26)
        tmp28 = tl.where(tmp6, tmp21, tmp27)
        tmp29 = tl.where(tmp4, tmp21, tmp28)
        tmp30 = 2.0
        tmp31 = tmp29 * tmp30
        tmp33 = tl.where(tmp2, tmp31, tmp32)
        tl.store(out_ptr0 + (x0), tmp33, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[44] =
op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 100}, None)]
op62.unmet_dependencies = 
    [   MemoryDep('buf58', c0, {c0: 100}, None),
        MemoryDep('buf59', c0, {c0: 100}, None),
        MemoryDep('buf60', 7, {}, None),
        MemoryDep('buf60', 8, {}, None),
        MemoryDep('buf60', 9, {}, None),
        MemoryDep('buf61', 0, {}, None)]
op62.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf62.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=True, is_weak=False)]
]
op62.group.device = cuda:0
op62.group.iteration = (100, 1)
op62.sizes = ([100], [])
buf58_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op62_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 0
    index2 = 9
    index3 = 8
    index4 = 7
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf59', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_2, torch.int32)
        constant = ops.constant(10, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_3 = self.get_index('index1')
        load_2 = ops.load('buf61', get_index_3)
        get_index_4 = self.get_index('index0')
        load_3 = ops.load('full_default', get_index_4)
        where = ops.where(eq, load_2, load_3)
        add_1 = ops.add(add, where)
        get_index_5 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_5, torch.int32)
        constant_1 = ops.constant(9, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_1)
        get_index_6 = self.get_index('index2')
        load_4 = ops.load('buf60', get_index_6)
        constant_2 = ops.constant(2.0, torch.float32)
        mul = ops.mul(load_4, constant_2)
        get_index_7 = self.get_index('index0')
        load_5 = ops.load('full_default', get_index_7)
        where_1 = ops.where(eq_1, mul, load_5)
        add_2 = ops.add(add_1, where_1)
        get_index_8 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_8, torch.int32)
        constant_3 = ops.constant(8, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_3)
        constant_4 = ops.constant(8, torch.int32)
        constant_5 = ops.constant(9, torch.int32)
        eq_3 = ops.eq(constant_4, constant_5)
        get_index_9 = self.get_index('index3')
        load_6 = ops.load('buf60', get_index_9)
        constant_6 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_3, constant_6, load_6)
        constant_7 = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(where_2, constant_7)
        get_index_10 = self.get_index('index0')
        load_7 = ops.load('full_default', get_index_10)
        where_3 = ops.where(eq_2, mul_1, load_7)
        add_3 = ops.add(add_2, where_3)
        get_index_11 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_11, torch.int32)
        constant_8 = ops.constant(7, torch.int32)
        eq_4 = ops.eq(index_expr_3, constant_8)
        constant_9 = ops.constant(7, torch.int32)
        constant_10 = ops.constant(8, torch.int32)
        eq_5 = ops.eq(constant_9, constant_10)
        constant_11 = ops.constant(7, torch.int32)
        constant_12 = ops.constant(9, torch.int32)
        eq_6 = ops.eq(constant_11, constant_12)
        get_index_12 = self.get_index('index4')
        load_8 = ops.load('buf60', get_index_12)
        constant_13 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_6, constant_13, load_8)
        constant_14 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_5, constant_14, where_4)
        constant_15 = ops.constant(2.0, torch.float32)
        mul_2 = ops.mul(where_5, constant_15)
        get_index_13 = self.get_index('index0')
        load_9 = ops.load('full_default', get_index_13)
        where_6 = ops.where(eq_4, mul_2, load_9)
        add_4 = ops.add(add_3, where_6)
        get_index_14 = self.get_index('index0')
        store = ops.store('buf62', get_index_14, add_4, None)
        return store
op62 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp1 = tl.load(in_ptr0 + (x0), xmask)
        tmp6 = tl.load(in_ptr1 + (0))
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK])
        tmp8 = tl.load(in_ptr2 + (x0), xmask)
        tmp13 = tl.load(in_ptr3 + (9))
        tmp14 = tl.broadcast_to(tmp13, [XBLOCK])
        tmp22 = tl.load(in_ptr3 + (8))
        tmp23 = tl.broadcast_to(tmp22, [XBLOCK])
        tmp33 = tl.load(in_ptr3 + (7))
        tmp34 = tl.broadcast_to(tmp33, [XBLOCK])
        tmp2 = tmp0 + tmp1
        tmp3 = x0
        tmp4 = tl.full([1], 10, tl.int32)
        tmp5 = tmp3 == tmp4
        tmp9 = tl.where(tmp5, tmp7, tmp8)
        tmp10 = tmp2 + tmp9
        tmp11 = tl.full([1], 9, tl.int32)
        tmp12 = tmp3 == tmp11
        tmp15 = 2.0
        tmp16 = tmp14 * tmp15
        tmp17 = tl.where(tmp12, tmp16, tmp8)
        tmp18 = tmp10 + tmp17
        tmp19 = tl.full([1], 8, tl.int32)
        tmp20 = tmp3 == tmp19
        tmp21 = tmp19 == tmp11
        tmp24 = 0.0
        tmp25 = tl.where(tmp21, tmp24, tmp23)
        tmp26 = tmp25 * tmp15
        tmp27 = tl.where(tmp20, tmp26, tmp8)
        tmp28 = tmp18 + tmp27
        tmp29 = tl.full([1], 7, tl.int32)
        tmp30 = tmp3 == tmp29
        tmp31 = tmp29 == tmp19
        tmp32 = tmp29 == tmp11
        tmp35 = tl.where(tmp32, tmp24, tmp34)
        tmp36 = tl.where(tmp31, tmp24, tmp35)
        tmp37 = tmp36 * tmp15
        tmp38 = tl.where(tmp30, tmp37, tmp8)
        tmp39 = tmp28 + tmp38
        tl.store(in_out_ptr0 + (x0), tmp39, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[45] =
op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 100}, None)]
op63.unmet_dependencies = 
    [   MemoryDep('buf60', 5, {}, None),
        MemoryDep('buf60', 6, {}, None),
        MemoryDep('buf62', c0, {c0: 100}, None)]
op63.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf63.users = [NodeUser(node=SchedulerNode(name='op64'), can_inplace=True, is_weak=False)]
]
op63.group.device = cuda:0
op63.group.iteration = (100, 1)
op63.sizes = ([100], [])
buf62_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op63_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 6
    index2 = 5
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        get_index_1 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_1, torch.int32)
        constant = ops.constant(6, torch.int32)
        eq = ops.eq(index_expr, constant)
        constant_1 = ops.constant(6, torch.int32)
        constant_2 = ops.constant(7, torch.int32)
        eq_1 = ops.eq(constant_1, constant_2)
        constant_3 = ops.constant(6, torch.int32)
        constant_4 = ops.constant(8, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        constant_5 = ops.constant(6, torch.int32)
        constant_6 = ops.constant(9, torch.int32)
        eq_3 = ops.eq(constant_5, constant_6)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf60', get_index_2)
        constant_7 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_3, constant_7, load_1)
        constant_8 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_2, constant_8, where)
        constant_9 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_1, constant_9, where_1)
        constant_10 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_2, constant_10)
        get_index_3 = self.get_index('index0')
        load_2 = ops.load('full_default', get_index_3)
        where_3 = ops.where(eq, mul, load_2)
        add = ops.add(load, where_3)
        get_index_4 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_4, torch.int32)
        constant_11 = ops.constant(5, torch.int32)
        eq_4 = ops.eq(index_expr_1, constant_11)
        constant_12 = ops.constant(5, torch.int32)
        constant_13 = ops.constant(6, torch.int32)
        eq_5 = ops.eq(constant_12, constant_13)
        constant_14 = ops.constant(5, torch.int32)
        constant_15 = ops.constant(7, torch.int32)
        eq_6 = ops.eq(constant_14, constant_15)
        constant_16 = ops.constant(5, torch.int32)
        constant_17 = ops.constant(8, torch.int32)
        eq_7 = ops.eq(constant_16, constant_17)
        constant_18 = ops.constant(5, torch.int32)
        constant_19 = ops.constant(9, torch.int32)
        eq_8 = ops.eq(constant_18, constant_19)
        get_index_5 = self.get_index('index2')
        load_3 = ops.load('buf60', get_index_5)
        constant_20 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_8, constant_20, load_3)
        constant_21 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_7, constant_21, where_4)
        constant_22 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_6, constant_22, where_5)
        constant_23 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_5, constant_23, where_6)
        constant_24 = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(where_7, constant_24)
        get_index_6 = self.get_index('index0')
        load_4 = ops.load('full_default', get_index_6)
        where_8 = ops.where(eq_4, mul_1, load_4)
        add_1 = ops.add(add, where_8)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf63', get_index_7, add_1, None)
        return store
op63 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp10 = tl.load(in_ptr0 + (6))
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK])
        tmp18 = tl.load(in_ptr1 + (x0), xmask)
        tmp27 = tl.load(in_ptr0 + (5))
        tmp28 = tl.broadcast_to(tmp27, [XBLOCK])
        tmp1 = x0
        tmp2 = tl.full([1], 6, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = tl.full([1], 7, tl.int32)
        tmp5 = tmp2 == tmp4
        tmp6 = tl.full([1], 8, tl.int32)
        tmp7 = tmp2 == tmp6
        tmp8 = tl.full([1], 9, tl.int32)
        tmp9 = tmp2 == tmp8
        tmp12 = 0.0
        tmp13 = tl.where(tmp9, tmp12, tmp11)
        tmp14 = tl.where(tmp7, tmp12, tmp13)
        tmp15 = tl.where(tmp5, tmp12, tmp14)
        tmp16 = 2.0
        tmp17 = tmp15 * tmp16
        tmp19 = tl.where(tmp3, tmp17, tmp18)
        tmp20 = tmp0 + tmp19
        tmp21 = tl.full([1], 5, tl.int32)
        tmp22 = tmp1 == tmp21
        tmp23 = tmp21 == tmp2
        tmp24 = tmp21 == tmp4
        tmp25 = tmp21 == tmp6
        tmp26 = tmp21 == tmp8
        tmp29 = tl.where(tmp26, tmp12, tmp28)
        tmp30 = tl.where(tmp25, tmp12, tmp29)
        tmp31 = tl.where(tmp24, tmp12, tmp30)
        tmp32 = tl.where(tmp23, tmp12, tmp31)
        tmp33 = tmp32 * tmp16
        tmp34 = tl.where(tmp22, tmp33, tmp18)
        tmp35 = tmp20 + tmp34
        tl.store(in_out_ptr0 + (x0), tmp35, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[46] =
op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', c0, {c0: 100}, None)]
op64.unmet_dependencies = 
    [   MemoryDep('buf60', 3, {}, None),
        MemoryDep('buf60', 4, {}, None),
        MemoryDep('buf63', c0, {c0: 100}, None)]
op64.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf64.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=True, is_weak=False)]
]
op64.group.device = cuda:0
op64.group.iteration = (100, 1)
op64.sizes = ([100], [])
buf63_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op64_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 4
    index2 = 3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        get_index_1 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_1, torch.int32)
        constant = ops.constant(4, torch.int32)
        eq = ops.eq(index_expr, constant)
        constant_1 = ops.constant(4, torch.int32)
        constant_2 = ops.constant(5, torch.int32)
        eq_1 = ops.eq(constant_1, constant_2)
        constant_3 = ops.constant(4, torch.int32)
        constant_4 = ops.constant(6, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        constant_5 = ops.constant(4, torch.int32)
        constant_6 = ops.constant(7, torch.int32)
        eq_3 = ops.eq(constant_5, constant_6)
        constant_7 = ops.constant(4, torch.int32)
        constant_8 = ops.constant(8, torch.int32)
        eq_4 = ops.eq(constant_7, constant_8)
        constant_9 = ops.constant(4, torch.int32)
        constant_10 = ops.constant(9, torch.int32)
        eq_5 = ops.eq(constant_9, constant_10)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf60', get_index_2)
        constant_11 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_5, constant_11, load_1)
        constant_12 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_4, constant_12, where)
        constant_13 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_3, constant_13, where_1)
        constant_14 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_2, constant_14, where_2)
        constant_15 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_1, constant_15, where_3)
        constant_16 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_4, constant_16)
        get_index_3 = self.get_index('index0')
        load_2 = ops.load('full_default', get_index_3)
        where_5 = ops.where(eq, mul, load_2)
        add = ops.add(load, where_5)
        get_index_4 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_4, torch.int32)
        constant_17 = ops.constant(3, torch.int32)
        eq_6 = ops.eq(index_expr_1, constant_17)
        constant_18 = ops.constant(3, torch.int32)
        constant_19 = ops.constant(4, torch.int32)
        eq_7 = ops.eq(constant_18, constant_19)
        constant_20 = ops.constant(3, torch.int32)
        constant_21 = ops.constant(5, torch.int32)
        eq_8 = ops.eq(constant_20, constant_21)
        constant_22 = ops.constant(3, torch.int32)
        constant_23 = ops.constant(6, torch.int32)
        eq_9 = ops.eq(constant_22, constant_23)
        constant_24 = ops.constant(3, torch.int32)
        constant_25 = ops.constant(7, torch.int32)
        eq_10 = ops.eq(constant_24, constant_25)
        constant_26 = ops.constant(3, torch.int32)
        constant_27 = ops.constant(8, torch.int32)
        eq_11 = ops.eq(constant_26, constant_27)
        constant_28 = ops.constant(3, torch.int32)
        constant_29 = ops.constant(9, torch.int32)
        eq_12 = ops.eq(constant_28, constant_29)
        get_index_5 = self.get_index('index2')
        load_3 = ops.load('buf60', get_index_5)
        constant_30 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_12, constant_30, load_3)
        constant_31 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_11, constant_31, where_6)
        constant_32 = ops.constant(0.0, torch.float32)
        where_8 = ops.where(eq_10, constant_32, where_7)
        constant_33 = ops.constant(0.0, torch.float32)
        where_9 = ops.where(eq_9, constant_33, where_8)
        constant_34 = ops.constant(0.0, torch.float32)
        where_10 = ops.where(eq_8, constant_34, where_9)
        constant_35 = ops.constant(0.0, torch.float32)
        where_11 = ops.where(eq_7, constant_35, where_10)
        constant_36 = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(where_11, constant_36)
        get_index_6 = self.get_index('index0')
        load_4 = ops.load('full_default', get_index_6)
        where_12 = ops.where(eq_6, mul_1, load_4)
        add_1 = ops.add(add, where_12)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf64', get_index_7, add_1, None)
        return store
op64 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp14 = tl.load(in_ptr0 + (4))
        tmp15 = tl.broadcast_to(tmp14, [XBLOCK])
        tmp24 = tl.load(in_ptr1 + (x0), xmask)
        tmp35 = tl.load(in_ptr0 + (3))
        tmp36 = tl.broadcast_to(tmp35, [XBLOCK])
        tmp1 = x0
        tmp2 = tl.full([1], 4, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = tl.full([1], 5, tl.int32)
        tmp5 = tmp2 == tmp4
        tmp6 = tl.full([1], 6, tl.int32)
        tmp7 = tmp2 == tmp6
        tmp8 = tl.full([1], 7, tl.int32)
        tmp9 = tmp2 == tmp8
        tmp10 = tl.full([1], 8, tl.int32)
        tmp11 = tmp2 == tmp10
        tmp12 = tl.full([1], 9, tl.int32)
        tmp13 = tmp2 == tmp12
        tmp16 = 0.0
        tmp17 = tl.where(tmp13, tmp16, tmp15)
        tmp18 = tl.where(tmp11, tmp16, tmp17)
        tmp19 = tl.where(tmp9, tmp16, tmp18)
        tmp20 = tl.where(tmp7, tmp16, tmp19)
        tmp21 = tl.where(tmp5, tmp16, tmp20)
        tmp22 = 2.0
        tmp23 = tmp21 * tmp22
        tmp25 = tl.where(tmp3, tmp23, tmp24)
        tmp26 = tmp0 + tmp25
        tmp27 = tl.full([1], 3, tl.int32)
        tmp28 = tmp1 == tmp27
        tmp29 = tmp27 == tmp2
        tmp30 = tmp27 == tmp4
        tmp31 = tmp27 == tmp6
        tmp32 = tmp27 == tmp8
        tmp33 = tmp27 == tmp10
        tmp34 = tmp27 == tmp12
        tmp37 = tl.where(tmp34, tmp16, tmp36)
        tmp38 = tl.where(tmp33, tmp16, tmp37)
        tmp39 = tl.where(tmp32, tmp16, tmp38)
        tmp40 = tl.where(tmp31, tmp16, tmp39)
        tmp41 = tl.where(tmp30, tmp16, tmp40)
        tmp42 = tl.where(tmp29, tmp16, tmp41)
        tmp43 = tmp42 * tmp22
        tmp44 = tl.where(tmp28, tmp43, tmp24)
        tmp45 = tmp26 + tmp44
        tl.store(in_out_ptr0 + (x0), tmp45, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[47] =
op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 100}, None)]
op65.unmet_dependencies = [MemoryDep('buf60', 2, {}, None), MemoryDep('buf64', c0, {c0: 100}, None)]
op65.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf65.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (100, 1)
op65.sizes = ([100], [])
buf64_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf65_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op65_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_1, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        constant_1 = ops.constant(2, torch.int32)
        constant_2 = ops.constant(3, torch.int32)
        eq_1 = ops.eq(constant_1, constant_2)
        constant_3 = ops.constant(2, torch.int32)
        constant_4 = ops.constant(4, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        constant_5 = ops.constant(2, torch.int32)
        constant_6 = ops.constant(5, torch.int32)
        eq_3 = ops.eq(constant_5, constant_6)
        constant_7 = ops.constant(2, torch.int32)
        constant_8 = ops.constant(6, torch.int32)
        eq_4 = ops.eq(constant_7, constant_8)
        constant_9 = ops.constant(2, torch.int32)
        constant_10 = ops.constant(7, torch.int32)
        eq_5 = ops.eq(constant_9, constant_10)
        constant_11 = ops.constant(2, torch.int32)
        constant_12 = ops.constant(8, torch.int32)
        eq_6 = ops.eq(constant_11, constant_12)
        constant_13 = ops.constant(2, torch.int32)
        constant_14 = ops.constant(9, torch.int32)
        eq_7 = ops.eq(constant_13, constant_14)
        get_index_2 = self.get_index('index1')
        load_1 = ops.load('buf60', get_index_2)
        constant_15 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_7, constant_15, load_1)
        constant_16 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_6, constant_16, where)
        constant_17 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_5, constant_17, where_1)
        constant_18 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_4, constant_18, where_2)
        constant_19 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_3, constant_19, where_3)
        constant_20 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_2, constant_20, where_4)
        constant_21 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_1, constant_21, where_5)
        constant_22 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_6, constant_22)
        get_index_3 = self.get_index('index0')
        load_2 = ops.load('full_default', get_index_3)
        where_7 = ops.where(eq, mul, load_2)
        add = ops.add(load, where_7)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf65', get_index_4, add, None)
        return store
op65 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp18 = tl.load(in_ptr0 + (2))
        tmp19 = tl.broadcast_to(tmp18, [XBLOCK])
        tmp30 = tl.load(in_ptr1 + (x0), xmask)
        tmp1 = x0
        tmp2 = tl.full([1], 2, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = tl.full([1], 3, tl.int32)
        tmp5 = tmp2 == tmp4
        tmp6 = tl.full([1], 4, tl.int32)
        tmp7 = tmp2 == tmp6
        tmp8 = tl.full([1], 5, tl.int32)
        tmp9 = tmp2 == tmp8
        tmp10 = tl.full([1], 6, tl.int32)
        tmp11 = tmp2 == tmp10
        tmp12 = tl.full([1], 7, tl.int32)
        tmp13 = tmp2 == tmp12
        tmp14 = tl.full([1], 8, tl.int32)
        tmp15 = tmp2 == tmp14
        tmp16 = tl.full([1], 9, tl.int32)
        tmp17 = tmp2 == tmp16
        tmp20 = 0.0
        tmp21 = tl.where(tmp17, tmp20, tmp19)
        tmp22 = tl.where(tmp15, tmp20, tmp21)
        tmp23 = tl.where(tmp13, tmp20, tmp22)
        tmp24 = tl.where(tmp11, tmp20, tmp23)
        tmp25 = tl.where(tmp9, tmp20, tmp24)
        tmp26 = tl.where(tmp7, tmp20, tmp25)
        tmp27 = tl.where(tmp5, tmp20, tmp26)
        tmp28 = 2.0
        tmp29 = tmp27 * tmp28
        tmp31 = tl.where(tmp3, tmp29, tmp30)
        tmp32 = tmp0 + tmp31
        tl.store(in_out_ptr0 + (x0), tmp32, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[48] =
op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', c0, {c0: 100}, None)]
op66.unmet_dependencies = [MemoryDep('buf60', 1, {}, None)]
op66.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf66.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False)]
]
op66.group.device = cuda:0
op66.group.iteration = (100, 1)
op66.sizes = ([100], [])
buf60_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf66_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op66_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(1, torch.int32)
        eq = ops.eq(index_expr, constant)
        constant_1 = ops.constant(1, torch.int32)
        constant_2 = ops.constant(2, torch.int32)
        eq_1 = ops.eq(constant_1, constant_2)
        constant_3 = ops.constant(1, torch.int32)
        constant_4 = ops.constant(3, torch.int32)
        eq_2 = ops.eq(constant_3, constant_4)
        constant_5 = ops.constant(1, torch.int32)
        constant_6 = ops.constant(4, torch.int32)
        eq_3 = ops.eq(constant_5, constant_6)
        constant_7 = ops.constant(1, torch.int32)
        constant_8 = ops.constant(5, torch.int32)
        eq_4 = ops.eq(constant_7, constant_8)
        constant_9 = ops.constant(1, torch.int32)
        constant_10 = ops.constant(6, torch.int32)
        eq_5 = ops.eq(constant_9, constant_10)
        constant_11 = ops.constant(1, torch.int32)
        constant_12 = ops.constant(7, torch.int32)
        eq_6 = ops.eq(constant_11, constant_12)
        constant_13 = ops.constant(1, torch.int32)
        constant_14 = ops.constant(8, torch.int32)
        eq_7 = ops.eq(constant_13, constant_14)
        constant_15 = ops.constant(1, torch.int32)
        constant_16 = ops.constant(9, torch.int32)
        eq_8 = ops.eq(constant_15, constant_16)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf60', get_index_1)
        constant_17 = ops.constant(0.0, torch.float32)
        where = ops.where(eq_8, constant_17, load)
        constant_18 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(eq_7, constant_18, where)
        constant_19 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(eq_6, constant_19, where_1)
        constant_20 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(eq_5, constant_20, where_2)
        constant_21 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(eq_4, constant_21, where_3)
        constant_22 = ops.constant(0.0, torch.float32)
        where_5 = ops.where(eq_3, constant_22, where_4)
        constant_23 = ops.constant(0.0, torch.float32)
        where_6 = ops.where(eq_2, constant_23, where_5)
        constant_24 = ops.constant(0.0, torch.float32)
        where_7 = ops.where(eq_1, constant_24, where_6)
        constant_25 = ops.constant(2.0, torch.float32)
        mul = ops.mul(where_7, constant_25)
        get_index_2 = self.get_index('index0')
        load_1 = ops.load('full_default', get_index_2)
        where_8 = ops.where(eq, mul, load_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf66', get_index_3, where_8, None)
        return store
op66 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp19 = tl.load(in_ptr0 + (1))
        tmp20 = tl.broadcast_to(tmp19, [XBLOCK])
        tmp32 = tl.load(in_ptr1 + (x0), xmask)
        tmp0 = x0
        tmp1 = tl.full([1], 1, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = tl.full([1], 2, tl.int32)
        tmp4 = tmp1 == tmp3
        tmp5 = tl.full([1], 3, tl.int32)
        tmp6 = tmp1 == tmp5
        tmp7 = tl.full([1], 4, tl.int32)
        tmp8 = tmp1 == tmp7
        tmp9 = tl.full([1], 5, tl.int32)
        tmp10 = tmp1 == tmp9
        tmp11 = tl.full([1], 6, tl.int32)
        tmp12 = tmp1 == tmp11
        tmp13 = tl.full([1], 7, tl.int32)
        tmp14 = tmp1 == tmp13
        tmp15 = tl.full([1], 8, tl.int32)
        tmp16 = tmp1 == tmp15
        tmp17 = tl.full([1], 9, tl.int32)
        tmp18 = tmp1 == tmp17
        tmp21 = 0.0
        tmp22 = tl.where(tmp18, tmp21, tmp20)
        tmp23 = tl.where(tmp16, tmp21, tmp22)
        tmp24 = tl.where(tmp14, tmp21, tmp23)
        tmp25 = tl.where(tmp12, tmp21, tmp24)
        tmp26 = tl.where(tmp10, tmp21, tmp25)
        tmp27 = tl.where(tmp8, tmp21, tmp26)
        tmp28 = tl.where(tmp6, tmp21, tmp27)
        tmp29 = tl.where(tmp4, tmp21, tmp28)
        tmp30 = 2.0
        tmp31 = tmp29 * tmp30
        tmp33 = tl.where(tmp2, tmp31, tmp32)
        tl.store(out_ptr0 + (x0), tmp33, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68.snodes[49] =
op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 100}, None)]
op68.unmet_dependencies = 
    [   MemoryDep('buf65', c0, {c0: 100}, None),
        MemoryDep('buf66', c0, {c0: 100}, None),
        MemoryDep('buf67', 0, {}, None)]
op68.met_dependencies = [MemoryDep('full_default', c0, {c0: 100}, None)]
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf68.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op68.group.device = cuda:0
op68.group.iteration = (100, 1)
op68.sizes = ([100], [])
buf65_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf66_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf67_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
full_default_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op68_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf65', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf66', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_2, torch.int32)
        constant = ops.constant(0, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_3 = self.get_index('index1')
        load_2 = ops.load('buf67', get_index_3)
        get_index_4 = self.get_index('index0')
        load_3 = ops.load('full_default', get_index_4)
        where = ops.where(eq, load_2, load_3)
        add_1 = ops.add(add, where)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf68', get_index_5, add_1, None)
        return store
op68 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp1 = tl.load(in_ptr0 + (x0), xmask)
        tmp6 = tl.load(in_ptr1 + (0))
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK])
        tmp8 = tl.load(in_ptr2 + (x0), xmask)
        tmp2 = tmp0 + tmp1
        tmp3 = x0
        tmp4 = tl.full([1], 0, tl.int32)
        tmp5 = tmp3 == tmp4
        tmp9 = tl.where(tmp5, tmp7, tmp8)
        tmp10 = tmp2 + tmp9
        tl.store(in_out_ptr0 + (x0), tmp10, xmask)
op0_op1_op2_op3_op6_op7_op8_op9_op10_op13_op14_op15_op16_op17_op20_op21_op22_op23_op24_op27_op28_op29_op30_op31_op34_op35_op36_op37_op38_op41_op42_op43_op44_op45_op48_op49_op50_op51_op52_op55_op56_op57_op58_op59_op62_op63_op64_op65_op66_op68 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr1'], 'no_x_dim': False, 'num_load': 101, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr1, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp3 = tl.load(in_ptr0 + (99))
        tmp4 = tl.broadcast_to(tmp3, [XBLOCK])
        tmp7 = tl.load(in_ptr1 + (x0), xmask)
        tmp12 = tl.load(in_ptr0 + (98))
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK])
        tmp23 = tl.load(in_ptr0 + (97))
        tmp24 = tl.broadcast_to(tmp23, [XBLOCK])
        tmp35 = tl.load(in_ptr0 + (96))
        tmp36 = tl.broadcast_to(tmp35, [XBLOCK])
        tmp49 = tl.load(in_ptr0 + (95))
        tmp50 = tl.broadcast_to(tmp49, [XBLOCK])
        tmp65 = tl.load(in_ptr0 + (94))
        tmp66 = tl.broadcast_to(tmp65, [XBLOCK])
        tmp83 = tl.load(in_ptr0 + (93))
        tmp84 = tl.broadcast_to(tmp83, [XBLOCK])
        tmp103 = tl.load(in_ptr0 + (92))
        tmp104 = tl.broadcast_to(tmp103, [XBLOCK])
        tmp125 = tl.load(in_ptr0 + (91))
        tmp126 = tl.broadcast_to(tmp125, [XBLOCK])
        tmp140 = tl.load(in_ptr2 + (0))
        tmp141 = tl.broadcast_to(tmp140, [XBLOCK])
        tmp146 = tl.load(in_ptr3 + (89))
        tmp147 = tl.broadcast_to(tmp146, [XBLOCK])
        tmp154 = tl.load(in_ptr3 + (88))
        tmp155 = tl.broadcast_to(tmp154, [XBLOCK])
        tmp164 = tl.load(in_ptr3 + (87))
        tmp165 = tl.broadcast_to(tmp164, [XBLOCK])
        tmp176 = tl.load(in_ptr3 + (86))
        tmp177 = tl.broadcast_to(tmp176, [XBLOCK])
        tmp190 = tl.load(in_ptr3 + (85))
        tmp191 = tl.broadcast_to(tmp190, [XBLOCK])
        tmp206 = tl.load(in_ptr3 + (84))
        tmp207 = tl.broadcast_to(tmp206, [XBLOCK])
        tmp224 = tl.load(in_ptr3 + (83))
        tmp225 = tl.broadcast_to(tmp224, [XBLOCK])
        tmp244 = tl.load(in_ptr3 + (82))
        tmp245 = tl.broadcast_to(tmp244, [XBLOCK])
        tmp266 = tl.load(in_ptr3 + (81))
        tmp267 = tl.broadcast_to(tmp266, [XBLOCK])
        tmp281 = tl.load(in_ptr4 + (0))
        tmp282 = tl.broadcast_to(tmp281, [XBLOCK])
        tmp287 = tl.load(in_ptr5 + (79))
        tmp288 = tl.broadcast_to(tmp287, [XBLOCK])
        tmp295 = tl.load(in_ptr5 + (78))
        tmp296 = tl.broadcast_to(tmp295, [XBLOCK])
        tmp305 = tl.load(in_ptr5 + (77))
        tmp306 = tl.broadcast_to(tmp305, [XBLOCK])
        tmp317 = tl.load(in_ptr5 + (76))
        tmp318 = tl.broadcast_to(tmp317, [XBLOCK])
        tmp331 = tl.load(in_ptr5 + (75))
        tmp332 = tl.broadcast_to(tmp331, [XBLOCK])
        tmp347 = tl.load(in_ptr5 + (74))
        tmp348 = tl.broadcast_to(tmp347, [XBLOCK])
        tmp365 = tl.load(in_ptr5 + (73))
        tmp366 = tl.broadcast_to(tmp365, [XBLOCK])
        tmp385 = tl.load(in_ptr5 + (72))
        tmp386 = tl.broadcast_to(tmp385, [XBLOCK])
        tmp407 = tl.load(in_ptr5 + (71))
        tmp408 = tl.broadcast_to(tmp407, [XBLOCK])
        tmp422 = tl.load(in_ptr6 + (0))
        tmp423 = tl.broadcast_to(tmp422, [XBLOCK])
        tmp428 = tl.load(in_ptr7 + (69))
        tmp429 = tl.broadcast_to(tmp428, [XBLOCK])
        tmp436 = tl.load(in_ptr7 + (68))
        tmp437 = tl.broadcast_to(tmp436, [XBLOCK])
        tmp446 = tl.load(in_ptr7 + (67))
        tmp447 = tl.broadcast_to(tmp446, [XBLOCK])
        tmp458 = tl.load(in_ptr7 + (66))
        tmp459 = tl.broadcast_to(tmp458, [XBLOCK])
        tmp472 = tl.load(in_ptr7 + (65))
        tmp473 = tl.broadcast_to(tmp472, [XBLOCK])
        tmp488 = tl.load(in_ptr7 + (64))
        tmp489 = tl.broadcast_to(tmp488, [XBLOCK])
        tmp506 = tl.load(in_ptr7 + (63))
        tmp507 = tl.broadcast_to(tmp506, [XBLOCK])
        tmp526 = tl.load(in_ptr7 + (62))
        tmp527 = tl.broadcast_to(tmp526, [XBLOCK])
        tmp548 = tl.load(in_ptr7 + (61))
        tmp549 = tl.broadcast_to(tmp548, [XBLOCK])
        tmp563 = tl.load(in_ptr8 + (0))
        tmp564 = tl.broadcast_to(tmp563, [XBLOCK])
        tmp569 = tl.load(in_ptr9 + (59))
        tmp570 = tl.broadcast_to(tmp569, [XBLOCK])
        tmp577 = tl.load(in_ptr9 + (58))
        tmp578 = tl.broadcast_to(tmp577, [XBLOCK])
        tmp587 = tl.load(in_ptr9 + (57))
        tmp588 = tl.broadcast_to(tmp587, [XBLOCK])
        tmp599 = tl.load(in_ptr9 + (56))
        tmp600 = tl.broadcast_to(tmp599, [XBLOCK])
        tmp613 = tl.load(in_ptr9 + (55))
        tmp614 = tl.broadcast_to(tmp613, [XBLOCK])
        tmp629 = tl.load(in_ptr9 + (54))
        tmp630 = tl.broadcast_to(tmp629, [XBLOCK])
        tmp647 = tl.load(in_ptr9 + (53))
        tmp648 = tl.broadcast_to(tmp647, [XBLOCK])
        tmp667 = tl.load(in_ptr9 + (52))
        tmp668 = tl.broadcast_to(tmp667, [XBLOCK])
        tmp689 = tl.load(in_ptr9 + (51))
        tmp690 = tl.broadcast_to(tmp689, [XBLOCK])
        tmp704 = tl.load(in_ptr10 + (0))
        tmp705 = tl.broadcast_to(tmp704, [XBLOCK])
        tmp710 = tl.load(in_ptr11 + (49))
        tmp711 = tl.broadcast_to(tmp710, [XBLOCK])
        tmp718 = tl.load(in_ptr11 + (48))
        tmp719 = tl.broadcast_to(tmp718, [XBLOCK])
        tmp728 = tl.load(in_ptr11 + (47))
        tmp729 = tl.broadcast_to(tmp728, [XBLOCK])
        tmp740 = tl.load(in_ptr11 + (46))
        tmp741 = tl.broadcast_to(tmp740, [XBLOCK])
        tmp754 = tl.load(in_ptr11 + (45))
        tmp755 = tl.broadcast_to(tmp754, [XBLOCK])
        tmp770 = tl.load(in_ptr11 + (44))
        tmp771 = tl.broadcast_to(tmp770, [XBLOCK])
        tmp788 = tl.load(in_ptr11 + (43))
        tmp789 = tl.broadcast_to(tmp788, [XBLOCK])
        tmp808 = tl.load(in_ptr11 + (42))
        tmp809 = tl.broadcast_to(tmp808, [XBLOCK])
        tmp830 = tl.load(in_ptr11 + (41))
        tmp831 = tl.broadcast_to(tmp830, [XBLOCK])
        tmp845 = tl.load(in_ptr12 + (0))
        tmp846 = tl.broadcast_to(tmp845, [XBLOCK])
        tmp851 = tl.load(in_ptr13 + (39))
        tmp852 = tl.broadcast_to(tmp851, [XBLOCK])
        tmp859 = tl.load(in_ptr13 + (38))
        tmp860 = tl.broadcast_to(tmp859, [XBLOCK])
        tmp869 = tl.load(in_ptr13 + (37))
        tmp870 = tl.broadcast_to(tmp869, [XBLOCK])
        tmp881 = tl.load(in_ptr13 + (36))
        tmp882 = tl.broadcast_to(tmp881, [XBLOCK])
        tmp895 = tl.load(in_ptr13 + (35))
        tmp896 = tl.broadcast_to(tmp895, [XBLOCK])
        tmp911 = tl.load(in_ptr13 + (34))
        tmp912 = tl.broadcast_to(tmp911, [XBLOCK])
        tmp929 = tl.load(in_ptr13 + (33))
        tmp930 = tl.broadcast_to(tmp929, [XBLOCK])
        tmp949 = tl.load(in_ptr13 + (32))
        tmp950 = tl.broadcast_to(tmp949, [XBLOCK])
        tmp971 = tl.load(in_ptr13 + (31))
        tmp972 = tl.broadcast_to(tmp971, [XBLOCK])
        tmp986 = tl.load(in_ptr14 + (0))
        tmp987 = tl.broadcast_to(tmp986, [XBLOCK])
        tmp992 = tl.load(in_ptr15 + (29))
        tmp993 = tl.broadcast_to(tmp992, [XBLOCK])
        tmp1000 = tl.load(in_ptr15 + (28))
        tmp1001 = tl.broadcast_to(tmp1000, [XBLOCK])
        tmp1010 = tl.load(in_ptr15 + (27))
        tmp1011 = tl.broadcast_to(tmp1010, [XBLOCK])
        tmp1022 = tl.load(in_ptr15 + (26))
        tmp1023 = tl.broadcast_to(tmp1022, [XBLOCK])
        tmp1036 = tl.load(in_ptr15 + (25))
        tmp1037 = tl.broadcast_to(tmp1036, [XBLOCK])
        tmp1052 = tl.load(in_ptr15 + (24))
        tmp1053 = tl.broadcast_to(tmp1052, [XBLOCK])
        tmp1070 = tl.load(in_ptr15 + (23))
        tmp1071 = tl.broadcast_to(tmp1070, [XBLOCK])
        tmp1090 = tl.load(in_ptr15 + (22))
        tmp1091 = tl.broadcast_to(tmp1090, [XBLOCK])
        tmp1112 = tl.load(in_ptr15 + (21))
        tmp1113 = tl.broadcast_to(tmp1112, [XBLOCK])
        tmp1127 = tl.load(in_ptr16 + (0))
        tmp1128 = tl.broadcast_to(tmp1127, [XBLOCK])
        tmp1133 = tl.load(in_ptr17 + (19))
        tmp1134 = tl.broadcast_to(tmp1133, [XBLOCK])
        tmp1141 = tl.load(in_ptr17 + (18))
        tmp1142 = tl.broadcast_to(tmp1141, [XBLOCK])
        tmp1151 = tl.load(in_ptr17 + (17))
        tmp1152 = tl.broadcast_to(tmp1151, [XBLOCK])
        tmp1163 = tl.load(in_ptr17 + (16))
        tmp1164 = tl.broadcast_to(tmp1163, [XBLOCK])
        tmp1177 = tl.load(in_ptr17 + (15))
        tmp1178 = tl.broadcast_to(tmp1177, [XBLOCK])
        tmp1193 = tl.load(in_ptr17 + (14))
        tmp1194 = tl.broadcast_to(tmp1193, [XBLOCK])
        tmp1211 = tl.load(in_ptr17 + (13))
        tmp1212 = tl.broadcast_to(tmp1211, [XBLOCK])
        tmp1231 = tl.load(in_ptr17 + (12))
        tmp1232 = tl.broadcast_to(tmp1231, [XBLOCK])
        tmp1253 = tl.load(in_ptr17 + (11))
        tmp1254 = tl.broadcast_to(tmp1253, [XBLOCK])
        tmp1268 = tl.load(in_ptr18 + (0))
        tmp1269 = tl.broadcast_to(tmp1268, [XBLOCK])
        tmp1274 = tl.load(in_ptr19 + (9))
        tmp1275 = tl.broadcast_to(tmp1274, [XBLOCK])
        tmp1282 = tl.load(in_ptr19 + (8))
        tmp1283 = tl.broadcast_to(tmp1282, [XBLOCK])
        tmp1292 = tl.load(in_ptr19 + (7))
        tmp1293 = tl.broadcast_to(tmp1292, [XBLOCK])
        tmp1304 = tl.load(in_ptr19 + (6))
        tmp1305 = tl.broadcast_to(tmp1304, [XBLOCK])
        tmp1318 = tl.load(in_ptr19 + (5))
        tmp1319 = tl.broadcast_to(tmp1318, [XBLOCK])
        tmp1334 = tl.load(in_ptr19 + (4))
        tmp1335 = tl.broadcast_to(tmp1334, [XBLOCK])
        tmp1352 = tl.load(in_ptr19 + (3))
        tmp1353 = tl.broadcast_to(tmp1352, [XBLOCK])
        tmp1372 = tl.load(in_ptr19 + (2))
        tmp1373 = tl.broadcast_to(tmp1372, [XBLOCK])
        tmp1394 = tl.load(in_ptr19 + (1))
        tmp1395 = tl.broadcast_to(tmp1394, [XBLOCK])
        tmp1409 = tl.load(in_ptr20 + (0))
        tmp1410 = tl.broadcast_to(tmp1409, [XBLOCK])
        tmp0 = x0
        tmp1 = tl.full([1], 99, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp5 = 2.0
        tmp6 = tmp4 * tmp5
        tmp8 = tl.where(tmp2, tmp6, tmp7)
        tmp9 = tl.full([1], 98, tl.int32)
        tmp10 = tmp0 == tmp9
        tmp11 = tmp9 == tmp1
        tmp14 = 0.0
        tmp15 = tl.where(tmp11, tmp14, tmp13)
        tmp16 = tmp15 * tmp5
        tmp17 = tl.where(tmp10, tmp16, tmp7)
        tmp18 = tmp8 + tmp17
        tmp19 = tl.full([1], 97, tl.int32)
        tmp20 = tmp0 == tmp19
        tmp21 = tmp19 == tmp9
        tmp22 = tmp19 == tmp1
        tmp25 = tl.where(tmp22, tmp14, tmp24)
        tmp26 = tl.where(tmp21, tmp14, tmp25)
        tmp27 = tmp26 * tmp5
        tmp28 = tl.where(tmp20, tmp27, tmp7)
        tmp29 = tmp18 + tmp28
        tmp30 = tl.full([1], 96, tl.int32)
        tmp31 = tmp0 == tmp30
        tmp32 = tmp30 == tmp19
        tmp33 = tmp30 == tmp9
        tmp34 = tmp30 == tmp1
        tmp37 = tl.where(tmp34, tmp14, tmp36)
        tmp38 = tl.where(tmp33, tmp14, tmp37)
        tmp39 = tl.where(tmp32, tmp14, tmp38)
        tmp40 = tmp39 * tmp5
        tmp41 = tl.where(tmp31, tmp40, tmp7)
        tmp42 = tmp29 + tmp41
        tmp43 = tl.full([1], 95, tl.int32)
        tmp44 = tmp0 == tmp43
        tmp45 = tmp43 == tmp30
        tmp46 = tmp43 == tmp19
        tmp47 = tmp43 == tmp9
        tmp48 = tmp43 == tmp1
        tmp51 = tl.where(tmp48, tmp14, tmp50)
        tmp52 = tl.where(tmp47, tmp14, tmp51)
        tmp53 = tl.where(tmp46, tmp14, tmp52)
        tmp54 = tl.where(tmp45, tmp14, tmp53)
        tmp55 = tmp54 * tmp5
        tmp56 = tl.where(tmp44, tmp55, tmp7)
        tmp57 = tmp42 + tmp56
        tmp58 = tl.full([1], 94, tl.int32)
        tmp59 = tmp0 == tmp58
        tmp60 = tmp58 == tmp43
        tmp61 = tmp58 == tmp30
        tmp62 = tmp58 == tmp19
        tmp63 = tmp58 == tmp9
        tmp64 = tmp58 == tmp1
        tmp67 = tl.where(tmp64, tmp14, tmp66)
        tmp68 = tl.where(tmp63, tmp14, tmp67)
        tmp69 = tl.where(tmp62, tmp14, tmp68)
        tmp70 = tl.where(tmp61, tmp14, tmp69)
        tmp71 = tl.where(tmp60, tmp14, tmp70)
        tmp72 = tmp71 * tmp5
        tmp73 = tl.where(tmp59, tmp72, tmp7)
        tmp74 = tmp57 + tmp73
        tmp75 = tl.full([1], 93, tl.int32)
        tmp76 = tmp0 == tmp75
        tmp77 = tmp75 == tmp58
        tmp78 = tmp75 == tmp43
        tmp79 = tmp75 == tmp30
        tmp80 = tmp75 == tmp19
        tmp81 = tmp75 == tmp9
        tmp82 = tmp75 == tmp1
        tmp85 = tl.where(tmp82, tmp14, tmp84)
        tmp86 = tl.where(tmp81, tmp14, tmp85)
        tmp87 = tl.where(tmp80, tmp14, tmp86)
        tmp88 = tl.where(tmp79, tmp14, tmp87)
        tmp89 = tl.where(tmp78, tmp14, tmp88)
        tmp90 = tl.where(tmp77, tmp14, tmp89)
        tmp91 = tmp90 * tmp5
        tmp92 = tl.where(tmp76, tmp91, tmp7)
        tmp93 = tmp74 + tmp92
        tmp94 = tl.full([1], 92, tl.int32)
        tmp95 = tmp0 == tmp94
        tmp96 = tmp94 == tmp75
        tmp97 = tmp94 == tmp58
        tmp98 = tmp94 == tmp43
        tmp99 = tmp94 == tmp30
        tmp100 = tmp94 == tmp19
        tmp101 = tmp94 == tmp9
        tmp102 = tmp94 == tmp1
        tmp105 = tl.where(tmp102, tmp14, tmp104)
        tmp106 = tl.where(tmp101, tmp14, tmp105)
        tmp107 = tl.where(tmp100, tmp14, tmp106)
        tmp108 = tl.where(tmp99, tmp14, tmp107)
        tmp109 = tl.where(tmp98, tmp14, tmp108)
        tmp110 = tl.where(tmp97, tmp14, tmp109)
        tmp111 = tl.where(tmp96, tmp14, tmp110)
        tmp112 = tmp111 * tmp5
        tmp113 = tl.where(tmp95, tmp112, tmp7)
        tmp114 = tmp93 + tmp113
        tmp115 = tl.full([1], 91, tl.int32)
        tmp116 = tmp0 == tmp115
        tmp117 = tmp115 == tmp94
        tmp118 = tmp115 == tmp75
        tmp119 = tmp115 == tmp58
        tmp120 = tmp115 == tmp43
        tmp121 = tmp115 == tmp30
        tmp122 = tmp115 == tmp19
        tmp123 = tmp115 == tmp9
        tmp124 = tmp115 == tmp1
        tmp127 = tl.where(tmp124, tmp14, tmp126)
        tmp128 = tl.where(tmp123, tmp14, tmp127)
        tmp129 = tl.where(tmp122, tmp14, tmp128)
        tmp130 = tl.where(tmp121, tmp14, tmp129)
        tmp131 = tl.where(tmp120, tmp14, tmp130)
        tmp132 = tl.where(tmp119, tmp14, tmp131)
        tmp133 = tl.where(tmp118, tmp14, tmp132)
        tmp134 = tl.where(tmp117, tmp14, tmp133)
        tmp135 = tmp134 * tmp5
        tmp136 = tl.where(tmp116, tmp135, tmp7)
        tmp137 = tmp114 + tmp136
        tmp138 = tl.full([1], 90, tl.int32)
        tmp139 = tmp0 == tmp138
        tmp142 = tl.where(tmp139, tmp141, tmp7)
        tmp143 = tmp137 + tmp142
        tmp144 = tl.full([1], 89, tl.int32)
        tmp145 = tmp0 == tmp144
        tmp148 = tmp147 * tmp5
        tmp149 = tl.where(tmp145, tmp148, tmp7)
        tmp150 = tmp143 + tmp149
        tmp151 = tl.full([1], 88, tl.int32)
        tmp152 = tmp0 == tmp151
        tmp153 = tmp151 == tmp144
        tmp156 = tl.where(tmp153, tmp14, tmp155)
        tmp157 = tmp156 * tmp5
        tmp158 = tl.where(tmp152, tmp157, tmp7)
        tmp159 = tmp150 + tmp158
        tmp160 = tl.full([1], 87, tl.int32)
        tmp161 = tmp0 == tmp160
        tmp162 = tmp160 == tmp151
        tmp163 = tmp160 == tmp144
        tmp166 = tl.where(tmp163, tmp14, tmp165)
        tmp167 = tl.where(tmp162, tmp14, tmp166)
        tmp168 = tmp167 * tmp5
        tmp169 = tl.where(tmp161, tmp168, tmp7)
        tmp170 = tmp159 + tmp169
        tmp171 = tl.full([1], 86, tl.int32)
        tmp172 = tmp0 == tmp171
        tmp173 = tmp171 == tmp160
        tmp174 = tmp171 == tmp151
        tmp175 = tmp171 == tmp144
        tmp178 = tl.where(tmp175, tmp14, tmp177)
        tmp179 = tl.where(tmp174, tmp14, tmp178)
        tmp180 = tl.where(tmp173, tmp14, tmp179)
        tmp181 = tmp180 * tmp5
        tmp182 = tl.where(tmp172, tmp181, tmp7)
        tmp183 = tmp170 + tmp182
        tmp184 = tl.full([1], 85, tl.int32)
        tmp185 = tmp0 == tmp184
        tmp186 = tmp184 == tmp171
        tmp187 = tmp184 == tmp160
        tmp188 = tmp184 == tmp151
        tmp189 = tmp184 == tmp144
        tmp192 = tl.where(tmp189, tmp14, tmp191)
        tmp193 = tl.where(tmp188, tmp14, tmp192)
        tmp194 = tl.where(tmp187, tmp14, tmp193)
        tmp195 = tl.where(tmp186, tmp14, tmp194)
        tmp196 = tmp195 * tmp5
        tmp197 = tl.where(tmp185, tmp196, tmp7)
        tmp198 = tmp183 + tmp197
        tmp199 = tl.full([1], 84, tl.int32)
        tmp200 = tmp0 == tmp199
        tmp201 = tmp199 == tmp184
        tmp202 = tmp199 == tmp171
        tmp203 = tmp199 == tmp160
        tmp204 = tmp199 == tmp151
        tmp205 = tmp199 == tmp144
        tmp208 = tl.where(tmp205, tmp14, tmp207)
        tmp209 = tl.where(tmp204, tmp14, tmp208)
        tmp210 = tl.where(tmp203, tmp14, tmp209)
        tmp211 = tl.where(tmp202, tmp14, tmp210)
        tmp212 = tl.where(tmp201, tmp14, tmp211)
        tmp213 = tmp212 * tmp5
        tmp214 = tl.where(tmp200, tmp213, tmp7)
        tmp215 = tmp198 + tmp214
        tmp216 = tl.full([1], 83, tl.int32)
        tmp217 = tmp0 == tmp216
        tmp218 = tmp216 == tmp199
        tmp219 = tmp216 == tmp184
        tmp220 = tmp216 == tmp171
        tmp221 = tmp216 == tmp160
        tmp222 = tmp216 == tmp151
        tmp223 = tmp216 == tmp144
        tmp226 = tl.where(tmp223, tmp14, tmp225)
        tmp227 = tl.where(tmp222, tmp14, tmp226)
        tmp228 = tl.where(tmp221, tmp14, tmp227)
        tmp229 = tl.where(tmp220, tmp14, tmp228)
        tmp230 = tl.where(tmp219, tmp14, tmp229)
        tmp231 = tl.where(tmp218, tmp14, tmp230)
        tmp232 = tmp231 * tmp5
        tmp233 = tl.where(tmp217, tmp232, tmp7)
        tmp234 = tmp215 + tmp233
        tmp235 = tl.full([1], 82, tl.int32)
        tmp236 = tmp0 == tmp235
        tmp237 = tmp235 == tmp216
        tmp238 = tmp235 == tmp199
        tmp239 = tmp235 == tmp184
        tmp240 = tmp235 == tmp171
        tmp241 = tmp235 == tmp160
        tmp242 = tmp235 == tmp151
        tmp243 = tmp235 == tmp144
        tmp246 = tl.where(tmp243, tmp14, tmp245)
        tmp247 = tl.where(tmp242, tmp14, tmp246)
        tmp248 = tl.where(tmp241, tmp14, tmp247)
        tmp249 = tl.where(tmp240, tmp14, tmp248)
        tmp250 = tl.where(tmp239, tmp14, tmp249)
        tmp251 = tl.where(tmp238, tmp14, tmp250)
        tmp252 = tl.where(tmp237, tmp14, tmp251)
        tmp253 = tmp252 * tmp5
        tmp254 = tl.where(tmp236, tmp253, tmp7)
        tmp255 = tmp234 + tmp254
        tmp256 = tl.full([1], 81, tl.int32)
        tmp257 = tmp0 == tmp256
        tmp258 = tmp256 == tmp235
        tmp259 = tmp256 == tmp216
        tmp260 = tmp256 == tmp199
        tmp261 = tmp256 == tmp184
        tmp262 = tmp256 == tmp171
        tmp263 = tmp256 == tmp160
        tmp264 = tmp256 == tmp151
        tmp265 = tmp256 == tmp144
        tmp268 = tl.where(tmp265, tmp14, tmp267)
        tmp269 = tl.where(tmp264, tmp14, tmp268)
        tmp270 = tl.where(tmp263, tmp14, tmp269)
        tmp271 = tl.where(tmp262, tmp14, tmp270)
        tmp272 = tl.where(tmp261, tmp14, tmp271)
        tmp273 = tl.where(tmp260, tmp14, tmp272)
        tmp274 = tl.where(tmp259, tmp14, tmp273)
        tmp275 = tl.where(tmp258, tmp14, tmp274)
        tmp276 = tmp275 * tmp5
        tmp277 = tl.where(tmp257, tmp276, tmp7)
        tmp278 = tmp255 + tmp277
        tmp279 = tl.full([1], 80, tl.int32)
        tmp280 = tmp0 == tmp279
        tmp283 = tl.where(tmp280, tmp282, tmp7)
        tmp284 = tmp278 + tmp283
        tmp285 = tl.full([1], 79, tl.int32)
        tmp286 = tmp0 == tmp285
        tmp289 = tmp288 * tmp5
        tmp290 = tl.where(tmp286, tmp289, tmp7)
        tmp291 = tmp284 + tmp290
        tmp292 = tl.full([1], 78, tl.int32)
        tmp293 = tmp0 == tmp292
        tmp294 = tmp292 == tmp285
        tmp297 = tl.where(tmp294, tmp14, tmp296)
        tmp298 = tmp297 * tmp5
        tmp299 = tl.where(tmp293, tmp298, tmp7)
        tmp300 = tmp291 + tmp299
        tmp301 = tl.full([1], 77, tl.int32)
        tmp302 = tmp0 == tmp301
        tmp303 = tmp301 == tmp292
        tmp304 = tmp301 == tmp285
        tmp307 = tl.where(tmp304, tmp14, tmp306)
        tmp308 = tl.where(tmp303, tmp14, tmp307)
        tmp309 = tmp308 * tmp5
        tmp310 = tl.where(tmp302, tmp309, tmp7)
        tmp311 = tmp300 + tmp310
        tmp312 = tl.full([1], 76, tl.int32)
        tmp313 = tmp0 == tmp312
        tmp314 = tmp312 == tmp301
        tmp315 = tmp312 == tmp292
        tmp316 = tmp312 == tmp285
        tmp319 = tl.where(tmp316, tmp14, tmp318)
        tmp320 = tl.where(tmp315, tmp14, tmp319)
        tmp321 = tl.where(tmp314, tmp14, tmp320)
        tmp322 = tmp321 * tmp5
        tmp323 = tl.where(tmp313, tmp322, tmp7)
        tmp324 = tmp311 + tmp323
        tmp325 = tl.full([1], 75, tl.int32)
        tmp326 = tmp0 == tmp325
        tmp327 = tmp325 == tmp312
        tmp328 = tmp325 == tmp301
        tmp329 = tmp325 == tmp292
        tmp330 = tmp325 == tmp285
        tmp333 = tl.where(tmp330, tmp14, tmp332)
        tmp334 = tl.where(tmp329, tmp14, tmp333)
        tmp335 = tl.where(tmp328, tmp14, tmp334)
        tmp336 = tl.where(tmp327, tmp14, tmp335)
        tmp337 = tmp336 * tmp5
        tmp338 = tl.where(tmp326, tmp337, tmp7)
        tmp339 = tmp324 + tmp338
        tmp340 = tl.full([1], 74, tl.int32)
        tmp341 = tmp0 == tmp340
        tmp342 = tmp340 == tmp325
        tmp343 = tmp340 == tmp312
        tmp344 = tmp340 == tmp301
        tmp345 = tmp340 == tmp292
        tmp346 = tmp340 == tmp285
        tmp349 = tl.where(tmp346, tmp14, tmp348)
        tmp350 = tl.where(tmp345, tmp14, tmp349)
        tmp351 = tl.where(tmp344, tmp14, tmp350)
        tmp352 = tl.where(tmp343, tmp14, tmp351)
        tmp353 = tl.where(tmp342, tmp14, tmp352)
        tmp354 = tmp353 * tmp5
        tmp355 = tl.where(tmp341, tmp354, tmp7)
        tmp356 = tmp339 + tmp355
        tmp357 = tl.full([1], 73, tl.int32)
        tmp358 = tmp0 == tmp357
        tmp359 = tmp357 == tmp340
        tmp360 = tmp357 == tmp325
        tmp361 = tmp357 == tmp312
        tmp362 = tmp357 == tmp301
        tmp363 = tmp357 == tmp292
        tmp364 = tmp357 == tmp285
        tmp367 = tl.where(tmp364, tmp14, tmp366)
        tmp368 = tl.where(tmp363, tmp14, tmp367)
        tmp369 = tl.where(tmp362, tmp14, tmp368)
        tmp370 = tl.where(tmp361, tmp14, tmp369)
        tmp371 = tl.where(tmp360, tmp14, tmp370)
        tmp372 = tl.where(tmp359, tmp14, tmp371)
        tmp373 = tmp372 * tmp5
        tmp374 = tl.where(tmp358, tmp373, tmp7)
        tmp375 = tmp356 + tmp374
        tmp376 = tl.full([1], 72, tl.int32)
        tmp377 = tmp0 == tmp376
        tmp378 = tmp376 == tmp357
        tmp379 = tmp376 == tmp340
        tmp380 = tmp376 == tmp325
        tmp381 = tmp376 == tmp312
        tmp382 = tmp376 == tmp301
        tmp383 = tmp376 == tmp292
        tmp384 = tmp376 == tmp285
        tmp387 = tl.where(tmp384, tmp14, tmp386)
        tmp388 = tl.where(tmp383, tmp14, tmp387)
        tmp389 = tl.where(tmp382, tmp14, tmp388)
        tmp390 = tl.where(tmp381, tmp14, tmp389)
        tmp391 = tl.where(tmp380, tmp14, tmp390)
        tmp392 = tl.where(tmp379, tmp14, tmp391)
        tmp393 = tl.where(tmp378, tmp14, tmp392)
        tmp394 = tmp393 * tmp5
        tmp395 = tl.where(tmp377, tmp394, tmp7)
        tmp396 = tmp375 + tmp395
        tmp397 = tl.full([1], 71, tl.int32)
        tmp398 = tmp0 == tmp397
        tmp399 = tmp397 == tmp376
        tmp400 = tmp397 == tmp357
        tmp401 = tmp397 == tmp340
        tmp402 = tmp397 == tmp325
        tmp403 = tmp397 == tmp312
        tmp404 = tmp397 == tmp301
        tmp405 = tmp397 == tmp292
        tmp406 = tmp397 == tmp285
        tmp409 = tl.where(tmp406, tmp14, tmp408)
        tmp410 = tl.where(tmp405, tmp14, tmp409)
        tmp411 = tl.where(tmp404, tmp14, tmp410)
        tmp412 = tl.where(tmp403, tmp14, tmp411)
        tmp413 = tl.where(tmp402, tmp14, tmp412)
        tmp414 = tl.where(tmp401, tmp14, tmp413)
        tmp415 = tl.where(tmp400, tmp14, tmp414)
        tmp416 = tl.where(tmp399, tmp14, tmp415)
        tmp417 = tmp416 * tmp5
        tmp418 = tl.where(tmp398, tmp417, tmp7)
        tmp419 = tmp396 + tmp418
        tmp420 = tl.full([1], 70, tl.int32)
        tmp421 = tmp0 == tmp420
        tmp424 = tl.where(tmp421, tmp423, tmp7)
        tmp425 = tmp419 + tmp424
        tmp426 = tl.full([1], 69, tl.int32)
        tmp427 = tmp0 == tmp426
        tmp430 = tmp429 * tmp5
        tmp431 = tl.where(tmp427, tmp430, tmp7)
        tmp432 = tmp425 + tmp431
        tmp433 = tl.full([1], 68, tl.int32)
        tmp434 = tmp0 == tmp433
        tmp435 = tmp433 == tmp426
        tmp438 = tl.where(tmp435, tmp14, tmp437)
        tmp439 = tmp438 * tmp5
        tmp440 = tl.where(tmp434, tmp439, tmp7)
        tmp441 = tmp432 + tmp440
        tmp442 = tl.full([1], 67, tl.int32)
        tmp443 = tmp0 == tmp442
        tmp444 = tmp442 == tmp433
        tmp445 = tmp442 == tmp426
        tmp448 = tl.where(tmp445, tmp14, tmp447)
        tmp449 = tl.where(tmp444, tmp14, tmp448)
        tmp450 = tmp449 * tmp5
        tmp451 = tl.where(tmp443, tmp450, tmp7)
        tmp452 = tmp441 + tmp451
        tmp453 = tl.full([1], 66, tl.int32)
        tmp454 = tmp0 == tmp453
        tmp455 = tmp453 == tmp442
        tmp456 = tmp453 == tmp433
        tmp457 = tmp453 == tmp426
        tmp460 = tl.where(tmp457, tmp14, tmp459)
        tmp461 = tl.where(tmp456, tmp14, tmp460)
        tmp462 = tl.where(tmp455, tmp14, tmp461)
        tmp463 = tmp462 * tmp5
        tmp464 = tl.where(tmp454, tmp463, tmp7)
        tmp465 = tmp452 + tmp464
        tmp466 = tl.full([1], 65, tl.int32)
        tmp467 = tmp0 == tmp466
        tmp468 = tmp466 == tmp453
        tmp469 = tmp466 == tmp442
        tmp470 = tmp466 == tmp433
        tmp471 = tmp466 == tmp426
        tmp474 = tl.where(tmp471, tmp14, tmp473)
        tmp475 = tl.where(tmp470, tmp14, tmp474)
        tmp476 = tl.where(tmp469, tmp14, tmp475)
        tmp477 = tl.where(tmp468, tmp14, tmp476)
        tmp478 = tmp477 * tmp5
        tmp479 = tl.where(tmp467, tmp478, tmp7)
        tmp480 = tmp465 + tmp479
        tmp481 = tl.full([1], 64, tl.int32)
        tmp482 = tmp0 == tmp481
        tmp483 = tmp481 == tmp466
        tmp484 = tmp481 == tmp453
        tmp485 = tmp481 == tmp442
        tmp486 = tmp481 == tmp433
        tmp487 = tmp481 == tmp426
        tmp490 = tl.where(tmp487, tmp14, tmp489)
        tmp491 = tl.where(tmp486, tmp14, tmp490)
        tmp492 = tl.where(tmp485, tmp14, tmp491)
        tmp493 = tl.where(tmp484, tmp14, tmp492)
        tmp494 = tl.where(tmp483, tmp14, tmp493)
        tmp495 = tmp494 * tmp5
        tmp496 = tl.where(tmp482, tmp495, tmp7)
        tmp497 = tmp480 + tmp496
        tmp498 = tl.full([1], 63, tl.int32)
        tmp499 = tmp0 == tmp498
        tmp500 = tmp498 == tmp481
        tmp501 = tmp498 == tmp466
        tmp502 = tmp498 == tmp453
        tmp503 = tmp498 == tmp442
        tmp504 = tmp498 == tmp433
        tmp505 = tmp498 == tmp426
        tmp508 = tl.where(tmp505, tmp14, tmp507)
        tmp509 = tl.where(tmp504, tmp14, tmp508)
        tmp510 = tl.where(tmp503, tmp14, tmp509)
        tmp511 = tl.where(tmp502, tmp14, tmp510)
        tmp512 = tl.where(tmp501, tmp14, tmp511)
        tmp513 = tl.where(tmp500, tmp14, tmp512)
        tmp514 = tmp513 * tmp5
        tmp515 = tl.where(tmp499, tmp514, tmp7)
        tmp516 = tmp497 + tmp515
        tmp517 = tl.full([1], 62, tl.int32)
        tmp518 = tmp0 == tmp517
        tmp519 = tmp517 == tmp498
        tmp520 = tmp517 == tmp481
        tmp521 = tmp517 == tmp466
        tmp522 = tmp517 == tmp453
        tmp523 = tmp517 == tmp442
        tmp524 = tmp517 == tmp433
        tmp525 = tmp517 == tmp426
        tmp528 = tl.where(tmp525, tmp14, tmp527)
        tmp529 = tl.where(tmp524, tmp14, tmp528)
        tmp530 = tl.where(tmp523, tmp14, tmp529)
        tmp531 = tl.where(tmp522, tmp14, tmp530)
        tmp532 = tl.where(tmp521, tmp14, tmp531)
        tmp533 = tl.where(tmp520, tmp14, tmp532)
        tmp534 = tl.where(tmp519, tmp14, tmp533)
        tmp535 = tmp534 * tmp5
        tmp536 = tl.where(tmp518, tmp535, tmp7)
        tmp537 = tmp516 + tmp536
        tmp538 = tl.full([1], 61, tl.int32)
        tmp539 = tmp0 == tmp538
        tmp540 = tmp538 == tmp517
        tmp541 = tmp538 == tmp498
        tmp542 = tmp538 == tmp481
        tmp543 = tmp538 == tmp466
        tmp544 = tmp538 == tmp453
        tmp545 = tmp538 == tmp442
        tmp546 = tmp538 == tmp433
        tmp547 = tmp538 == tmp426
        tmp550 = tl.where(tmp547, tmp14, tmp549)
        tmp551 = tl.where(tmp546, tmp14, tmp550)
        tmp552 = tl.where(tmp545, tmp14, tmp551)
        tmp553 = tl.where(tmp544, tmp14, tmp552)
        tmp554 = tl.where(tmp543, tmp14, tmp553)
        tmp555 = tl.where(tmp542, tmp14, tmp554)
        tmp556 = tl.where(tmp541, tmp14, tmp555)
        tmp557 = tl.where(tmp540, tmp14, tmp556)
        tmp558 = tmp557 * tmp5
        tmp559 = tl.where(tmp539, tmp558, tmp7)
        tmp560 = tmp537 + tmp559
        tmp561 = tl.full([1], 60, tl.int32)
        tmp562 = tmp0 == tmp561
        tmp565 = tl.where(tmp562, tmp564, tmp7)
        tmp566 = tmp560 + tmp565
        tmp567 = tl.full([1], 59, tl.int32)
        tmp568 = tmp0 == tmp567
        tmp571 = tmp570 * tmp5
        tmp572 = tl.where(tmp568, tmp571, tmp7)
        tmp573 = tmp566 + tmp572
        tmp574 = tl.full([1], 58, tl.int32)
        tmp575 = tmp0 == tmp574
        tmp576 = tmp574 == tmp567
        tmp579 = tl.where(tmp576, tmp14, tmp578)
        tmp580 = tmp579 * tmp5
        tmp581 = tl.where(tmp575, tmp580, tmp7)
        tmp582 = tmp573 + tmp581
        tmp583 = tl.full([1], 57, tl.int32)
        tmp584 = tmp0 == tmp583
        tmp585 = tmp583 == tmp574
        tmp586 = tmp583 == tmp567
        tmp589 = tl.where(tmp586, tmp14, tmp588)
        tmp590 = tl.where(tmp585, tmp14, tmp589)
        tmp591 = tmp590 * tmp5
        tmp592 = tl.where(tmp584, tmp591, tmp7)
        tmp593 = tmp582 + tmp592
        tmp594 = tl.full([1], 56, tl.int32)
        tmp595 = tmp0 == tmp594
        tmp596 = tmp594 == tmp583
        tmp597 = tmp594 == tmp574
        tmp598 = tmp594 == tmp567
        tmp601 = tl.where(tmp598, tmp14, tmp600)
        tmp602 = tl.where(tmp597, tmp14, tmp601)
        tmp603 = tl.where(tmp596, tmp14, tmp602)
        tmp604 = tmp603 * tmp5
        tmp605 = tl.where(tmp595, tmp604, tmp7)
        tmp606 = tmp593 + tmp605
        tmp607 = tl.full([1], 55, tl.int32)
        tmp608 = tmp0 == tmp607
        tmp609 = tmp607 == tmp594
        tmp610 = tmp607 == tmp583
        tmp611 = tmp607 == tmp574
        tmp612 = tmp607 == tmp567
        tmp615 = tl.where(tmp612, tmp14, tmp614)
        tmp616 = tl.where(tmp611, tmp14, tmp615)
        tmp617 = tl.where(tmp610, tmp14, tmp616)
        tmp618 = tl.where(tmp609, tmp14, tmp617)
        tmp619 = tmp618 * tmp5
        tmp620 = tl.where(tmp608, tmp619, tmp7)
        tmp621 = tmp606 + tmp620
        tmp622 = tl.full([1], 54, tl.int32)
        tmp623 = tmp0 == tmp622
        tmp624 = tmp622 == tmp607
        tmp625 = tmp622 == tmp594
        tmp626 = tmp622 == tmp583
        tmp627 = tmp622 == tmp574
        tmp628 = tmp622 == tmp567
        tmp631 = tl.where(tmp628, tmp14, tmp630)
        tmp632 = tl.where(tmp627, tmp14, tmp631)
        tmp633 = tl.where(tmp626, tmp14, tmp632)
        tmp634 = tl.where(tmp625, tmp14, tmp633)
        tmp635 = tl.where(tmp624, tmp14, tmp634)
        tmp636 = tmp635 * tmp5
        tmp637 = tl.where(tmp623, tmp636, tmp7)
        tmp638 = tmp621 + tmp637
        tmp639 = tl.full([1], 53, tl.int32)
        tmp640 = tmp0 == tmp639
        tmp641 = tmp639 == tmp622
        tmp642 = tmp639 == tmp607
        tmp643 = tmp639 == tmp594
        tmp644 = tmp639 == tmp583
        tmp645 = tmp639 == tmp574
        tmp646 = tmp639 == tmp567
        tmp649 = tl.where(tmp646, tmp14, tmp648)
        tmp650 = tl.where(tmp645, tmp14, tmp649)
        tmp651 = tl.where(tmp644, tmp14, tmp650)
        tmp652 = tl.where(tmp643, tmp14, tmp651)
        tmp653 = tl.where(tmp642, tmp14, tmp652)
        tmp654 = tl.where(tmp641, tmp14, tmp653)
        tmp655 = tmp654 * tmp5
        tmp656 = tl.where(tmp640, tmp655, tmp7)
        tmp657 = tmp638 + tmp656
        tmp658 = tl.full([1], 52, tl.int32)
        tmp659 = tmp0 == tmp658
        tmp660 = tmp658 == tmp639
        tmp661 = tmp658 == tmp622
        tmp662 = tmp658 == tmp607
        tmp663 = tmp658 == tmp594
        tmp664 = tmp658 == tmp583
        tmp665 = tmp658 == tmp574
        tmp666 = tmp658 == tmp567
        tmp669 = tl.where(tmp666, tmp14, tmp668)
        tmp670 = tl.where(tmp665, tmp14, tmp669)
        tmp671 = tl.where(tmp664, tmp14, tmp670)
        tmp672 = tl.where(tmp663, tmp14, tmp671)
        tmp673 = tl.where(tmp662, tmp14, tmp672)
        tmp674 = tl.where(tmp661, tmp14, tmp673)
        tmp675 = tl.where(tmp660, tmp14, tmp674)
        tmp676 = tmp675 * tmp5
        tmp677 = tl.where(tmp659, tmp676, tmp7)
        tmp678 = tmp657 + tmp677
        tmp679 = tl.full([1], 51, tl.int32)
        tmp680 = tmp0 == tmp679
        tmp681 = tmp679 == tmp658
        tmp682 = tmp679 == tmp639
        tmp683 = tmp679 == tmp622
        tmp684 = tmp679 == tmp607
        tmp685 = tmp679 == tmp594
        tmp686 = tmp679 == tmp583
        tmp687 = tmp679 == tmp574
        tmp688 = tmp679 == tmp567
        tmp691 = tl.where(tmp688, tmp14, tmp690)
        tmp692 = tl.where(tmp687, tmp14, tmp691)
        tmp693 = tl.where(tmp686, tmp14, tmp692)
        tmp694 = tl.where(tmp685, tmp14, tmp693)
        tmp695 = tl.where(tmp684, tmp14, tmp694)
        tmp696 = tl.where(tmp683, tmp14, tmp695)
        tmp697 = tl.where(tmp682, tmp14, tmp696)
        tmp698 = tl.where(tmp681, tmp14, tmp697)
        tmp699 = tmp698 * tmp5
        tmp700 = tl.where(tmp680, tmp699, tmp7)
        tmp701 = tmp678 + tmp700
        tmp702 = tl.full([1], 50, tl.int32)
        tmp703 = tmp0 == tmp702
        tmp706 = tl.where(tmp703, tmp705, tmp7)
        tmp707 = tmp701 + tmp706
        tmp708 = tl.full([1], 49, tl.int32)
        tmp709 = tmp0 == tmp708
        tmp712 = tmp711 * tmp5
        tmp713 = tl.where(tmp709, tmp712, tmp7)
        tmp714 = tmp707 + tmp713
        tmp715 = tl.full([1], 48, tl.int32)
        tmp716 = tmp0 == tmp715
        tmp717 = tmp715 == tmp708
        tmp720 = tl.where(tmp717, tmp14, tmp719)
        tmp721 = tmp720 * tmp5
        tmp722 = tl.where(tmp716, tmp721, tmp7)
        tmp723 = tmp714 + tmp722
        tmp724 = tl.full([1], 47, tl.int32)
        tmp725 = tmp0 == tmp724
        tmp726 = tmp724 == tmp715
        tmp727 = tmp724 == tmp708
        tmp730 = tl.where(tmp727, tmp14, tmp729)
        tmp731 = tl.where(tmp726, tmp14, tmp730)
        tmp732 = tmp731 * tmp5
        tmp733 = tl.where(tmp725, tmp732, tmp7)
        tmp734 = tmp723 + tmp733
        tmp735 = tl.full([1], 46, tl.int32)
        tmp736 = tmp0 == tmp735
        tmp737 = tmp735 == tmp724
        tmp738 = tmp735 == tmp715
        tmp739 = tmp735 == tmp708
        tmp742 = tl.where(tmp739, tmp14, tmp741)
        tmp743 = tl.where(tmp738, tmp14, tmp742)
        tmp744 = tl.where(tmp737, tmp14, tmp743)
        tmp745 = tmp744 * tmp5
        tmp746 = tl.where(tmp736, tmp745, tmp7)
        tmp747 = tmp734 + tmp746
        tmp748 = tl.full([1], 45, tl.int32)
        tmp749 = tmp0 == tmp748
        tmp750 = tmp748 == tmp735
        tmp751 = tmp748 == tmp724
        tmp752 = tmp748 == tmp715
        tmp753 = tmp748 == tmp708
        tmp756 = tl.where(tmp753, tmp14, tmp755)
        tmp757 = tl.where(tmp752, tmp14, tmp756)
        tmp758 = tl.where(tmp751, tmp14, tmp757)
        tmp759 = tl.where(tmp750, tmp14, tmp758)
        tmp760 = tmp759 * tmp5
        tmp761 = tl.where(tmp749, tmp760, tmp7)
        tmp762 = tmp747 + tmp761
        tmp763 = tl.full([1], 44, tl.int32)
        tmp764 = tmp0 == tmp763
        tmp765 = tmp763 == tmp748
        tmp766 = tmp763 == tmp735
        tmp767 = tmp763 == tmp724
        tmp768 = tmp763 == tmp715
        tmp769 = tmp763 == tmp708
        tmp772 = tl.where(tmp769, tmp14, tmp771)
        tmp773 = tl.where(tmp768, tmp14, tmp772)
        tmp774 = tl.where(tmp767, tmp14, tmp773)
        tmp775 = tl.where(tmp766, tmp14, tmp774)
        tmp776 = tl.where(tmp765, tmp14, tmp775)
        tmp777 = tmp776 * tmp5
        tmp778 = tl.where(tmp764, tmp777, tmp7)
        tmp779 = tmp762 + tmp778
        tmp780 = tl.full([1], 43, tl.int32)
        tmp781 = tmp0 == tmp780
        tmp782 = tmp780 == tmp763
        tmp783 = tmp780 == tmp748
        tmp784 = tmp780 == tmp735
        tmp785 = tmp780 == tmp724
        tmp786 = tmp780 == tmp715
        tmp787 = tmp780 == tmp708
        tmp790 = tl.where(tmp787, tmp14, tmp789)
        tmp791 = tl.where(tmp786, tmp14, tmp790)
        tmp792 = tl.where(tmp785, tmp14, tmp791)
        tmp793 = tl.where(tmp784, tmp14, tmp792)
        tmp794 = tl.where(tmp783, tmp14, tmp793)
        tmp795 = tl.where(tmp782, tmp14, tmp794)
        tmp796 = tmp795 * tmp5
        tmp797 = tl.where(tmp781, tmp796, tmp7)
        tmp798 = tmp779 + tmp797
        tmp799 = tl.full([1], 42, tl.int32)
        tmp800 = tmp0 == tmp799
        tmp801 = tmp799 == tmp780
        tmp802 = tmp799 == tmp763
        tmp803 = tmp799 == tmp748
        tmp804 = tmp799 == tmp735
        tmp805 = tmp799 == tmp724
        tmp806 = tmp799 == tmp715
        tmp807 = tmp799 == tmp708
        tmp810 = tl.where(tmp807, tmp14, tmp809)
        tmp811 = tl.where(tmp806, tmp14, tmp810)
        tmp812 = tl.where(tmp805, tmp14, tmp811)
        tmp813 = tl.where(tmp804, tmp14, tmp812)
        tmp814 = tl.where(tmp803, tmp14, tmp813)
        tmp815 = tl.where(tmp802, tmp14, tmp814)
        tmp816 = tl.where(tmp801, tmp14, tmp815)
        tmp817 = tmp816 * tmp5
        tmp818 = tl.where(tmp800, tmp817, tmp7)
        tmp819 = tmp798 + tmp818
        tmp820 = tl.full([1], 41, tl.int32)
        tmp821 = tmp0 == tmp820
        tmp822 = tmp820 == tmp799
        tmp823 = tmp820 == tmp780
        tmp824 = tmp820 == tmp763
        tmp825 = tmp820 == tmp748
        tmp826 = tmp820 == tmp735
        tmp827 = tmp820 == tmp724
        tmp828 = tmp820 == tmp715
        tmp829 = tmp820 == tmp708
        tmp832 = tl.where(tmp829, tmp14, tmp831)
        tmp833 = tl.where(tmp828, tmp14, tmp832)
        tmp834 = tl.where(tmp827, tmp14, tmp833)
        tmp835 = tl.where(tmp826, tmp14, tmp834)
        tmp836 = tl.where(tmp825, tmp14, tmp835)
        tmp837 = tl.where(tmp824, tmp14, tmp836)
        tmp838 = tl.where(tmp823, tmp14, tmp837)
        tmp839 = tl.where(tmp822, tmp14, tmp838)
        tmp840 = tmp839 * tmp5
        tmp841 = tl.where(tmp821, tmp840, tmp7)
        tmp842 = tmp819 + tmp841
        tmp843 = tl.full([1], 40, tl.int32)
        tmp844 = tmp0 == tmp843
        tmp847 = tl.where(tmp844, tmp846, tmp7)
        tmp848 = tmp842 + tmp847
        tmp849 = tl.full([1], 39, tl.int32)
        tmp850 = tmp0 == tmp849
        tmp853 = tmp852 * tmp5
        tmp854 = tl.where(tmp850, tmp853, tmp7)
        tmp855 = tmp848 + tmp854
        tmp856 = tl.full([1], 38, tl.int32)
        tmp857 = tmp0 == tmp856
        tmp858 = tmp856 == tmp849
        tmp861 = tl.where(tmp858, tmp14, tmp860)
        tmp862 = tmp861 * tmp5
        tmp863 = tl.where(tmp857, tmp862, tmp7)
        tmp864 = tmp855 + tmp863
        tmp865 = tl.full([1], 37, tl.int32)
        tmp866 = tmp0 == tmp865
        tmp867 = tmp865 == tmp856
        tmp868 = tmp865 == tmp849
        tmp871 = tl.where(tmp868, tmp14, tmp870)
        tmp872 = tl.where(tmp867, tmp14, tmp871)
        tmp873 = tmp872 * tmp5
        tmp874 = tl.where(tmp866, tmp873, tmp7)
        tmp875 = tmp864 + tmp874
        tmp876 = tl.full([1], 36, tl.int32)
        tmp877 = tmp0 == tmp876
        tmp878 = tmp876 == tmp865
        tmp879 = tmp876 == tmp856
        tmp880 = tmp876 == tmp849
        tmp883 = tl.where(tmp880, tmp14, tmp882)
        tmp884 = tl.where(tmp879, tmp14, tmp883)
        tmp885 = tl.where(tmp878, tmp14, tmp884)
        tmp886 = tmp885 * tmp5
        tmp887 = tl.where(tmp877, tmp886, tmp7)
        tmp888 = tmp875 + tmp887
        tmp889 = tl.full([1], 35, tl.int32)
        tmp890 = tmp0 == tmp889
        tmp891 = tmp889 == tmp876
        tmp892 = tmp889 == tmp865
        tmp893 = tmp889 == tmp856
        tmp894 = tmp889 == tmp849
        tmp897 = tl.where(tmp894, tmp14, tmp896)
        tmp898 = tl.where(tmp893, tmp14, tmp897)
        tmp899 = tl.where(tmp892, tmp14, tmp898)
        tmp900 = tl.where(tmp891, tmp14, tmp899)
        tmp901 = tmp900 * tmp5
        tmp902 = tl.where(tmp890, tmp901, tmp7)
        tmp903 = tmp888 + tmp902
        tmp904 = tl.full([1], 34, tl.int32)
        tmp905 = tmp0 == tmp904
        tmp906 = tmp904 == tmp889
        tmp907 = tmp904 == tmp876
        tmp908 = tmp904 == tmp865
        tmp909 = tmp904 == tmp856
        tmp910 = tmp904 == tmp849
        tmp913 = tl.where(tmp910, tmp14, tmp912)
        tmp914 = tl.where(tmp909, tmp14, tmp913)
        tmp915 = tl.where(tmp908, tmp14, tmp914)
        tmp916 = tl.where(tmp907, tmp14, tmp915)
        tmp917 = tl.where(tmp906, tmp14, tmp916)
        tmp918 = tmp917 * tmp5
        tmp919 = tl.where(tmp905, tmp918, tmp7)
        tmp920 = tmp903 + tmp919
        tmp921 = tl.full([1], 33, tl.int32)
        tmp922 = tmp0 == tmp921
        tmp923 = tmp921 == tmp904
        tmp924 = tmp921 == tmp889
        tmp925 = tmp921 == tmp876
        tmp926 = tmp921 == tmp865
        tmp927 = tmp921 == tmp856
        tmp928 = tmp921 == tmp849
        tmp931 = tl.where(tmp928, tmp14, tmp930)
        tmp932 = tl.where(tmp927, tmp14, tmp931)
        tmp933 = tl.where(tmp926, tmp14, tmp932)
        tmp934 = tl.where(tmp925, tmp14, tmp933)
        tmp935 = tl.where(tmp924, tmp14, tmp934)
        tmp936 = tl.where(tmp923, tmp14, tmp935)
        tmp937 = tmp936 * tmp5
        tmp938 = tl.where(tmp922, tmp937, tmp7)
        tmp939 = tmp920 + tmp938
        tmp940 = tl.full([1], 32, tl.int32)
        tmp941 = tmp0 == tmp940
        tmp942 = tmp940 == tmp921
        tmp943 = tmp940 == tmp904
        tmp944 = tmp940 == tmp889
        tmp945 = tmp940 == tmp876
        tmp946 = tmp940 == tmp865
        tmp947 = tmp940 == tmp856
        tmp948 = tmp940 == tmp849
        tmp951 = tl.where(tmp948, tmp14, tmp950)
        tmp952 = tl.where(tmp947, tmp14, tmp951)
        tmp953 = tl.where(tmp946, tmp14, tmp952)
        tmp954 = tl.where(tmp945, tmp14, tmp953)
        tmp955 = tl.where(tmp944, tmp14, tmp954)
        tmp956 = tl.where(tmp943, tmp14, tmp955)
        tmp957 = tl.where(tmp942, tmp14, tmp956)
        tmp958 = tmp957 * tmp5
        tmp959 = tl.where(tmp941, tmp958, tmp7)
        tmp960 = tmp939 + tmp959
        tmp961 = tl.full([1], 31, tl.int32)
        tmp962 = tmp0 == tmp961
        tmp963 = tmp961 == tmp940
        tmp964 = tmp961 == tmp921
        tmp965 = tmp961 == tmp904
        tmp966 = tmp961 == tmp889
        tmp967 = tmp961 == tmp876
        tmp968 = tmp961 == tmp865
        tmp969 = tmp961 == tmp856
        tmp970 = tmp961 == tmp849
        tmp973 = tl.where(tmp970, tmp14, tmp972)
        tmp974 = tl.where(tmp969, tmp14, tmp973)
        tmp975 = tl.where(tmp968, tmp14, tmp974)
        tmp976 = tl.where(tmp967, tmp14, tmp975)
        tmp977 = tl.where(tmp966, tmp14, tmp976)
        tmp978 = tl.where(tmp965, tmp14, tmp977)
        tmp979 = tl.where(tmp964, tmp14, tmp978)
        tmp980 = tl.where(tmp963, tmp14, tmp979)
        tmp981 = tmp980 * tmp5
        tmp982 = tl.where(tmp962, tmp981, tmp7)
        tmp983 = tmp960 + tmp982
        tmp984 = tl.full([1], 30, tl.int32)
        tmp985 = tmp0 == tmp984
        tmp988 = tl.where(tmp985, tmp987, tmp7)
        tmp989 = tmp983 + tmp988
        tmp990 = tl.full([1], 29, tl.int32)
        tmp991 = tmp0 == tmp990
        tmp994 = tmp993 * tmp5
        tmp995 = tl.where(tmp991, tmp994, tmp7)
        tmp996 = tmp989 + tmp995
        tmp997 = tl.full([1], 28, tl.int32)
        tmp998 = tmp0 == tmp997
        tmp999 = tmp997 == tmp990
        tmp1002 = tl.where(tmp999, tmp14, tmp1001)
        tmp1003 = tmp1002 * tmp5
        tmp1004 = tl.where(tmp998, tmp1003, tmp7)
        tmp1005 = tmp996 + tmp1004
        tmp1006 = tl.full([1], 27, tl.int32)
        tmp1007 = tmp0 == tmp1006
        tmp1008 = tmp1006 == tmp997
        tmp1009 = tmp1006 == tmp990
        tmp1012 = tl.where(tmp1009, tmp14, tmp1011)
        tmp1013 = tl.where(tmp1008, tmp14, tmp1012)
        tmp1014 = tmp1013 * tmp5
        tmp1015 = tl.where(tmp1007, tmp1014, tmp7)
        tmp1016 = tmp1005 + tmp1015
        tmp1017 = tl.full([1], 26, tl.int32)
        tmp1018 = tmp0 == tmp1017
        tmp1019 = tmp1017 == tmp1006
        tmp1020 = tmp1017 == tmp997
        tmp1021 = tmp1017 == tmp990
        tmp1024 = tl.where(tmp1021, tmp14, tmp1023)
        tmp1025 = tl.where(tmp1020, tmp14, tmp1024)
        tmp1026 = tl.where(tmp1019, tmp14, tmp1025)
        tmp1027 = tmp1026 * tmp5
        tmp1028 = tl.where(tmp1018, tmp1027, tmp7)
        tmp1029 = tmp1016 + tmp1028
        tmp1030 = tl.full([1], 25, tl.int32)
        tmp1031 = tmp0 == tmp1030
        tmp1032 = tmp1030 == tmp1017
        tmp1033 = tmp1030 == tmp1006
        tmp1034 = tmp1030 == tmp997
        tmp1035 = tmp1030 == tmp990
        tmp1038 = tl.where(tmp1035, tmp14, tmp1037)
        tmp1039 = tl.where(tmp1034, tmp14, tmp1038)
        tmp1040 = tl.where(tmp1033, tmp14, tmp1039)
        tmp1041 = tl.where(tmp1032, tmp14, tmp1040)
        tmp1042 = tmp1041 * tmp5
        tmp1043 = tl.where(tmp1031, tmp1042, tmp7)
        tmp1044 = tmp1029 + tmp1043
        tmp1045 = tl.full([1], 24, tl.int32)
        tmp1046 = tmp0 == tmp1045
        tmp1047 = tmp1045 == tmp1030
        tmp1048 = tmp1045 == tmp1017
        tmp1049 = tmp1045 == tmp1006
        tmp1050 = tmp1045 == tmp997
        tmp1051 = tmp1045 == tmp990
        tmp1054 = tl.where(tmp1051, tmp14, tmp1053)
        tmp1055 = tl.where(tmp1050, tmp14, tmp1054)
        tmp1056 = tl.where(tmp1049, tmp14, tmp1055)
        tmp1057 = tl.where(tmp1048, tmp14, tmp1056)
        tmp1058 = tl.where(tmp1047, tmp14, tmp1057)
        tmp1059 = tmp1058 * tmp5
        tmp1060 = tl.where(tmp1046, tmp1059, tmp7)
        tmp1061 = tmp1044 + tmp1060
        tmp1062 = tl.full([1], 23, tl.int32)
        tmp1063 = tmp0 == tmp1062
        tmp1064 = tmp1062 == tmp1045
        tmp1065 = tmp1062 == tmp1030
        tmp1066 = tmp1062 == tmp1017
        tmp1067 = tmp1062 == tmp1006
        tmp1068 = tmp1062 == tmp997
        tmp1069 = tmp1062 == tmp990
        tmp1072 = tl.where(tmp1069, tmp14, tmp1071)
        tmp1073 = tl.where(tmp1068, tmp14, tmp1072)
        tmp1074 = tl.where(tmp1067, tmp14, tmp1073)
        tmp1075 = tl.where(tmp1066, tmp14, tmp1074)
        tmp1076 = tl.where(tmp1065, tmp14, tmp1075)
        tmp1077 = tl.where(tmp1064, tmp14, tmp1076)
        tmp1078 = tmp1077 * tmp5
        tmp1079 = tl.where(tmp1063, tmp1078, tmp7)
        tmp1080 = tmp1061 + tmp1079
        tmp1081 = tl.full([1], 22, tl.int32)
        tmp1082 = tmp0 == tmp1081
        tmp1083 = tmp1081 == tmp1062
        tmp1084 = tmp1081 == tmp1045
        tmp1085 = tmp1081 == tmp1030
        tmp1086 = tmp1081 == tmp1017
        tmp1087 = tmp1081 == tmp1006
        tmp1088 = tmp1081 == tmp997
        tmp1089 = tmp1081 == tmp990
        tmp1092 = tl.where(tmp1089, tmp14, tmp1091)
        tmp1093 = tl.where(tmp1088, tmp14, tmp1092)
        tmp1094 = tl.where(tmp1087, tmp14, tmp1093)
        tmp1095 = tl.where(tmp1086, tmp14, tmp1094)
        tmp1096 = tl.where(tmp1085, tmp14, tmp1095)
        tmp1097 = tl.where(tmp1084, tmp14, tmp1096)
        tmp1098 = tl.where(tmp1083, tmp14, tmp1097)
        tmp1099 = tmp1098 * tmp5
        tmp1100 = tl.where(tmp1082, tmp1099, tmp7)
        tmp1101 = tmp1080 + tmp1100
        tmp1102 = tl.full([1], 21, tl.int32)
        tmp1103 = tmp0 == tmp1102
        tmp1104 = tmp1102 == tmp1081
        tmp1105 = tmp1102 == tmp1062
        tmp1106 = tmp1102 == tmp1045
        tmp1107 = tmp1102 == tmp1030
        tmp1108 = tmp1102 == tmp1017
        tmp1109 = tmp1102 == tmp1006
        tmp1110 = tmp1102 == tmp997
        tmp1111 = tmp1102 == tmp990
        tmp1114 = tl.where(tmp1111, tmp14, tmp1113)
        tmp1115 = tl.where(tmp1110, tmp14, tmp1114)
        tmp1116 = tl.where(tmp1109, tmp14, tmp1115)
        tmp1117 = tl.where(tmp1108, tmp14, tmp1116)
        tmp1118 = tl.where(tmp1107, tmp14, tmp1117)
        tmp1119 = tl.where(tmp1106, tmp14, tmp1118)
        tmp1120 = tl.where(tmp1105, tmp14, tmp1119)
        tmp1121 = tl.where(tmp1104, tmp14, tmp1120)
        tmp1122 = tmp1121 * tmp5
        tmp1123 = tl.where(tmp1103, tmp1122, tmp7)
        tmp1124 = tmp1101 + tmp1123
        tmp1125 = tl.full([1], 20, tl.int32)
        tmp1126 = tmp0 == tmp1125
        tmp1129 = tl.where(tmp1126, tmp1128, tmp7)
        tmp1130 = tmp1124 + tmp1129
        tmp1131 = tl.full([1], 19, tl.int32)
        tmp1132 = tmp0 == tmp1131
        tmp1135 = tmp1134 * tmp5
        tmp1136 = tl.where(tmp1132, tmp1135, tmp7)
        tmp1137 = tmp1130 + tmp1136
        tmp1138 = tl.full([1], 18, tl.int32)
        tmp1139 = tmp0 == tmp1138
        tmp1140 = tmp1138 == tmp1131
        tmp1143 = tl.where(tmp1140, tmp14, tmp1142)
        tmp1144 = tmp1143 * tmp5
        tmp1145 = tl.where(tmp1139, tmp1144, tmp7)
        tmp1146 = tmp1137 + tmp1145
        tmp1147 = tl.full([1], 17, tl.int32)
        tmp1148 = tmp0 == tmp1147
        tmp1149 = tmp1147 == tmp1138
        tmp1150 = tmp1147 == tmp1131
        tmp1153 = tl.where(tmp1150, tmp14, tmp1152)
        tmp1154 = tl.where(tmp1149, tmp14, tmp1153)
        tmp1155 = tmp1154 * tmp5
        tmp1156 = tl.where(tmp1148, tmp1155, tmp7)
        tmp1157 = tmp1146 + tmp1156
        tmp1158 = tl.full([1], 16, tl.int32)
        tmp1159 = tmp0 == tmp1158
        tmp1160 = tmp1158 == tmp1147
        tmp1161 = tmp1158 == tmp1138
        tmp1162 = tmp1158 == tmp1131
        tmp1165 = tl.where(tmp1162, tmp14, tmp1164)
        tmp1166 = tl.where(tmp1161, tmp14, tmp1165)
        tmp1167 = tl.where(tmp1160, tmp14, tmp1166)
        tmp1168 = tmp1167 * tmp5
        tmp1169 = tl.where(tmp1159, tmp1168, tmp7)
        tmp1170 = tmp1157 + tmp1169
        tmp1171 = tl.full([1], 15, tl.int32)
        tmp1172 = tmp0 == tmp1171
        tmp1173 = tmp1171 == tmp1158
        tmp1174 = tmp1171 == tmp1147
        tmp1175 = tmp1171 == tmp1138
        tmp1176 = tmp1171 == tmp1131
        tmp1179 = tl.where(tmp1176, tmp14, tmp1178)
        tmp1180 = tl.where(tmp1175, tmp14, tmp1179)
        tmp1181 = tl.where(tmp1174, tmp14, tmp1180)
        tmp1182 = tl.where(tmp1173, tmp14, tmp1181)
        tmp1183 = tmp1182 * tmp5
        tmp1184 = tl.where(tmp1172, tmp1183, tmp7)
        tmp1185 = tmp1170 + tmp1184
        tmp1186 = tl.full([1], 14, tl.int32)
        tmp1187 = tmp0 == tmp1186
        tmp1188 = tmp1186 == tmp1171
        tmp1189 = tmp1186 == tmp1158
        tmp1190 = tmp1186 == tmp1147
        tmp1191 = tmp1186 == tmp1138
        tmp1192 = tmp1186 == tmp1131
        tmp1195 = tl.where(tmp1192, tmp14, tmp1194)
        tmp1196 = tl.where(tmp1191, tmp14, tmp1195)
        tmp1197 = tl.where(tmp1190, tmp14, tmp1196)
        tmp1198 = tl.where(tmp1189, tmp14, tmp1197)
        tmp1199 = tl.where(tmp1188, tmp14, tmp1198)
        tmp1200 = tmp1199 * tmp5
        tmp1201 = tl.where(tmp1187, tmp1200, tmp7)
        tmp1202 = tmp1185 + tmp1201
        tmp1203 = tl.full([1], 13, tl.int32)
        tmp1204 = tmp0 == tmp1203
        tmp1205 = tmp1203 == tmp1186
        tmp1206 = tmp1203 == tmp1171
        tmp1207 = tmp1203 == tmp1158
        tmp1208 = tmp1203 == tmp1147
        tmp1209 = tmp1203 == tmp1138
        tmp1210 = tmp1203 == tmp1131
        tmp1213 = tl.where(tmp1210, tmp14, tmp1212)
        tmp1214 = tl.where(tmp1209, tmp14, tmp1213)
        tmp1215 = tl.where(tmp1208, tmp14, tmp1214)
        tmp1216 = tl.where(tmp1207, tmp14, tmp1215)
        tmp1217 = tl.where(tmp1206, tmp14, tmp1216)
        tmp1218 = tl.where(tmp1205, tmp14, tmp1217)
        tmp1219 = tmp1218 * tmp5
        tmp1220 = tl.where(tmp1204, tmp1219, tmp7)
        tmp1221 = tmp1202 + tmp1220
        tmp1222 = tl.full([1], 12, tl.int32)
        tmp1223 = tmp0 == tmp1222
        tmp1224 = tmp1222 == tmp1203
        tmp1225 = tmp1222 == tmp1186
        tmp1226 = tmp1222 == tmp1171
        tmp1227 = tmp1222 == tmp1158
        tmp1228 = tmp1222 == tmp1147
        tmp1229 = tmp1222 == tmp1138
        tmp1230 = tmp1222 == tmp1131
        tmp1233 = tl.where(tmp1230, tmp14, tmp1232)
        tmp1234 = tl.where(tmp1229, tmp14, tmp1233)
        tmp1235 = tl.where(tmp1228, tmp14, tmp1234)
        tmp1236 = tl.where(tmp1227, tmp14, tmp1235)
        tmp1237 = tl.where(tmp1226, tmp14, tmp1236)
        tmp1238 = tl.where(tmp1225, tmp14, tmp1237)
        tmp1239 = tl.where(tmp1224, tmp14, tmp1238)
        tmp1240 = tmp1239 * tmp5
        tmp1241 = tl.where(tmp1223, tmp1240, tmp7)
        tmp1242 = tmp1221 + tmp1241
        tmp1243 = tl.full([1], 11, tl.int32)
        tmp1244 = tmp0 == tmp1243
        tmp1245 = tmp1243 == tmp1222
        tmp1246 = tmp1243 == tmp1203
        tmp1247 = tmp1243 == tmp1186
        tmp1248 = tmp1243 == tmp1171
        tmp1249 = tmp1243 == tmp1158
        tmp1250 = tmp1243 == tmp1147
        tmp1251 = tmp1243 == tmp1138
        tmp1252 = tmp1243 == tmp1131
        tmp1255 = tl.where(tmp1252, tmp14, tmp1254)
        tmp1256 = tl.where(tmp1251, tmp14, tmp1255)
        tmp1257 = tl.where(tmp1250, tmp14, tmp1256)
        tmp1258 = tl.where(tmp1249, tmp14, tmp1257)
        tmp1259 = tl.where(tmp1248, tmp14, tmp1258)
        tmp1260 = tl.where(tmp1247, tmp14, tmp1259)
        tmp1261 = tl.where(tmp1246, tmp14, tmp1260)
        tmp1262 = tl.where(tmp1245, tmp14, tmp1261)
        tmp1263 = tmp1262 * tmp5
        tmp1264 = tl.where(tmp1244, tmp1263, tmp7)
        tmp1265 = tmp1242 + tmp1264
        tmp1266 = tl.full([1], 10, tl.int32)
        tmp1267 = tmp0 == tmp1266
        tmp1270 = tl.where(tmp1267, tmp1269, tmp7)
        tmp1271 = tmp1265 + tmp1270
        tmp1272 = tl.full([1], 9, tl.int32)
        tmp1273 = tmp0 == tmp1272
        tmp1276 = tmp1275 * tmp5
        tmp1277 = tl.where(tmp1273, tmp1276, tmp7)
        tmp1278 = tmp1271 + tmp1277
        tmp1279 = tl.full([1], 8, tl.int32)
        tmp1280 = tmp0 == tmp1279
        tmp1281 = tmp1279 == tmp1272
        tmp1284 = tl.where(tmp1281, tmp14, tmp1283)
        tmp1285 = tmp1284 * tmp5
        tmp1286 = tl.where(tmp1280, tmp1285, tmp7)
        tmp1287 = tmp1278 + tmp1286
        tmp1288 = tl.full([1], 7, tl.int32)
        tmp1289 = tmp0 == tmp1288
        tmp1290 = tmp1288 == tmp1279
        tmp1291 = tmp1288 == tmp1272
        tmp1294 = tl.where(tmp1291, tmp14, tmp1293)
        tmp1295 = tl.where(tmp1290, tmp14, tmp1294)
        tmp1296 = tmp1295 * tmp5
        tmp1297 = tl.where(tmp1289, tmp1296, tmp7)
        tmp1298 = tmp1287 + tmp1297
        tmp1299 = tl.full([1], 6, tl.int32)
        tmp1300 = tmp0 == tmp1299
        tmp1301 = tmp1299 == tmp1288
        tmp1302 = tmp1299 == tmp1279
        tmp1303 = tmp1299 == tmp1272
        tmp1306 = tl.where(tmp1303, tmp14, tmp1305)
        tmp1307 = tl.where(tmp1302, tmp14, tmp1306)
        tmp1308 = tl.where(tmp1301, tmp14, tmp1307)
        tmp1309 = tmp1308 * tmp5
        tmp1310 = tl.where(tmp1300, tmp1309, tmp7)
        tmp1311 = tmp1298 + tmp1310
        tmp1312 = tl.full([1], 5, tl.int32)
        tmp1313 = tmp0 == tmp1312
        tmp1314 = tmp1312 == tmp1299
        tmp1315 = tmp1312 == tmp1288
        tmp1316 = tmp1312 == tmp1279
        tmp1317 = tmp1312 == tmp1272
        tmp1320 = tl.where(tmp1317, tmp14, tmp1319)
        tmp1321 = tl.where(tmp1316, tmp14, tmp1320)
        tmp1322 = tl.where(tmp1315, tmp14, tmp1321)
        tmp1323 = tl.where(tmp1314, tmp14, tmp1322)
        tmp1324 = tmp1323 * tmp5
        tmp1325 = tl.where(tmp1313, tmp1324, tmp7)
        tmp1326 = tmp1311 + tmp1325
        tmp1327 = tl.full([1], 4, tl.int32)
        tmp1328 = tmp0 == tmp1327
        tmp1329 = tmp1327 == tmp1312
        tmp1330 = tmp1327 == tmp1299
        tmp1331 = tmp1327 == tmp1288
        tmp1332 = tmp1327 == tmp1279
        tmp1333 = tmp1327 == tmp1272
        tmp1336 = tl.where(tmp1333, tmp14, tmp1335)
        tmp1337 = tl.where(tmp1332, tmp14, tmp1336)
        tmp1338 = tl.where(tmp1331, tmp14, tmp1337)
        tmp1339 = tl.where(tmp1330, tmp14, tmp1338)
        tmp1340 = tl.where(tmp1329, tmp14, tmp1339)
        tmp1341 = tmp1340 * tmp5
        tmp1342 = tl.where(tmp1328, tmp1341, tmp7)
        tmp1343 = tmp1326 + tmp1342
        tmp1344 = tl.full([1], 3, tl.int32)
        tmp1345 = tmp0 == tmp1344
        tmp1346 = tmp1344 == tmp1327
        tmp1347 = tmp1344 == tmp1312
        tmp1348 = tmp1344 == tmp1299
        tmp1349 = tmp1344 == tmp1288
        tmp1350 = tmp1344 == tmp1279
        tmp1351 = tmp1344 == tmp1272
        tmp1354 = tl.where(tmp1351, tmp14, tmp1353)
        tmp1355 = tl.where(tmp1350, tmp14, tmp1354)
        tmp1356 = tl.where(tmp1349, tmp14, tmp1355)
        tmp1357 = tl.where(tmp1348, tmp14, tmp1356)
        tmp1358 = tl.where(tmp1347, tmp14, tmp1357)
        tmp1359 = tl.where(tmp1346, tmp14, tmp1358)
        tmp1360 = tmp1359 * tmp5
        tmp1361 = tl.where(tmp1345, tmp1360, tmp7)
        tmp1362 = tmp1343 + tmp1361
        tmp1363 = tl.full([1], 2, tl.int32)
        tmp1364 = tmp0 == tmp1363
        tmp1365 = tmp1363 == tmp1344
        tmp1366 = tmp1363 == tmp1327
        tmp1367 = tmp1363 == tmp1312
        tmp1368 = tmp1363 == tmp1299
        tmp1369 = tmp1363 == tmp1288
        tmp1370 = tmp1363 == tmp1279
        tmp1371 = tmp1363 == tmp1272
        tmp1374 = tl.where(tmp1371, tmp14, tmp1373)
        tmp1375 = tl.where(tmp1370, tmp14, tmp1374)
        tmp1376 = tl.where(tmp1369, tmp14, tmp1375)
        tmp1377 = tl.where(tmp1368, tmp14, tmp1376)
        tmp1378 = tl.where(tmp1367, tmp14, tmp1377)
        tmp1379 = tl.where(tmp1366, tmp14, tmp1378)
        tmp1380 = tl.where(tmp1365, tmp14, tmp1379)
        tmp1381 = tmp1380 * tmp5
        tmp1382 = tl.where(tmp1364, tmp1381, tmp7)
        tmp1383 = tmp1362 + tmp1382
        tmp1384 = tl.full([1], 1, tl.int32)
        tmp1385 = tmp0 == tmp1384
        tmp1386 = tmp1384 == tmp1363
        tmp1387 = tmp1384 == tmp1344
        tmp1388 = tmp1384 == tmp1327
        tmp1389 = tmp1384 == tmp1312
        tmp1390 = tmp1384 == tmp1299
        tmp1391 = tmp1384 == tmp1288
        tmp1392 = tmp1384 == tmp1279
        tmp1393 = tmp1384 == tmp1272
        tmp1396 = tl.where(tmp1393, tmp14, tmp1395)
        tmp1397 = tl.where(tmp1392, tmp14, tmp1396)
        tmp1398 = tl.where(tmp1391, tmp14, tmp1397)
        tmp1399 = tl.where(tmp1390, tmp14, tmp1398)
        tmp1400 = tl.where(tmp1389, tmp14, tmp1399)
        tmp1401 = tl.where(tmp1388, tmp14, tmp1400)
        tmp1402 = tl.where(tmp1387, tmp14, tmp1401)
        tmp1403 = tl.where(tmp1386, tmp14, tmp1402)
        tmp1404 = tmp1403 * tmp5
        tmp1405 = tl.where(tmp1385, tmp1404, tmp7)
        tmp1406 = tmp1383 + tmp1405
        tmp1407 = tl.full([1], 0, tl.int32)
        tmp1408 = tmp0 == tmp1407
        tmp1411 = tl.where(tmp1408, tmp1410, tmp7)
        tmp1412 = tmp1406 + tmp1411
        tl.store(in_out_ptr1 + (x0), tmp1412, xmask)


