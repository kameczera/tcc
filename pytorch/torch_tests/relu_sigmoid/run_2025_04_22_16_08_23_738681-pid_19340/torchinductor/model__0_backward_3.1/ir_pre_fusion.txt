op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 100}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = 
    [   MemoryDep('le', c0, {c0: 100}, None),
        MemoryDep('sigmoid', c0, {c0: 100}, None),
        MemoryDep('tangents_1', c0, {c0: 100}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
    buf0.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (100, 1)
op0.sizes = ([100], [])
le_layout = FixedLayout('cuda', torch.bool, size=[100], stride=[1])
tangents_1_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
sigmoid_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
class op0_loop_body:
    var_ranges = {z0: 100}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('le', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('tangents_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('sigmoid', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('sigmoid', get_index_3)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, load_3)
        mul = ops.mul(load_2, sub)
        mul_1 = ops.mul(load_1, mul)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(load, constant_1, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf0', get_index_4, where, None)
        return store
op0 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*i1', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=20), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': '712B1D69F892A891D8FFA5075DCAB47CFF4E132D88BFC66744701CEAE226F127', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 100
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), xmask).to(tl.int1)
        tmp1 = tl.load(in_ptr1 + (x0), xmask)
        tmp2 = tl.load(in_ptr2 + (x0), xmask)
        tmp3 = 1.0
        tmp4 = tmp3 - tmp2
        tmp5 = tmp2 * tmp4
        tmp6 = tmp1 * tmp5
        tmp7 = 0.0
        tmp8 = tl.where(tmp0, tmp7, tmp6)
        tl.store(out_ptr0 + (x0), tmp8, xmask)


